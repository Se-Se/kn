import { DocumentNode } from 'graphql';
import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions =  {}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** Custom ISO-8601 time type, e.g. 2021-03-03T18:04:49+08:00. */
  Time: string;
  /** Custom map type. */
  Map: Record<string, any>;
  /** The `Upload` scalar type represents a multipart file upload. */
  Upload: any;
};









export type ActionEvent = {
  __typename?: 'ActionEvent';
  projectTask: ProjectTask;
  eventId: Scalars['String'];
  eventType: Scalars['Int'];
  status: Scalars['Int'];
  timeoutSecond?: Maybe<Scalars['Int']>;
  cancel?: Maybe<Scalars['Boolean']>;
  stepResultId: Scalars['String'];
  stepCommand?: Maybe<Scalars['String']>;
  stepInformation?: Maybe<Scalars['String']>;
};

export type ActionPushResult = {
  __typename?: 'ActionPushResult';
  result?: Maybe<Scalars['String']>;
};

/** Input type for add collector. */
export type AddCollectorInput = {
  name: Scalars['String'];
  analysisID: Scalars['ID'];
  description: Scalars['String'];
  config: Scalars['String'];
};

/** Analysis agent management. */
export type Agent = {
  __typename?: 'Agent';
  id: Scalars['ID'];
  name: Scalars['String'];
  token: Scalars['String'];
  status: AgentStatus;
  error?: Maybe<Scalars['String']>;
  time: Scalars['Time'];
  displayID: Scalars['String'];
  version: Scalars['String'];
};

/** The connection type for Agent. */
export type AgentConnection = {
  __typename?: 'AgentConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Agent>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Type for agent mutation. */
export type AgentMutation = {
  __typename?: 'AgentMutation';
  /** Init agent. */
  initAgent?: Maybe<Agent>;
  /** Update agent. */
  updateAgent?: Maybe<Agent>;
  /** Update task. */
  updateTask?: Maybe<Task>;
};


/** Type for agent mutation. */
export type AgentMutationInitAgentArgs = {
  input: InitAgentInput;
};


/** Type for agent mutation. */
export type AgentMutationUpdateAgentArgs = {
  input: UpdateAgentInput;
};


/** Type for agent mutation. */
export type AgentMutationUpdateTaskArgs = {
  input: UpdateTaskInput;
};

/** Agent status enum. */
export enum AgentStatus {
  Ready = 'Ready',
  Busy = 'Busy',
  Error = 'Error'
}

/** AllRiskStatistics for all risk statistics */
export type AllRiskStatistics = {
  __typename?: 'AllRiskStatistics';
  /** Current team project/analysis baseline risk statistics. */
  baseline?: Maybe<Array<CheckRiskStatistics>>;
  /** Current team project/analysis custom risk statistics. */
  custom?: Maybe<Array<CheckRiskStatistics>>;
  /** Current team project/analysis cve risk statistics. */
  cve?: Maybe<Array<CvssRankStatistics>>;
  /** Current team project/analysis license risk statistics. */
  license?: Maybe<Array<LicenseRiskStatistics>>;
};

/** Analysis belong to one project. */
export type Analysis = Node & {
  __typename?: 'Analysis';
  id: Scalars['ID'];
  displayID: Scalars['String'];
  /** Null means not delete, else return delete time */
  deleteTime?: Maybe<Scalars['Time']>;
  /** Analysis name, default is (project name)-(hash(time)). */
  name: Scalars['String'];
  /** Analysis status */
  status: AnalysisStatus;
  /** Risk statistics, include baseline, cve and license. */
  risk: AllRiskStatistics;
  /** Brief description of current analysis. */
  description: Scalars['String'];
  /** Analyze time */
  time: Scalars['Time'];
  /** Analysis report. */
  report: Report;
  /**
   * Project which current analysis belongs to,
   * project will be null if analysis is deleted.
   */
  project?: Maybe<Project>;
  /** Upload files */
  file?: Maybe<Array<UploadFile>>;
  /** Analyze log subscription id. */
  logSubID: Scalars['ID'];
  /** Analysis type */
  analysisType: AnalysisType;
  /** Collector list */
  collector?: Maybe<CollectorConnection>;
  /** Search collector by collector name. */
  collectorByName?: Maybe<Collector>;
  /** Custom audit rule list */
  customAudit?: Maybe<RuleConnection>;
  /** Analysis setting */
  setting: AnalysisSetting;
};


/** Analysis belong to one project. */
export type AnalysisReportArgs = {
  language?: Maybe<Language>;
};


/** Analysis belong to one project. */
export type AnalysisCollectorArgs = {
  offset?: Maybe<OffsetConnectionInput>;
};


/** Analysis belong to one project. */
export type AnalysisCollectorByNameArgs = {
  name: Scalars['String'];
};


/** Analysis belong to one project. */
export type AnalysisCustomAuditArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};

/** The connection type for Analysis. */
export type AnalysisConnection = {
  __typename?: 'AnalysisConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Analysis>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Analysis. */
export type AnalysisConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** Analysis setting. */
export type AnalysisSetting = {
  __typename?: 'AnalysisSetting';
  /**
   * Analyze timeout.
   * It will override the global timeout setting in management.
   * Unit minute, default 10 minutes, max 60 minutes(1 hour), min 1 minute.
   */
  analyzeTimeout: Scalars['Int'];
  /**
   * File type that can be analyze.
   * Must has one type and default are text and binary.
   */
  fileType: Array<AnalyzeFileType>;
  /**
   * File path that will be skiped when analyzing.
   * Default is none.
   */
  fileSkiped: Array<Scalars['String']>;
};

/** Analysis status enum. */
export enum AnalysisStatus {
  Analyzing = 'Analyzing',
  Success = 'Success',
  Failed = 'Failed',
  Waiting = 'Waiting',
  Preparing = 'Preparing',
  Ready = 'Ready'
}

/** Analysis status statistics, include analysis status and count. */
export type AnalysisStatusStatistics = {
  __typename?: 'AnalysisStatusStatistics';
  status: AnalysisStatus;
  count: Scalars['Int'];
};

/** Analysis type. */
export enum AnalysisType {
  SystemLinux = 'SystemLinux',
  SystemAndroid8 = 'SystemAndroid8',
  SystemAndroid9 = 'SystemAndroid9',
  SystemAndroid10 = 'SystemAndroid10',
  SystemOther = 'SystemOther',
  ArtifactApk = 'ArtifactAPK',
  ArtifactPackage = 'ArtifactPackage',
  ArtifactRtos = 'ArtifactRTOS'
}

/** Analyze command enum. */
export enum AnalyzeCommand {
  Start = 'Start',
  Stop = 'Stop'
}

/** Analyze file type enum */
export enum AnalyzeFileType {
  Text = 'Text',
  Binary = 'Binary'
}

/** Analyzer type. */
export enum AnalyzerType {
  System = 'System'
}

/** Analyze task. */
export type AnalyzeTask = {
  __typename?: 'AnalyzeTask';
  id: Scalars['ID'];
  /** @deprecated Use analyzerType instead */
  type: AnalysisType;
  analyzerType: AnalyzerType;
  command: AnalyzeCommand;
  /** Config file, for example, "./1/config.toml" */
  configFile: Scalars['String'];
  /** Log file, for example, "./1/analyzer.log" */
  logFile: Scalars['String'];
};

/** Android risk. */
export type AndroidRisk = {
  __typename?: 'AndroidRisk';
  /** selinux risk list. */
  selinux?: Maybe<SeLinuxRiskConnection>;
};


/** Android risk. */
export type AndroidRiskSelinuxArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};

/** Sysauditor api information */
export type Api = {
  __typename?: 'API';
  id: Scalars['ID'];
  name: Scalars['String'];
  /** "Enabled" or "Disabled" */
  status: Scalars['Boolean'];
};

/** The connection type for API. */
export type ApiConnection = {
  __typename?: 'APIConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Api>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Apk components information. */
export type ApkComponents = ErrDescription & {
  __typename?: 'ApkComponents';
  activities?: Maybe<Array<Scalars['String']>>;
  services?: Maybe<Array<Scalars['String']>>;
  receivers?: Maybe<Array<Scalars['String']>>;
  providers?: Maybe<Array<Scalars['String']>>;
  errDescription?: Maybe<Scalars['Map']>;
};

/** Apk manifest information. */
export type ApkManifest = ErrDescription & {
  __typename?: 'ApkManifest';
  appName: Scalars['String'];
  packageName: Scalars['String'];
  version: Scalars['String'];
  md5: Scalars['String'];
  sharedUserID: Scalars['String'];
  allowBackup: Scalars['Boolean'];
  debuggable: Scalars['Boolean'];
  errDescription?: Maybe<Scalars['Map']>;
  beginTime: Scalars['Time'];
};

/** Apk permission information. */
export type ApkPermission = ErrDescription & {
  __typename?: 'ApkPermission';
  name: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for ApkPermission. */
export type ApkPermissionConnection = {
  __typename?: 'ApkPermissionConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<ApkPermission>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Apk report. */
export type ApkReport = {
  __typename?: 'ApkReport';
  id: Scalars['ID'];
  /** Report overview. */
  overview: ReportOverview;
  /** Apk manifest information. */
  manifest: ApkManifest;
  /** Apk components. */
  components: ApkComponents;
  /** Apk signature. */
  signature: ApkSignature;
  /** Apk permission. */
  permission?: Maybe<ApkPermissionConnection>;
  sdk?: Maybe<SdkConnection>;
  /** List audit. */
  listAudit?: Maybe<Array<CheckList>>;
  /** Audit report */
  auditReport: Check;
  /** Audit rule list */
  audit?: Maybe<RuleConnection>;
  /** Search rule by id. */
  ruleByID?: Maybe<Rule>;
  /** Sensitive info */
  sensitiveInfo?: Maybe<SensitiveInfoConnection>;
  /** File information list. */
  file?: Maybe<FileConnection>;
  /** apk cve information list. */
  libCveSec?: Maybe<CveSecConnection>;
  /** License audit info */
  license?: Maybe<LicenseConnection>;
  /** Get item position offset in report page. */
  position?: Maybe<Scalars['Int']>;
};


/** Apk report. */
export type ApkReportPermissionArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** Apk report. */
export type ApkReportSdkArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** Apk report. */
export type ApkReportAuditReportArgs = {
  classType?: Maybe<Scalars['String']>;
  checkType?: Maybe<Scalars['String']>;
};


/** Apk report. */
export type ApkReportAuditArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  risk?: Maybe<Array<CheckRisk>>;
};


/** Apk report. */
export type ApkReportRuleByIdArgs = {
  id: Scalars['ID'];
};


/** Apk report. */
export type ApkReportSensitiveInfoArgs = {
  type: SensitiveType;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Apk report. */
export type ApkReportFileArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  searchField?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  path?: Maybe<Scalars['String']>;
  noneVirtual?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Apk report. */
export type ApkReportLibCveSecArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  pid?: Maybe<Scalars['Int']>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Apk report. */
export type ApkReportLicenseArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Apk report. */
export type ApkReportPositionArgs = {
  field: Scalars['Map'];
};

export type ApkSelectorInfo = {
  __typename?: 'ApkSelectorInfo';
  appName?: Maybe<Scalars['String']>;
  packageName?: Maybe<Scalars['String']>;
};

/** Apk signature information. */
export type ApkSignature = ErrDescription & {
  __typename?: 'ApkSignature';
  version: Scalars['String'];
  subject: Scalars['String'];
  algorithm: Scalars['String'];
  oid: Scalars['String'];
  from: Scalars['String'];
  to: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

export type AppInfo = {
  AppName?: Maybe<Scalars['String']>;
  AppPackage: Scalars['String'];
};

export type AppSelectedList = {
  __typename?: 'AppSelectedList';
  appInfo: Scalars['String'];
  analysisStatus?: Maybe<Scalars['Int']>;
  analysisErrorMsg?: Maybe<Scalars['String']>;
  appName?: Maybe<Scalars['String']>;
  packageName?: Maybe<Scalars['String']>;
};

/** Audit type enum. */
export enum AuditType {
  Baseline = 'Baseline',
  Custom = 'Custom'
}

/** Baseline module enum. */
export enum BaselineModule {
  SystemConfiguration = 'SystemConfiguration',
  ServicesConfiguration = 'ServicesConfiguration',
  NetworkConfiguration = 'NetworkConfiguration',
  SystemMaintenance = 'SystemMaintenance'
}

/** Baseline common check type. */
export enum BaselineType {
  FilesystemConfiguration = 'FilesystemConfiguration',
  AdditionalSystemHardening = 'AdditionalSystemHardening',
  SystemConfiguration = 'SystemConfiguration',
  BootargsConfiguration = 'BootargsConfiguration',
  AdditionalProcessHardening = 'AdditionalProcessHardening',
  SystemServices = 'SystemServices',
  SshServerConfiguration = 'SSHServerConfiguration',
  NetworkParameters = 'NetworkParameters',
  SystemFileCheck = 'SystemFileCheck',
  SystemFilePermissions = 'SystemFilePermissions',
  UserAndGroupSettings = 'UserAndGroupSettings'
}

/**
 * Buddyinfo information, include node,
 * zone and freePageBlock list.
 */
export type BuddyInfo = ErrDescription & {
  __typename?: 'BuddyInfo';
  node: Scalars['Int'];
  zone: Scalars['String'];
  freePageBlock?: Maybe<Array<Scalars['Int']>>;
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for BuddyInfo. */
export type BuddyInfoConnection = {
  __typename?: 'BuddyInfoConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<BuddyInfo>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

export type CarInfo = {
  __typename?: 'CarInfo';
  id: Scalars['ID'];
  modelName: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  collectorConfig?: Maybe<Scalars['String']>;
  terminalModelInfos?: Maybe<Scalars['String']>;
  collectorResultUrl?: Maybe<Scalars['String']>;
  collectStatus?: Maybe<Scalars['Int']>;
  collectorProgress?: Maybe<Scalars['Int']>;
  collectorProgressMax?: Maybe<Scalars['Int']>;
  createUserName?: Maybe<Scalars['String']>;
  createTimeFormart?: Maybe<Scalars['String']>;
};

export type CarInfoItem = {
  __typename?: 'CarInfoItem';
  id: Scalars['ID'];
  modelName: Scalars['String'];
  modelId?: Maybe<Scalars['Int']>;
  modelTypeId: Scalars['Int'];
  modelType: Scalars['String'];
  collectType: Scalars['String'];
  version: Scalars['String'];
  collectStatus?: Maybe<Scalars['Int']>;
  collectorProgress?: Maybe<Scalars['Float']>;
  collectorProgressMax?: Maybe<Scalars['Float']>;
  collectorFailLog?: Maybe<Scalars['String']>;
};

export type CarInfoItemCreate = {
  componentId?: Maybe<Scalars['ID']>;
  componentName?: Maybe<Scalars['String']>;
  carSparePartId: Scalars['Int'];
  version?: Maybe<Scalars['String']>;
};

export type CarInfoItemSelector = {
  __typename?: 'CarInfoItemSelector';
  id: Scalars['ID'];
  modelName: Scalars['String'];
  titile: Scalars['String'];
  modelList?: Maybe<Array<Maybe<CarModelItemSelector>>>;
};

export type CarInfoRep = {
  __typename?: 'CarInfoRep';
  count: Scalars['Int'];
  carList: Array<Maybe<CarInfo>>;
};

/** car statistics */
export type CarInfoStatis = {
  __typename?: 'CarInfoStatis';
  modelName?: Maybe<Scalars['String']>;
  checkingNumber?: Maybe<Scalars['Int']>;
  passNumber?: Maybe<Scalars['Int']>;
  unPassNumber?: Maybe<Scalars['Int']>;
  unCheckedNumber?: Maybe<Scalars['Int']>;
};

/** car statistics fuse */
export type CarInfoStatisFuse = {
  __typename?: 'CarInfoStatisFuse';
  modelName?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Int']>;
  checkStatueMsg?: Maybe<Scalars['String']>;
};

export type CarModelItem = {
  __typename?: 'CarModelItem';
  id?: Maybe<Scalars['ID']>;
  carName?: Maybe<Scalars['String']>;
  createTime?: Maybe<Scalars['String']>;
  createUser?: Maybe<Scalars['String']>;
  carInfoItem?: Maybe<Array<Maybe<CarInfoItem>>>;
};

export type CarModelItemSelector = {
  __typename?: 'CarModelItemSelector';
  modelId: Scalars['Int'];
  modelName: Scalars['String'];
  titile: Scalars['String'];
  versions?: Maybe<Array<Maybe<VersionSelector>>>;
};

export type CarModelListRsp = {
  __typename?: 'CarModelListRsp';
  count?: Maybe<Scalars['Int']>;
  carInfoList?: Maybe<Array<Maybe<CarModelItem>>>;
};

export type CaseCheckedItem = {
  __typename?: 'CaseCheckedItem';
  territoryList?: Maybe<Array<Maybe<StaticItem>>>;
  bindList?: Maybe<Array<Maybe<StaticItem>>>;
  classifyList?: Maybe<Array<Maybe<StaticItem>>>;
  operatingSystem?: Maybe<Array<Maybe<StaticItem>>>;
  riskLevel?: Maybe<Array<Maybe<StaticItem>>>;
  carSpareParts?: Maybe<Array<Maybe<StaticItem>>>;
  testMethod?: Maybe<Array<Maybe<StaticItem>>>;
};

export type CaseClassifyResultRep = {
  __typename?: 'CaseClassifyResultRep';
  caseId: Scalars['ID'];
  caseSerialNumber: Scalars['String'];
  caseName: Scalars['String'];
  taskStatus: Scalars['Int'];
  checkTool: Scalars['String'];
  hanlder?: Maybe<Scalars['String']>;
  lawCatalogueId?: Maybe<Scalars['String']>;
};

export type CaseCustomItem = {
  __typename?: 'CaseCustomItem';
  id?: Maybe<Scalars['ID']>;
  serialNumber?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  caseDesc?: Maybe<Scalars['String']>;
  remediation?: Maybe<Scalars['String']>;
  submitUserName: Scalars['String'];
  submitTime: Scalars['String'];
  belongSuite: Scalars['String'];
  descriptionInfo?: Maybe<Scalars['String']>;
  caseType?: Maybe<Scalars['Int']>;
  scriptFileName?: Maybe<Scalars['String']>;
  scriptUrl?: Maybe<Scalars['String']>;
  canModify?: Maybe<Scalars['Boolean']>;
  bindName?: Maybe<Scalars['String']>;
  bindId?: Maybe<Scalars['Int']>;
  classifyName?: Maybe<Scalars['String']>;
  classifyId?: Maybe<Scalars['Int']>;
  operatingSystemName?: Maybe<Scalars['String']>;
  operatingSystemID?: Maybe<Scalars['Int']>;
  operatingSystemType?: Maybe<Scalars['String']>;
  riskLevelName?: Maybe<Scalars['String']>;
  riskLevelType?: Maybe<Scalars['String']>;
  riskLevelId?: Maybe<Scalars['Int']>;
  testMethodName?: Maybe<Scalars['String']>;
  testMethodId?: Maybe<Scalars['Int']>;
  testMothodType?: Maybe<Scalars['String']>;
};

export type CaseCustomItemRep = {
  __typename?: 'CaseCustomItemRep';
  count?: Maybe<Scalars['Int']>;
  selectCaseId?: Maybe<Array<Maybe<Scalars['ID']>>>;
  resultList?: Maybe<Array<Maybe<CaseCustomItem>>>;
  groupResultList?: Maybe<Array<Maybe<CaseCustomItemResultGroup>>>;
  suiteName: Scalars['String'];
  uploadFileUrl: Scalars['String'];
  canModify: Scalars['Boolean'];
};

export type CaseCustomItemResultGroup = {
  __typename?: 'CaseCustomItemResultGroup';
  name?: Maybe<Scalars['String']>;
  groupCheckedStatus?: Maybe<Scalars['Int']>;
  resultList?: Maybe<Array<Maybe<CaseCustomItem>>>;
};

export type CaseDetailRsp = {
  __typename?: 'CaseDetailRsp';
  caseResultId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  projectName: Scalars['String'];
  caseName: Scalars['String'];
  caseCheckStatus: Scalars['Int'];
  dutyLawName: Scalars['String'];
  dutyLawCatalogueName: Scalars['String'];
  dutyLawClassify1?: Maybe<Scalars['String']>;
  dutyLawClassify2?: Maybe<Scalars['String']>;
  dutyLawClassify3?: Maybe<Scalars['String']>;
  dutyLawClassify4?: Maybe<Scalars['String']>;
  dutyLawClassify5?: Maybe<Scalars['String']>;
  checkMethod: Scalars['String'];
  testCaseStep: Scalars['String'];
  resultStandard: Scalars['String'];
  resultSuccess: Scalars['String'];
  resultFail: Scalars['String'];
};

export type CaseInfo = {
  __typename?: 'CaseInfo';
  caseBaseInfo: CaseCustomItem;
  complianceRequire?: Maybe<Array<Maybe<LawCatalogueBaseDetail>>>;
  caseTestProcess: Scalars['String'];
};

/** my case info */
export type CaseItemRsp = {
  __typename?: 'CaseItemRsp';
  id: Scalars['ID'];
  caseName: Scalars['String'];
  projectId: Scalars['ID'];
  projectName: Scalars['String'];
  toolId: Scalars['ID'];
  toolName: Scalars['String'];
  lawCatalogueId: Scalars['ID'];
  lawCatalogueName: Scalars['String'];
  /** case status fill number mean */
  status: Scalars['Int'];
  /** handler user name */
  handlerUser: Scalars['String'];
  /** affiliation law title name */
  affiliationTitle: Scalars['String'];
};

export type CaseOfToolResultRsp = {
  __typename?: 'CaseOfToolResultRsp';
  toolItemBase: ToolItemRsp;
  caseResult?: Maybe<Array<CaseResult>>;
};

export type CaseReport = {
  __typename?: 'CaseReport';
  sysAnalysisId: Scalars['ID'];
  appName: Scalars['String'];
  sysAuditorReportList?: Maybe<Array<Maybe<SysAuditorReport>>>;
};

/** case result */
export type CaseResult = {
  __typename?: 'CaseResult';
  /** id 前端唯一id */
  id: Scalars['Int'];
  caseId: Scalars['ID'];
  serialNumber?: Maybe<Scalars['String']>;
  caseName: Scalars['String'];
  /** case status */
  status: Scalars['Int'];
  /** handler user name */
  handlerUser: Scalars['String'];
  /** catalogue law catalogue name */
  catalogue: Scalars['String'];
  /** catalogue law catalogue Id */
  lawCatalogueId: Scalars['String'];
  /** 领域 */
  territoryName?: Maybe<Scalars['String']>;
  territoryId?: Maybe<Scalars['Int']>;
  /** 分类 */
  classifyName?: Maybe<Scalars['String']>;
  classifyId?: Maybe<Scalars['Int']>;
  /** 系统 */
  operatingSystemName?: Maybe<Scalars['String']>;
  operatingSystemID?: Maybe<Scalars['Int']>;
  operatingSystemType?: Maybe<Scalars['String']>;
  /** 风险 */
  riskLevelName?: Maybe<Scalars['String']>;
  riskLevelType?: Maybe<Scalars['String']>;
  riskLevelId?: Maybe<Scalars['Int']>;
  /** 测试方法 */
  testMethodName?: Maybe<Scalars['String']>;
  testMethodId?: Maybe<Scalars['Int']>;
  testMothodType?: Maybe<Scalars['String']>;
};

/** CaseResultListRsp */
export type CaseResultListRsp = {
  __typename?: 'CaseResultListRsp';
  count: Scalars['Int'];
  caseResultList: Array<Maybe<CaseResult>>;
};

export type CaseTestProcessRecordRsp = {
  __typename?: 'CaseTestProcessRecordRsp';
  caseStatus?: Maybe<Scalars['Int']>;
  caseBaseInfo: CaseCustomItem;
  complianceRequire?: Maybe<Array<Maybe<LawCatalogueBaseDetail>>>;
  caseTestProcess?: Maybe<Array<CaseTestProcessRsp>>;
};

export type CaseTestProcessRsp = {
  __typename?: 'CaseTestProcessRsp';
  stepName: Scalars['String'];
  done: Scalars['Boolean'];
  process: Scalars['String'];
  result: Scalars['String'];
  remark: Scalars['String'];
  data?: Maybe<Array<Maybe<UploadData>>>;
};

/** project 's catalogue result info */
export type CatalogueTestResultRsp = {
  __typename?: 'CatalogueTestResultRsp';
  /** pass case number */
  passNumber?: Maybe<Scalars['Int']>;
  /** unpass case number */
  unPassNumber?: Maybe<Scalars['Int']>;
  testingNumber?: Maybe<Scalars['Int']>;
  unTestNumber?: Maybe<Scalars['Int']>;
  /** ignore case number */
  ignoreNumber?: Maybe<Scalars['Int']>;
  /** project all catalogue number */
  catalogueNumber?: Maybe<Scalars['Int']>;
  /** passRate */
  passRate?: Maybe<Scalars['Float']>;
};

/**
 * Check information, inclue check rule list
 * and risk statistics.
 */
export type Check = {
  __typename?: 'Check';
  rule?: Maybe<Array<Rule>>;
  risk: Array<CheckRiskStatistics>;
};

/** Check list, include class and list. */
export type CheckList = {
  __typename?: 'CheckList';
  key: Scalars['String'];
  class: Scalars['String'];
  list?: Maybe<Array<CheckType>>;
};

/** Check risk enum. */
export enum CheckRisk {
  High = 'High',
  Medium = 'Medium',
  Warning = 'Warning',
  Pass = 'Pass',
  NotAvailable = 'NotAvailable'
}

/** check risk statistics, include risk, and count. */
export type CheckRiskStatistics = {
  __typename?: 'CheckRiskStatistics';
  risk: CheckRisk;
  count: Scalars['Int'];
};

/**
 * CheckSec Individual part information, include canary, fortified, fortifyAble, fortify source,
 * nx, pie, relro, rpath, runpath, symbols and cve count.
 */
export type CheckSec = ErrDescription & {
  __typename?: 'CheckSec';
  name: Scalars['String'];
  canary: Scalars['String'];
  fortified: Scalars['Int'];
  fortifyAble: Scalars['Int'];
  fortifySource: Scalars['String'];
  nx: Scalars['String'];
  pie: Scalars['String'];
  relro: Scalars['String'];
  rpath: Scalars['String'];
  runpath: Scalars['String'];
  symbols: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for CheckSec. */
export type CheckSecConnection = {
  __typename?: 'CheckSecConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<CheckSec>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for CheckSec. */
export type CheckSecConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** Check type. */
export type CheckType = {
  __typename?: 'CheckType';
  /** Check type key, it's used as check query input. */
  key: Scalars['String'];
  /** Check type value. */
  value: Scalars['String'];
};

export type Client = {
  __typename?: 'Client';
  isConnected?: Maybe<Scalars['Boolean']>;
  clientId: Scalars['String'];
  clientVersion?: Maybe<Scalars['String']>;
  clientOs?: Maybe<Scalars['String']>;
  clientHostName?: Maybe<Scalars['String']>;
  clientIp?: Maybe<Scalars['String']>;
  clientExecutingProjectTaskId?: Maybe<Scalars['String']>;
  inUsedDeviceInfo?: Maybe<Scalars['String']>;
  usbDeviceCount?: Maybe<Scalars['Int']>;
  onlineUsbDevice?: Maybe<Array<Maybe<OnlineUsbDevice>>>;
};

export type ClientAlertMsg = {
  __typename?: 'ClientAlertMsg';
  hasAlert: Scalars['Boolean'];
  alertType: Scalars['Int'];
  uuid?: Maybe<Scalars['String']>;
  newDeviceName?: Maybe<Scalars['String']>;
  oldDeviceName?: Maybe<Scalars['String']>;
};

export type ClientDeviceOnline = {
  __typename?: 'ClientDeviceOnline';
  isOnline: Scalars['Boolean'];
  deviceType: Scalars['String'];
  deviceId: Scalars['String'];
  deviceName: Scalars['String'];
  clientId: Scalars['String'];
  offlineData?: Maybe<LinuxDeviceConnectInfo>;
};

export type ClientDeviceOnlineV2 = {
  __typename?: 'ClientDeviceOnlineV2';
  isOnline: Scalars['Int'];
  userCancel: Scalars['Boolean'];
  deviceType: Scalars['String'];
  deviceId: Scalars['String'];
  deviceName: Scalars['String'];
  clientId: Scalars['String'];
  offlineData?: Maybe<LinuxDeviceConnectInfo>;
};

/**
 * Collector type, include name, description, status,
 * time, config file content and log subscription id.
 */
export type Collector = {
  __typename?: 'Collector';
  id: Scalars['ID'];
  name: Scalars['String'];
  description: Scalars['String'];
  status: CollectorStatus;
  time: Scalars['Time'];
  config: Scalars['String'];
  logSubID: Scalars['ID'];
};

/** The connection type for Collector. */
export type CollectorConnection = {
  __typename?: 'CollectorConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Collector>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Collector status enum. */
export enum CollectorStatus {
  Waiting = 'Waiting',
  Collecting = 'Collecting',
  Failed = 'Failed',
  Success = 'Success',
  Ready = 'Ready'
}

/** Detail column. */
export type Column = {
  __typename?: 'Column';
  key: Scalars['String'];
  title: Scalars['String'];
  type?: Maybe<Scalars['String']>;
  append?: Maybe<Array<ColumnAppend>>;
};

/** Column append attribute. */
export type ColumnAppend = {
  __typename?: 'ColumnAppend';
  key: Scalars['String'];
  type: Scalars['String'];
};

/** Command information, include command, result, return status */
export type Command = ErrDescription & {
  __typename?: 'Command';
  id: Scalars['ID'];
  command: Scalars['String'];
  result: Scalars['String'];
  returnStatus: Scalars['Int'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Command. */
export type CommandConnection = {
  __typename?: 'CommandConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Command>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

export type CommonalityAutoTaskReportRep = {
  __typename?: 'CommonalityAutoTaskReportRep';
  count?: Maybe<Scalars['Int']>;
  reportSystemUser?: Maybe<Array<Maybe<ReportSystemUser>>>;
  reportFile?: Maybe<Array<Maybe<ReportFile>>>;
  reportCVESec?: Maybe<Array<Maybe<ReportCveSec>>>;
  reportApkSignature?: Maybe<Array<Maybe<ReportApkSignature>>>;
  reportApkManifest?: Maybe<Array<Maybe<ReportApkManifest>>>;
  reportCheckSec?: Maybe<Array<Maybe<ReportCheckSec>>>;
  apkComponents?: Maybe<Array<Maybe<ComplianceApkComponents>>>;
};

/** Common risk enum. */
export enum CommonRisk {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low'
}

/** Common risk statistics, include common risk and count. */
export type CommonRiskStatistics = {
  __typename?: 'CommonRiskStatistics';
  risk: CommonRisk;
  count: Scalars['Int'];
};

/** Common status enum. */
export enum CommonStatus {
  Ready = 'Ready',
  InProgress = 'InProgress',
  Completed = 'Completed'
}

/** Common status statistics, include common status and count. */
export type CommonStatusStatistics = {
  __typename?: 'CommonStatusStatistics';
  status: CommonStatus;
  count: Scalars['Int'];
};

export type ComplianceApkComponents = {
  __typename?: 'ComplianceApkComponents';
  appName?: Maybe<Scalars['String']>;
  activities?: Maybe<Array<Maybe<Scalars['String']>>>;
  providers?: Maybe<Array<Maybe<Scalars['String']>>>;
  receivers?: Maybe<Array<Maybe<Scalars['String']>>>;
  services?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** Input type for config collector. */
export type ConfigCollectorInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  config?: Maybe<Scalars['String']>;
};

/** Input type for Connection. */
export type ConnectionInput = {
  /** Returns the elements in the list that come after the specified cursor. */
  after?: Maybe<Scalars['String']>;
  /** Returns the elements in the list that come before the specified cursor. */
  before?: Maybe<Scalars['String']>;
  /** Returns the first _n_ elements from the list. */
  first?: Maybe<Scalars['Int']>;
  /** Returns the last _n_ elements from the list. */
  last?: Maybe<Scalars['Int']>;
};

/** Connect relation. */
export type ConnectRelation = {
  __typename?: 'ConnectRelation';
  /**
   * Type shows the connection type.
   * Possible values are: socket, pipe, file
   */
  type: Scalars['String'];
  /**
   * Port describe the path of class. It should match the class.
   * Type          Port
   * socket        socket port (ip socket) or socket patch (unix socket)
   * pipe            pipe name (if have one)
   * file          absolute file path
   */
  port: Scalars['String'];
  /**
   * Get position of current connect relation in detail report,
   * position may in ipsocket or unixsocket.
   */
  detailPosition?: Maybe<Position>;
  /** Signature to help get detailPisition, it's useless for frontend. */
  SignatureTag?: Maybe<Scalars['String']>;
};

/** Input type for create agent. */
export type CreateAgentInput = {
  name: Scalars['String'];
};

/** Input type for fast create analysis. */
export type CreateAnalysisFastInput = {
  /** If name input is null, default is (project name)-(hash(time)) */
  name?: Maybe<Scalars['String']>;
  /**
   * The projectID and createProject must and only one is not null,
   * if projectID is not null, create analysis in the project,
   * if createProject is not null, create project then create analysis in the project.
   */
  projectID?: Maybe<Scalars['ID']>;
  createProject?: Maybe<CreateProjectInput>;
  description: Scalars['String'];
  analysisType: AnalysisType;
};

/** Input type for create analysis. */
export type CreateAnalysisInput = {
  /** If name input is null, default is (project name)-(hash(time)) */
  name?: Maybe<Scalars['String']>;
  projectID: Scalars['ID'];
  description: Scalars['String'];
  analysisType: AnalysisType;
};

/** Input type for create project. */
export type CreateProjectInput = {
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  /**
   * selected law id not nil
   * Compatible with sysAuditor
   */
  lawId?: Maybe<Scalars['ID']>;
  /** selected moduel id not nil */
  moduelId?: Maybe<Scalars['ID']>;
  /** selected car model id not nil */
  carModelId?: Maybe<Scalars['ID']>;
  /** principal user id not nil */
  principalUserId?: Maybe<Scalars['ID']>;
  /** project version not nil */
  version?: Maybe<Scalars['String']>;
  /** 零部件的id */
  autoPartsId?: Maybe<Scalars['Int']>;
  /** 所属系统id */
  systemId?: Maybe<Scalars['Int']>;
  /** 所属系统类型 */
  systemType?: Maybe<Scalars['String']>;
  /** Client Id */
  clientId?: Maybe<Scalars['String']>;
  /** 当系统为android时候，选中的设备id, 当为linux时候，连接成功后返回的deviceId */
  deviceId?: Maybe<Scalars['String']>;
  /** 当系统为linux时候，连接的类型：psw、cert */
  linuxConnectType?: Maybe<Scalars['String']>;
  /** 当系统为linux时候，选择密码类：IP */
  linuxConnectIP?: Maybe<Scalars['String']>;
  /** 当系统为linux时候，选择密码类：端口 */
  linuxConnectPort?: Maybe<Scalars['Int']>;
  /** 当系统为linux时候，选择密码类：账户 */
  linuxConnectUser?: Maybe<Scalars['String']>;
  /** 当系统为linux时候，选择密码类：密码 */
  linuxConnectPassword?: Maybe<Scalars['String']>;
  /** 当系统为linux时候，选择证书：证书的url地址 */
  linuxConnectCertificateUrl?: Maybe<Scalars['String']>;
};

/** Input type for create team. */
export type CreateTeamInput = {
  name: Scalars['String'];
  /** Null if system is unlimited. */
  timesLimit?: Maybe<Scalars['Int']>;
};

/** Input type for create token. */
export type CreateTokenInput = {
  description?: Maybe<Scalars['String']>;
};

/** Input type for create user. */
export type CreateUserInput = {
  username: Scalars['String'];
  role: Scalars['ID'];
  password: Scalars['String'];
};

/**
 * Crypto information, include driver, module, priority,
 * refcnt, selftest, internal and type.
 */
export type Crypto = ErrDescription & {
  __typename?: 'Crypto';
  driver: Scalars['String'];
  module: Scalars['String'];
  priority: Scalars['String'];
  refCnt: Scalars['String'];
  selfTest: Scalars['String'];
  internal: Scalars['String'];
  type: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Crypto. */
export type CryptoConnection = {
  __typename?: 'CryptoConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Crypto>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Crypto. */
export type CryptoConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** CVE information. */
export type Cve = {
  __typename?: 'CVE';
  name: Scalars['String'];
  cvss: Scalars['Float'];
  cvssRank: CvssRank;
  status: CveStatus;
  poc?: Maybe<Array<Scalars['String']>>;
  patch?: Maybe<Array<Scalars['String']>>;
  exp?: Maybe<Array<Scalars['String']>>;
  description: Scalars['String'];
  cvss3Info?: Maybe<Cvss3Info>;
  cvss2Info?: Maybe<Cvss2Info>;
  file: Array<Scalars['String']>;
};

/** CVESec information. */
export type CveSec = ErrDescription & {
  __typename?: 'CVESec';
  component: Scalars['String'];
  version: Scalars['String'];
  description: Scalars['String'];
  path?: Maybe<Scalars['String']>;
  risk: Array<CvssRankStatistics>;
  cve?: Maybe<Array<Cve>>;
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for iotSec. */
export type CveSecConnection = {
  __typename?: 'CVESecConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<CveSec>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for iotSec. */
export type CveSecConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** CVE status enum. */
export enum CveStatus {
  HighlyRelated = 'HighlyRelated',
  LikelyRelated = 'LikelyRelated',
  Confirmed = 'Confirmed',
  Fixed = 'Fixed',
  None = 'None'
}

/**
 * CVSS2.0 information.
 * Reference https://csrc.nist.gov/schema/nvd/feed/1.1-Beta/cvss-v2.0_beta.json
 * Such as, accessVector:"NETWORK", accessComplexity:"HIGH", authentication:"NONE"
 */
export type Cvss2Info = {
  __typename?: 'Cvss2Info';
  cvss: Scalars['Float'];
  accessVector: Scalars['String'];
  accessComplexity: Scalars['String'];
  authentication: Scalars['String'];
  confidentialityImpact: Scalars['String'];
  integrityImpact: Scalars['String'];
  availabilityImpact: Scalars['String'];
};

/**
 * CVSS3.0 information.
 * Reference https://csrc.nist.gov/schema/nvd/feed/1.1-Beta/cvss-v3.x_beta.json
 * Such as, attackVector:"NETWORK", attackComplexity:"HIGH", privilegesRequired:"NONE"
 */
export type Cvss3Info = {
  __typename?: 'Cvss3Info';
  cvss: Scalars['Float'];
  attackVector: Scalars['String'];
  attackComplexity: Scalars['String'];
  privilegesRequired: Scalars['String'];
  userInteraction: Scalars['String'];
  scope: Scalars['String'];
  confidentialityImpact: Scalars['String'];
  integrityImpact: Scalars['String'];
  availabilityImpact: Scalars['String'];
};

/** Cvss rank. */
export enum CvssRank {
  Critical = 'Critical',
  High = 'High',
  Medium = 'Medium',
  Low = 'Low'
}

/** Cvss rank statistics, include cvssRank and count. */
export type CvssRankStatistics = {
  __typename?: 'CvssRankStatistics';
  risk: CvssRank;
  count: Scalars['Int'];
};

/** Dependence check, if false, feature may be failed. */
export type Dependence = {
  __typename?: 'Dependence';
  /** Report export depends on latex. */
  latex: Scalars['Boolean'];
};

/** The connection type for check rule detail. */
export type DetailConnection = {
  __typename?: 'DetailConnection';
  /** A list of column. */
  column: Array<Column>;
  /** A list of nodes. */
  nodes?: Maybe<Array<Scalars['Map']>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

export type DetectionProgress = {
  __typename?: 'DetectionProgress';
  maxIndex: Scalars['Int'];
  index: Scalars['Int'];
  alert?: Maybe<Scalars['Boolean']>;
  alertMessage?: Maybe<Scalars['String']>;
  autoTaskExeMsg: Scalars['String'];
  autoTaskExeStatus: Scalars['Int'];
};

export type DetectionProgressV2 = {
  __typename?: 'DetectionProgressV2';
  title: Scalars['String'];
  currentIndedx: Scalars['Int'];
  progressPercent: Scalars['Int'];
  isFinished: Scalars['Boolean'];
  stepConfig: Array<Maybe<DetectionStepConfig>>;
};

export type DetectionStepConfig = {
  __typename?: 'DetectionStepConfig';
  title: Scalars['String'];
  description: Scalars['String'];
  alertType: Scalars['Int'];
};

/** Device 设备基本信息 */
export type Device = {
  uuid: Scalars['String'];
  serialNum: Scalars['String'];
  system: Scalars['String'];
  status: Scalars['Int'];
  occupy?: Maybe<Scalars['Int']>;
  hostIp: Scalars['String'];
  clientId: Scalars['String'];
  secretId: Scalars['String'];
  ip: Scalars['String'];
  imei?: Maybe<Scalars['String']>;
  batteryLevel?: Maybe<Scalars['Int']>;
  wifiStatus?: Maybe<Scalars['Int']>;
  manufacturer: Scalars['String'];
  brand: Scalars['String'];
  model: Scalars['String'];
  /** 屏幕尺寸大小 */
  xaxisResolve?: Maybe<Scalars['Int']>;
  yaxisResolve?: Maybe<Scalars['Int']>;
  gpu?: Maybe<Scalars['String']>;
};

export type DeviceRsp = {
  __typename?: 'DeviceRsp';
  deviceId?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
};

/** Device 设备状态更新对象 */
export type DeviceState = {
  id: Scalars['ID'];
  status?: Maybe<Scalars['Int']>;
  occupy?: Maybe<Scalars['Int']>;
  clientId?: Maybe<Scalars['String']>;
};

/** System disk space status */
export type DiskStatus = {
  __typename?: 'DiskStatus';
  totalSpace: Scalars['String'];
  freeSpace: Scalars['String'];
  occupiedSpace: Scalars['String'];
};

/** Input type for edit agent. */
export type EditAgentInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
};

/** Input type for edit analysis. */
export type EditAnalysisInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

/** Input type for edit analysis setting. */
export type EditAnalysisSettingInput = {
  id: Scalars['ID'];
  analyzeTimeout?: Maybe<Scalars['Int']>;
  fileType?: Maybe<Array<AnalyzeFileType>>;
  fileSkiped?: Maybe<Array<Scalars['String']>>;
};

/** Input type for file edit. */
export type EditFileInput = {
  analysisID: Scalars['ID'];
  file?: Maybe<Array<FileInput>>;
};

/** Change password input. */
export type EditPasswordInput = {
  currentPassword: Scalars['String'];
  newPassword: Scalars['String'];
};

/** Input type for edit project. */
export type EditProjectInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  team?: Maybe<Scalars['ID']>;
  /** add new project user */
  dutyUserId?: Maybe<Scalars['ID']>;
  /** add new project status */
  proStatus?: Maybe<Scalars['Int']>;
};

/** Input type for edit team. */
export type EditTeamInput = {
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  timesLimit?: Maybe<Scalars['Int']>;
};

/** Input type for edit token. */
export type EditTokenInput = {
  id: Scalars['ID'];
  description?: Maybe<Scalars['String']>;
};

/** Input type for edit user. */
export type EditUserInput = {
  id: Scalars['ID'];
  username?: Maybe<Scalars['String']>;
  role?: Maybe<Scalars['ID']>;
  password?: Maybe<Scalars['String']>;
};

/** An error description, it is string to string map . */
export type ErrDescription = {
  /** error description. */
  errDescription?: Maybe<Scalars['Map']>;
};

/** Exposed service information. */
export type ExposedService = {
  __typename?: 'ExposedService';
  pid: Scalars['Int'];
  processName: Scalars['String'];
  localAddress: Scalars['String'];
  localPort: Scalars['Int'];
  remoteAddress: Scalars['String'];
  remotePort: Scalars['Int'];
  type: Scalars['String'];
  effectiveUID: Scalars['Int'];
};

/** The connection type for ExposedService. */
export type ExposedServiceConnection = {
  __typename?: 'ExposedServiceConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<ExposedService>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Advanced feature enum */
export enum Feature {
  Collector = 'Collector',
  Plugin = 'Plugin',
  SystemLinux = 'SystemLinux',
  SystemAndroid = 'SystemAndroid',
  SystemOther = 'SystemOther',
  ArtifactApk = 'ArtifactAPK',
  ArtifactRtos = 'ArtifactRTOS',
  ArtifactPackage = 'ArtifactPackage',
  ArtifactDocker = 'ArtifactDocker',
  UploadPackage = 'UploadPackage',
  UploadRtosFirmware = 'UploadRTOSFirmware',
  UploadImage = 'UploadImage',
  UploadCDat = 'UploadCDat',
  UploadApk = 'UploadAPK',
  UploadDockerImage = 'UploadDockerImage',
  Baseline = 'Baseline',
  Custom = 'Custom',
  CveSec = 'CveSec',
  CveKernel = 'CveKernel',
  License = 'License',
  Detail = 'Detail',
  Sensitive = 'Sensitive',
  Risk = 'Risk'
}

/** Config. */
export type FeatureConfig = {
  __typename?: 'FeatureConfig';
  systemLinux: Scalars['Boolean'];
  systemAndroid: Scalars['Boolean'];
  systemOther: Scalars['Boolean'];
  artifactAPK: Scalars['Boolean'];
  artifactRTOS: Scalars['Boolean'];
  artifactPackage: Scalars['Boolean'];
  artifactDocker: Scalars['Boolean'];
  uploadPackage: Scalars['Boolean'];
  uploadRTOSFirmware: Scalars['Boolean'];
  uploadImage: Scalars['Boolean'];
  uploadCDat: Scalars['Boolean'];
  uploadAPK: Scalars['Boolean'];
  uploadDockerImage: Scalars['Boolean'];
  plugin: Scalars['Boolean'];
  collector: Scalars['Boolean'];
  timesLimitEnabled: Scalars['Boolean'];
};

/**
 * File information, include name, owner user, owner group, size, nodes,
 * file type, file permission, aclEnabled, linkCount, date, architecture,
 * file content and file content type.
 * If current is a link file, the field linkFile return the target file absolute path.
 */
export type File = ErrDescription & {
  __typename?: 'File';
  id: Scalars['ID'];
  name: Scalars['String'];
  type: Scalars['String'];
  perm: Scalars['String'];
  ownerUser: Scalars['String'];
  ownerGroup: Scalars['String'];
  size: Scalars['Int'];
  nodes?: Maybe<Array<Scalars['Int']>>;
  aclEnabled: Scalars['String'];
  linkCount: Scalars['Int'];
  linkFile?: Maybe<Scalars['String']>;
  date: Scalars['String'];
  content: Scalars['String'];
  contentType: Scalars['String'];
  virtual: Scalars['Boolean'];
  arch?: Maybe<Scalars['String']>;
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Device. */
export type FileConnection = {
  __typename?: 'FileConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<File>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Device. */
export type FileConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/**
 * Input type for file upload and edit,
 * if upload, file can't be null,
 * if edit, id can't be null.
 */
export type FileInput = {
  id?: Maybe<Scalars['ID']>;
  file?: Maybe<Scalars['Upload']>;
  name?: Maybe<Scalars['String']>;
  type?: Maybe<UploadFileType>;
  analyzeParam?: Maybe<Scalars['Map']>;
};

export type GetCaseAllStepRsp = {
  __typename?: 'GetCaseAllStepRsp';
  stepInfoList?: Maybe<Array<Maybe<StepInfo>>>;
  caseId: Scalars['ID'];
  caseName: Scalars['String'];
  caseStatus: Scalars['Int'];
  currentCaseStepIndex: Scalars['Int'];
  projectStatus: Scalars['Int'];
};

/** Group information, include group id, group name, group password and user list. */
export type Group = ErrDescription & {
  __typename?: 'Group';
  gid: Scalars['Int'];
  groupName: Scalars['String'];
  groupPassword: Scalars['String'];
  userList: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Group. */
export type GroupConnection = {
  __typename?: 'GroupConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Group>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** change project history */
export type History = {
  __typename?: 'History';
  id?: Maybe<Scalars['ID']>;
  /** history change time */
  changeTime?: Maybe<Scalars['String']>;
  /** history change user name */
  changeUser?: Maybe<Scalars['String']>;
  /** history change object , module title */
  changeObject?: Maybe<Scalars['String']>;
  /** history change matter , module message */
  changematter?: Maybe<Scalars['String']>;
};

export type HistoryRep = {
  __typename?: 'HistoryRep';
  count?: Maybe<Scalars['Int']>;
  history?: Maybe<Array<Maybe<History>>>;
};

/** Host information, include address and hostname. */
export type Host = ErrDescription & {
  __typename?: 'Host';
  address: Scalars['String'];
  hostname: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Host. */
export type HostConnection = {
  __typename?: 'HostConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Host>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/**
 * Null means toggle OFF, and not-null values
 * should include a valid ID
 */
export type IdWithToggle = {
  id?: Maybe<Scalars['ID']>;
};

/** Input type for agent init. */
export type InitAgentInput = {
  uuid: Scalars['String'];
  version: Scalars['String'];
};

/**
 * Network interface,
 * include interface name and address.
 */
export type Interface = ErrDescription & {
  __typename?: 'Interface';
  name: Scalars['String'];
  ipv4Address?: Maybe<Array<Scalars['String']>>;
  ipv6Address?: Maybe<Array<Scalars['String']>>;
  phyAddress?: Maybe<Array<Scalars['String']>>;
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Interface. */
export type InterfaceConnection = {
  __typename?: 'InterfaceConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Interface>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/**
 * Interface information in a threat alert chain, include name,
 * ip, port and inode.
 */
export type InterfaceSecurity = {
  __typename?: 'InterfaceSecurity';
  name: Scalars['String'];
  ip: Scalars['String'];
  port: Scalars['Int'];
  inode: Scalars['Int'];
};

/**
 * Kernel information, include name,
 * release, version and cmdline.
 */
export type Kernel = ErrDescription & {
  __typename?: 'Kernel';
  name: Scalars['String'];
  release: Scalars['String'];
  version: Scalars['String'];
  cmdline: Scalars['String'];
  procVersion: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** Language enum. */
export enum Language {
  Zh = 'ZH',
  En = 'EN'
}

export type LawCatalogueBaseDetail = {
  __typename?: 'LawCatalogueBaseDetail';
  lawName?: Maybe<Scalars['String']>;
  lawCatalogueId?: Maybe<Scalars['ID']>;
  dutyLawCatalogueName?: Maybe<Scalars['String']>;
  dutyLawClassify1?: Maybe<Scalars['String']>;
  dutyLawClassify2?: Maybe<Scalars['String']>;
  dutyLawClassify3?: Maybe<Scalars['String']>;
  dutyLawClassify4?: Maybe<Scalars['String']>;
  dutyLawClassify5?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
};

export type LawCatalogueCheckDetailRep = {
  __typename?: 'LawCatalogueCheckDetailRep';
  lawName?: Maybe<Scalars['String']>;
  lawCatalogueId?: Maybe<Scalars['String']>;
  dutyLawCatalogueName: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  dutyLawClassify1?: Maybe<Scalars['String']>;
  dutyLawClassify2?: Maybe<Scalars['String']>;
  dutyLawClassify3?: Maybe<Scalars['String']>;
  dutyLawClassify4?: Maybe<Scalars['String']>;
  dutyLawClassify5?: Maybe<Scalars['String']>;
  checkResultCount: Scalars['Int'];
  checkPassResultCount: Scalars['Int'];
  checkUnPassNumberCount: Scalars['Int'];
  checkUnTestNumberCount: Scalars['Int'];
  checkTestingNumberCount: Scalars['Int'];
  checkIgnoreNumberCount: Scalars['Int'];
  passStatus: Scalars['Int'];
  caseClassifyResultRep?: Maybe<Array<Maybe<CaseClassifyResultRep>>>;
};

export type LawDeatilMd = {
  __typename?: 'LawDeatilMd';
  title: Scalars['String'];
  markDown: Scalars['String'];
};

export type LawInfo = {
  __typename?: 'LawInfo';
  title: Scalars['String'];
  lawId: Scalars['ID'];
  count: Scalars['Int'];
  catalogueList?: Maybe<Array<Maybe<LawCatalogueBaseDetail>>>;
};

/** License audit information. */
export type License = {
  __typename?: 'License';
  component: Scalars['String'];
  description: Scalars['String'];
  license: Array<LicenseDetail>;
  file: Array<Scalars['String']>;
};

/** The connection type for License. */
export type LicenseConnection = {
  __typename?: 'LicenseConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<License>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /**
   * Field list with count used in filter. For example, input ["a","b"],
   * return map{"a":[{"value":"avalue1","count":acount1}],"b":[{"value":"bvalue1","count":bcount1}]}.
   */
  fieldValuesWithCount?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for License. */
export type LicenseConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};


/** The connection type for License. */
export type LicenseConnectionFieldValuesWithCountArgs = {
  fields: Array<Scalars['String']>;
};

/** License detail. */
export type LicenseDetail = {
  __typename?: 'LicenseDetail';
  name: Scalars['String'];
  source: Scalars['String'];
  content: Scalars['String'];
  risk: LicenseRisk;
  required: Array<LicenseTag>;
  forbidden: Array<LicenseTag>;
  permitted: Array<LicenseTag>;
};

/** License risk enum. */
export enum LicenseRisk {
  High = 'High',
  Middle = 'Middle',
  Low = 'Low',
  NotAvailable = 'NotAvailable'
}

/** License risk statistics, include risk and count. */
export type LicenseRiskStatistics = {
  __typename?: 'LicenseRiskStatistics';
  risk: LicenseRisk;
  count: Scalars['Int'];
};

/** License tag information. */
export type LicenseTag = {
  __typename?: 'LicenseTag';
  name: Scalars['String'];
  type: Scalars['String'];
  description: Scalars['String'];
};

/** Using limit */
export type Limit = {
  __typename?: 'Limit';
  /** Total limit, can get for system or one team */
  total: Scalars['Int'];
  /** Limit times have allocated to teams, only get for system */
  allocated?: Maybe<Scalars['Int']>;
  /** Limit times haven't allocated to teams, only get for system */
  unallocated?: Maybe<Scalars['Int']>;
  /** Limit times used, can get for system or one team */
  used: Scalars['Int'];
  /** Limit times available, can get for system or one team */
  available: Scalars['Int'];
};

export type LinuxDeviceConnectInfo = {
  __typename?: 'LinuxDeviceConnectInfo';
  clientId: Scalars['String'];
  connectType: Scalars['String'];
  connectIP: Scalars['String'];
  connectPort: Scalars['Int'];
  connectUser: Scalars['String'];
  connectPassword?: Maybe<Scalars['String']>;
  connectCertificateUrl?: Maybe<Scalars['String']>;
  hasConnectCertificateFile?: Maybe<Scalars['Boolean']>;
  uploadFileServerUrl?: Maybe<Scalars['String']>;
};

/**
 * Log, include log content, log type(all or append)
 * and log level.
 */
export type Log = {
  __typename?: 'Log';
  content: Scalars['String'];
  type: LogType;
  level: LogLevel;
};

/** Input type for login. */
export type LoginByPasswordInput = {
  username: Scalars['String'];
  password: Scalars['String'];
};

/** Response type for login. */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  /** Token for authentication. */
  token: Scalars['String'];
};

/** Log level enum. */
export enum LogLevel {
  Info = 'INFO',
  Debug = 'DEBUG'
}

/** Log type enum. */
export enum LogType {
  All = 'All',
  Append = 'Append'
}

/** Sysauditor management information */
export type Management = {
  __typename?: 'Management';
  /** Server host name */
  hostname: Scalars['String'];
  /**
   * System using times limit.
   * System is unlimited if return null.
   */
  timesLimit?: Maybe<Limit>;
  /** Sysauditor system status */
  systemStatus: SystemStatus;
  /** User information of sysauditor */
  user?: Maybe<UserConnection>;
  /** Team information of sysauditor */
  team?: Maybe<TeamConnection>;
  /** API information of sysauditor */
  api?: Maybe<ApiConnection>;
  /** Project list, such as bmw, audi. */
  project?: Maybe<ProjectConnection>;
  /** Analysis list */
  analysis?: Maybe<AnalysisConnection>;
  /** System license information. */
  license: Array<SystemLicense>;
  /** Earliest log date, if no log exists, return null. */
  earliestLogDate?: Maybe<Scalars['Time']>;
  /** Get log for one date, if no log exists, return null. */
  log?: Maybe<Log>;
  /** Agent list. */
  agent?: Maybe<AgentConnection>;
  /** Task list. */
  task?: Maybe<TaskConnection>;
  /** System setting. */
  systemSetting: SystemSetting;
  /** SAML setting. */
  SAMLSetting: SamlSetting;
};


/** Sysauditor management information */
export type ManagementUserArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Sysauditor management information */
export type ManagementTeamArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};


/** Sysauditor management information */
export type ManagementApiArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** Sysauditor management information */
export type ManagementProjectArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  delete?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Sysauditor management information */
export type ManagementAnalysisArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  projectID?: Maybe<Scalars['ID']>;
  delete?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Sysauditor management information */
export type ManagementLogArgs = {
  date?: Maybe<Scalars['Time']>;
};


/** Sysauditor management information */
export type ManagementAgentArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** Sysauditor management information */
export type ManagementTaskArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};

/** Type for management mutation. */
export type ManagementMutation = {
  __typename?: 'ManagementMutation';
  /** Create a new user. */
  createUser?: Maybe<User>;
  /** Delete an existing user or user list. */
  deleteUser?: Maybe<Array<Maybe<User>>>;
  /** Edit an existing user. */
  editUser?: Maybe<User>;
  /** Create a new team. */
  createTeam?: Maybe<Team>;
  /** Delete an existing team or team list. */
  deleteTeam?: Maybe<Array<Maybe<Team>>>;
  /** Edit an existing team. */
  editTeam?: Maybe<Team>;
  /** Enable or disable an api. */
  operateAPI?: Maybe<Api>;
  /** Permanently delete a project or project list */
  permanentlyDeleteProject?: Maybe<Array<Maybe<Project>>>;
  /** Permanently delete a analysis or analysis list */
  permanentlyDeleteAnalysis?: Maybe<Array<Maybe<Analysis>>>;
  /** Restore a soft deleted project. */
  restoreProject?: Maybe<Project>;
  /** Restore a soft deleted analysis. */
  restoreAnalysis?: Maybe<Analysis>;
  /** Set log level(info or debug). */
  setLogLevel: Scalars['Boolean'];
  /** Create a new agent. */
  createAgent?: Maybe<Agent>;
  /** Delete an existing agent or agent list. */
  deleteAgent?: Maybe<Array<Maybe<Agent>>>;
  /** Edit an existing agent. */
  editAgent?: Maybe<Agent>;
  /** Edit setting */
  settingMutation: SettingMutation;
  /** Update system license */
  updateLicense: Scalars['Boolean'];
};


/** Type for management mutation. */
export type ManagementMutationCreateUserArgs = {
  input: CreateUserInput;
};


/** Type for management mutation. */
export type ManagementMutationDeleteUserArgs = {
  input: Array<Scalars['ID']>;
};


/** Type for management mutation. */
export type ManagementMutationEditUserArgs = {
  input: EditUserInput;
};


/** Type for management mutation. */
export type ManagementMutationCreateTeamArgs = {
  input: CreateTeamInput;
};


/** Type for management mutation. */
export type ManagementMutationDeleteTeamArgs = {
  input: Array<Scalars['ID']>;
};


/** Type for management mutation. */
export type ManagementMutationEditTeamArgs = {
  input: EditTeamInput;
};


/** Type for management mutation. */
export type ManagementMutationOperateApiArgs = {
  input: OperateApiInput;
};


/** Type for management mutation. */
export type ManagementMutationPermanentlyDeleteProjectArgs = {
  input: Array<Scalars['ID']>;
};


/** Type for management mutation. */
export type ManagementMutationPermanentlyDeleteAnalysisArgs = {
  input: Array<Scalars['ID']>;
};


/** Type for management mutation. */
export type ManagementMutationRestoreProjectArgs = {
  input: RestoreInput;
};


/** Type for management mutation. */
export type ManagementMutationRestoreAnalysisArgs = {
  input: RestoreInput;
};


/** Type for management mutation. */
export type ManagementMutationSetLogLevelArgs = {
  input: LogLevel;
};


/** Type for management mutation. */
export type ManagementMutationCreateAgentArgs = {
  input: CreateAgentInput;
};


/** Type for management mutation. */
export type ManagementMutationDeleteAgentArgs = {
  input: Array<Scalars['ID']>;
};


/** Type for management mutation. */
export type ManagementMutationEditAgentArgs = {
  input: EditAgentInput;
};


/** Type for management mutation. */
export type ManagementMutationUpdateLicenseArgs = {
  input?: Maybe<UpdateLicenseInput>;
};


/** module  statistics */
export type ModuleInfoStatis = {
  __typename?: 'ModuleInfoStatis';
  modelName?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Login by username and password. */
  loginByPassword?: Maybe<LoginPayload>;
  /** Logout. */
  logout: Scalars['Boolean'];
  /** Change password for current user. */
  editPassword?: Maybe<User>;
  /** Management mutation, include item create, delete, edit and so on. */
  management: ManagementMutation;
  /** Team mutation. */
  team: TeamMutation;
  /** Project mutation in one team. */
  teamProject: TeamProjectMutation;
  /** Token mutation. */
  token: TokenMutation;
  /** Agent mutation. */
  agent: AgentMutation;
  /** 开始检测 */
  startProjectDetection?: Maybe<Project>;
  /** rule check 's case result */
  updateCaseResult: Scalars['Boolean'];
  /** rule check 's reset project tool result */
  resetToolResult: Scalars['Boolean'];
  /**
   * 检查型判断
   * 完成型判断
   * 用于提交点击了是否，完成未完成的结果，暂时存储下结果
   */
  submitResult: ActionPushResult;
  /** 打开资料 */
  openInformation: ActionPushResult;
  /** 获取app列表 */
  getAppPackageList: ActionPushResult;
  /** 查看报告，与上一个接口一样，暂未确定具体参数 */
  openReport: ActionPushResult;
  /** 截图上传，先截图，在上传 */
  screenAndUpload: ActionPushResult;
  /** 保存并执行脚本 */
  saveAndExcuseScript: ActionPushResult;
  /** 打开工具 */
  openTool: ActionPushResult;
  /** 重置检测 */
  resetStepCheckedResult: StepInfo;
  /** 下一步提交结果 */
  nextStepSubmitResult: StepInfo;
  /** 上传资料，返回文件uri */
  fileUpload: ActionPushResult;
  /** 重置项目 */
  resetProject?: Maybe<Project>;
  /** 结束项目 */
  stopProject?: Maybe<Project>;
  /** 用例：重置检测1，通过2，不通过3，忽略4 */
  changeCaseStatus: Scalars['Boolean'];
  /** 车型信息创建 */
  createNewCarIInfo: CarInfo;
  /** 一键收集车型信息 */
  collectorCarInfo: CarInfo;
  /** 删除车型信息 */
  delCarInfo: CarInfo;
  /** 编辑车型信息 */
  editCarInfo: CarInfo;
  /** 自动apkpecker提交结果 */
  submitSelectorList?: Maybe<Scalars['Boolean']>;
  /** 自动apkpecker提交结果 */
  submitSelectorListV2?: Maybe<Scalars['Boolean']>;
  /** 创建用例 */
  createUserCustomCase?: Maybe<CaseCustomItem>;
  /** 编辑用例 */
  editUserCustomCase?: Maybe<CaseCustomItem>;
  /** 创建用例集 */
  createUserCustomCaseSuite?: Maybe<SuiteCustomItem>;
  /** 删除用例集 */
  deleteUserCustomCaseSuite?: Maybe<SuiteCustomItem>;
  /** 删除用例集 */
  deleteUserCustomCase?: Maybe<CaseCustomItem>;
  /** 创建用例， 新需求不带suiteid */
  createUserCustomCaseItem?: Maybe<CaseCustomItem>;
  /** 用例集添加用例。 */
  addUserCustomCaseIntoSuite?: Maybe<Scalars['Boolean']>;
  /** 创建车型 */
  createCarModelInfo?: Maybe<Scalars['Boolean']>;
  /** 编辑车型 */
  editCarModelInfo?: Maybe<Scalars['Boolean']>;
  /** 编辑用例集 */
  editUserCustomCaseIntoSuite?: Maybe<Scalars['Boolean']>;
  /** client车机切换弹窗 */
  submitClientDeviceChange?: Maybe<Scalars['Boolean']>;
  /** 下一步提交结果 v2 202203新版需求变更 */
  nextStepSubmitResultV2: StepInfo;
  /** 删除步骤上传资料 202203新版需求变更 */
  deleteStepUploadData: Scalars['Boolean'];
  /** 截图操作 */
  screenshot: UploadData;
  /** 变更用例处理人 */
  changeCaseHandler: Scalars['Boolean'];
  /** 新版 保存步骤结果 */
  saveStepInfo: Scalars['Boolean'];
  /** 新版 保存步骤弹窗信息 */
  saveStepDialogInfo: Scalars['Boolean'];
  /** 新版 执行脚本 */
  scriptExe: Scalars['Boolean'];
};


export type MutationLoginByPasswordArgs = {
  input: LoginByPasswordInput;
};


export type MutationEditPasswordArgs = {
  input: EditPasswordInput;
};


export type MutationTeamArgs = {
  id: Scalars['ID'];
};


export type MutationTeamProjectArgs = {
  id: Scalars['ID'];
};


export type MutationStartProjectDetectionArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationUpdateCaseResultArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  result: Scalars['Int'];
  projectId: Scalars['ID'];
};


export type MutationResetToolResultArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  toolID?: Maybe<Scalars['ID']>;
  caseIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};


export type MutationSubmitResultArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
  actionName: Scalars['String'];
  value?: Maybe<Scalars['String']>;
};


export type MutationOpenInformationArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationGetAppPackageListArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationOpenReportArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationScreenAndUploadArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationSaveAndExcuseScriptArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
  script: Scalars['String'];
};


export type MutationOpenToolArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
  toolId: Scalars['String'];
};


export type MutationResetStepCheckedResultArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationNextStepSubmitResultArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
  result?: Maybe<Scalars['String']>;
};


export type MutationFileUploadArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  caseStepId: Scalars['ID'];
  file?: Maybe<Scalars['Upload']>;
};


export type MutationResetProjectArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationStopProjectArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationChangeCaseStatusArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  cmd: Scalars['Int'];
};


export type MutationCreateNewCarIInfoArgs = {
  teamId: Scalars['ID'];
  modelName: Scalars['String'];
  description?: Maybe<Scalars['String']>;
};


export type MutationCollectorCarInfoArgs = {
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  connectionCmd?: Maybe<Scalars['String']>;
};


export type MutationDelCarInfoArgs = {
  teamId: Scalars['ID'];
  id: Scalars['ID'];
};


export type MutationEditCarInfoArgs = {
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  modelName?: Maybe<Scalars['String']>;
  collectorResultUrl?: Maybe<Scalars['String']>;
};


export type MutationSubmitSelectorListArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  result?: Maybe<Array<Maybe<Scalars['String']>>>;
};


export type MutationSubmitSelectorListV2Args = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  result?: Maybe<Array<Maybe<Scalars['String']>>>;
  isJumpStep: Scalars['Boolean'];
};


export type MutationCreateUserCustomCaseArgs = {
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
  name: Scalars['String'];
  descriptionInfo?: Maybe<Scalars['String']>;
  caseType?: Maybe<Scalars['Int']>;
  scriptUrl?: Maybe<Scalars['String']>;
};


export type MutationEditUserCustomCaseArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  name: Scalars['String'];
  stepName: Scalars['String'];
  caseDesc?: Maybe<Scalars['String']>;
  remediation?: Maybe<Scalars['String']>;
  descriptionInfo?: Maybe<Scalars['String']>;
  caseType?: Maybe<Scalars['Int']>;
  scriptUrl?: Maybe<Scalars['String']>;
  bindId?: Maybe<Scalars['Int']>;
  classifyId?: Maybe<Scalars['Int']>;
  operatingSystemId: Scalars['Int'];
  riskLevelId: Scalars['Int'];
  testMethod: Scalars['Int'];
};


export type MutationCreateUserCustomCaseSuiteArgs = {
  teamId: Scalars['ID'];
  name: Scalars['String'];
  suiteType: Scalars['Int'];
};


export type MutationDeleteUserCustomCaseSuiteArgs = {
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
};


export type MutationDeleteUserCustomCaseArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
};


export type MutationCreateUserCustomCaseItemArgs = {
  teamId: Scalars['ID'];
  name: Scalars['String'];
  stepName: Scalars['String'];
  caseDesc?: Maybe<Scalars['String']>;
  remediation?: Maybe<Scalars['String']>;
  descriptionInfo?: Maybe<Scalars['String']>;
  caseType?: Maybe<Scalars['Int']>;
  scriptUrl?: Maybe<Scalars['String']>;
  bindId?: Maybe<Scalars['Int']>;
  classifyId?: Maybe<Scalars['Int']>;
  operatingSystemId: Scalars['Int'];
  riskLevelId: Scalars['Int'];
  testMethod: Scalars['Int'];
};


export type MutationAddUserCustomCaseIntoSuiteArgs = {
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
  caseIds?: Maybe<Array<Maybe<Scalars['ID']>>>;
};


export type MutationCreateCarModelInfoArgs = {
  teamId: Scalars['ID'];
  carName?: Maybe<Scalars['String']>;
  componentList?: Maybe<Array<Maybe<CarInfoItemCreate>>>;
};


export type MutationEditCarModelInfoArgs = {
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  carName?: Maybe<Scalars['String']>;
  componentList?: Maybe<Array<Maybe<CarInfoItemCreate>>>;
};


export type MutationEditUserCustomCaseIntoSuiteArgs = {
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  suiteName?: Maybe<Scalars['String']>;
};


export type MutationSubmitClientDeviceChangeArgs = {
  teamId: Scalars['ID'];
  uuid: Scalars['String'];
  result: Scalars['Boolean'];
};


export type MutationNextStepSubmitResultV2Args = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
  result?: Maybe<Scalars['String']>;
};


export type MutationDeleteStepUploadDataArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
  uuid: Scalars['String'];
};


export type MutationScreenshotArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type MutationChangeCaseHandlerArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  userId: Scalars['ID'];
};


export type MutationSaveStepInfoArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
  buttonName: Scalars['String'];
  buttonType: Scalars['String'];
  stepType: Scalars['String'];
  remark?: Maybe<Scalars['String']>;
  result?: Maybe<Scalars['String']>;
};


export type MutationSaveStepDialogInfoArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
  buttonName: Scalars['String'];
  buttonType: Scalars['String'];
  cancel: Scalars['Boolean'];
};


export type MutationScriptExeArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
  appList?: Maybe<Array<Maybe<AppInfo>>>;
  argParams?: Maybe<Scalars['Map']>;
};

/** my items count */
export type MyItemsCount = {
  __typename?: 'MyItemsCount';
  caseCount: Scalars['Int'];
  projectCount: Scalars['Int'];
  toolCount: Scalars['Int'];
};

/** workbench 's my items */
export type MyItemsInterfaceRsp = {
  __typename?: 'MyItemsInterfaceRsp';
  /** team id */
  teamId: Scalars['Int'];
  /** my case info list */
  getCaseListByUserId?: Maybe<Array<Maybe<CaseItemRsp>>>;
  /** my project info list */
  getProjectListByUserId?: Maybe<Array<Maybe<ProjectInfo>>>;
  /** my tool info list */
  getToolListByUserId?: Maybe<Array<Maybe<ToolItemRsp>>>;
  /** case/project/tool count */
  count?: Maybe<MyItemsCount>;
};


/** workbench 's my items */
export type MyItemsInterfaceRspGetCaseListByUserIdArgs = {
  search?: Maybe<SearchPrecise>;
};


/** workbench 's my items */
export type MyItemsInterfaceRspGetProjectListByUserIdArgs = {
  search?: Maybe<SearchPrecise>;
};


/** workbench 's my items */
export type MyItemsInterfaceRspGetToolListByUserIdArgs = {
  search?: Maybe<SearchPrecise>;
};

export type MyProjectStatistics = {
  __typename?: 'MyProjectStatistics';
  projectNumber: Scalars['Int'];
  projectCheckingNumber: Scalars['Int'];
  projectPassNumber: Scalars['Int'];
  projectUnPassNumber: Scalars['Int'];
  passingRateChecking: Scalars['Float'];
  passingRatePass: Scalars['Float'];
  passingRateUnPass: Scalars['Float'];
};

/** my project statistics info */
export type MyProjectStatisticsRsp = {
  __typename?: 'MyProjectStatisticsRsp';
  projectNumber?: Maybe<Scalars['Int']>;
  checkingNumber?: Maybe<Scalars['Int']>;
  passNumber?: Maybe<Scalars['Int']>;
  unPassNumber?: Maybe<Scalars['Int']>;
  passingRate?: Maybe<Scalars['Int']>;
};

/** Network information. */
export type Network = {
  __typename?: 'Network';
  /** Network interface list. */
  interface?: Maybe<InterfaceConnection>;
  /** Network routing list. */
  routing?: Maybe<RoutingConnection>;
  /** Unix socket list. */
  unixSocket?: Maybe<UnixSocketConnection>;
  /** Socket list which listening in 0.0.0.0. */
  listeningSocket?: Maybe<SocketConnection>;
  /** Socket list which connecting others. */
  connectingSocket?: Maybe<SocketConnection>;
};


/** Network information. */
export type NetworkInterfaceArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};


/** Network information. */
export type NetworkRoutingArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Network information. */
export type NetworkUnixSocketArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};


/** Network information. */
export type NetworkListeningSocketArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Network information. */
export type NetworkConnectingSocketArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
};

/** Input type for new porject */
export type NewProjectInput = {
  /** selected law id */
  lawId: Scalars['ID'];
  /** selected moduel id */
  moduelId: Scalars['ID'];
  /** selected car model id */
  carModelId: Scalars['ID'];
  /** project version ,not null */
  version: Scalars['String'];
  /** principal user id */
  principalUserId: Scalars['ID'];
};

/** car or module or user or law model attribute */
export type NewTaskAttributeRsp = {
  __typename?: 'NewTaskAttributeRsp';
  id?: Maybe<Scalars['ID']>;
  /** car or module or user or law info attribute name */
  name?: Maybe<Scalars['String']>;
};

/** An object with an ID. */
export type Node = {
  /** ID of the object. */
  id: Scalars['ID'];
};

/** Offset input type for Connection. */
export type OffsetConnectionInput = {
  /** Returns list after the offset. */
  offset: Scalars['Int'];
  /** Number limit of the return list. */
  limit: Scalars['Int'];
};

export type OnlineUsbDevice = {
  __typename?: 'OnlineUsbDevice';
  uuid: Scalars['String'];
  serialNum: Scalars['String'];
  clientId: Scalars['String'];
  dType: Scalars['String'];
  usbName: Scalars['String'];
  usbAlertMessage: Scalars['String'];
};

/** Input type for operate API. */
export type OperateApiInput = {
  id: Scalars['ID'];
  /** "Enable" or "Disable" */
  operation: Scalars['Boolean'];
};

/** Order method enum. */
export enum Order {
  Asc = 'ASC',
  Desc = 'DESC'
}

/** Order input, include order field and order method */
export type OrderByInput = {
  field: Scalars['String'];
  order: Order;
};

/** Overview for all teams. */
export type Overview = {
  __typename?: 'Overview';
  /** All project status statistics. */
  status: Array<CommonStatusStatistics>;
  /** All project risk statistics, include baseline, cve and license. */
  risk: AllRiskStatistics;
  /**
   * Team statistics, include team name and some statistics,
   * such as team project statistics, team risk statistics.
   * Results order by project count desc.
   */
  team?: Maybe<Array<TeamStatistics>>;
  /** Recent 10 project event. */
  recentEvent?: Maybe<Array<Project>>;
};


/** Overview for all teams. */
export type OverviewTeamArgs = {
  offset?: Maybe<OffsetConnectionInput>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
};

/** Pick user type. */
export type PickUser = {
  __typename?: 'PickUser';
  id: Scalars['ID'];
  username: Scalars['String'];
};

/** The connection type for PickUser. */
export type PickUserConnection = {
  __typename?: 'PickUserConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<PickUser>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Data position */
export type Position = {
  __typename?: 'Position';
  /** Data url, for example "network/listeningSocket" */
  url: Scalars['String'];
  /** Data offset, it is item offset but not page offset */
  offset: Scalars['Int'];
};

/** Postgres session status */
export type PostgresStatus = {
  __typename?: 'PostgresStatus';
  totalSessionCount: Scalars['Int'];
  activeSessionCount: Scalars['Int'];
  idleSessionCount: Scalars['Int'];
};

/** The process type. */
export type Process = ErrDescription & {
  __typename?: 'Process';
  id: Scalars['ID'];
  /** Process name. */
  name: Scalars['String'];
  /** Pid. */
  pid: Scalars['Int'];
  /** Uid string contains a series of uids. */
  uid: Scalars['String'];
  /** Gid string contains a series of gids. */
  gid: Scalars['String'];
  /** Cmd operate. */
  cmd: Array<Scalars['String']>;
  /** Cmd work dir. */
  cwd: Scalars['String'];
  /** Memory mapping. */
  memmap: Array<Scalars['String']>;
  /** Login user id. */
  loginUID: Scalars['String'];
  /** Process status. */
  status: ProcessStatus;
  /** Root dir. */
  rootDir: Scalars['String'];
  /** File handles. */
  fileHandles?: Maybe<Array<Scalars['String']>>;
  /** Process environment. */
  environment?: Maybe<Array<Scalars['String']>>;
  /** Inode list. */
  inodes?: Maybe<Array<Scalars['String']>>;
  /** Sharelibs belong to current process. */
  sharelibs?: Maybe<Array<Sharelib>>;
  /** Associated apk. */
  apk?: Maybe<Scalars['String']>;
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Process. */
export type ProcessConnection = {
  __typename?: 'ProcessConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Process>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Process status, include status name, seccomp and ppid. */
export type ProcessStatus = {
  __typename?: 'ProcessStatus';
  name: Scalars['String'];
  seccomp: Scalars['String'];
  ppid: Scalars['Int'];
};

/** Process risk. */
export type ProcRisk = {
  __typename?: 'ProcRisk';
  /** Process security list. */
  procSec?: Maybe<ProcSecConnection>;
  /** Exposed service list. */
  exposedService?: Maybe<ExposedServiceConnection>;
};


/** Process risk. */
export type ProcRiskProcSecArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Process risk. */
export type ProcRiskExposedServiceArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};

/** Process risk enum. */
export enum ProcRiskLevel {
  High = 'High',
  Medium = 'Medium',
  Low = 'Low',
  Pass = 'Pass'
}

/** Process security information. */
export type ProcSec = {
  __typename?: 'ProcSec';
  pid: Scalars['Int'];
  processName: Scalars['String'];
  cmd: Array<Scalars['String']>;
  root: Scalars['String'];
  checkSec: Scalars['String'];
  cveSec: Scalars['Int'];
  effectiveUID: Scalars['Int'];
  risk: ProcRiskLevel;
};

/** The connection type for ProcSec. */
export type ProcSecConnection = {
  __typename?: 'ProcSecConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<ProcSec>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for ProcSec. */
export type ProcSecConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** Process security information in a threat alert chain. */
export type ProcSecurity = {
  __typename?: 'ProcSecurity';
  /** Process name */
  name: Scalars['String'];
  /** PID */
  pid: Scalars['Int'];
  /**
   * Attack vector description, can be "Exported Service" or "Partial Exported Service"
   * or "Internal Service".
   */
  attackVector: Scalars['String'];
  /**
   * Security shows how the process is secured.
   * Possible values are "CVE counts", "canary nx pie fortified relro" and "stripped".
   */
  security?: Maybe<Array<Scalars['String']>>;
  /**
   * Importance description, can be "Run in root" or "Partial in root"
   * or "Run in non-root".
   */
  importance: Scalars['String'];
  /**
   * Current process how connecting to next process or kernel,
   * if kernel is null, this item is null for the end process.
   */
  connectRelation?: Maybe<ConnectRelation>;
  /** Score evaluate vulnerability of current process. */
  score: Scalars['Float'];
  /** Get current process position in detail report. */
  detailPosition?: Maybe<Position>;
  /** Get current process position in baseline check report. */
  baselinePosition?: Maybe<Position>;
};

/** The system project. */
export type Project = Node & {
  __typename?: 'Project';
  id: Scalars['ID'];
  /** Null means not delete, else return delete time */
  deleteTime?: Maybe<Scalars['Time']>;
  /** Project name, such as bmw, audi. */
  name: Scalars['String'];
  /**
   * Team which current project belongs to,
   * team will be null if project is deleted.
   */
  team?: Maybe<Team>;
  /** Risk statistics, include baseline, cve and license. */
  risk: AllRiskStatistics;
  /** Project status. */
  status: CommonStatus;
  /** Analysis status statistics. */
  analysisStatus: Array<AnalysisStatusStatistics>;
  /** Brief description of current project. */
  description: Scalars['String'];
  /** Analysis list */
  analysis?: Maybe<AnalysisConnection>;
  /** Search analysis by analysis name. */
  analysisByName?: Maybe<Analysis>;
  /** Analyze time */
  time: Scalars['Time'];
  /** case count */
  caseResultCount?: Maybe<ProjectCaseResultCount>;
  /** case count ignore */
  caseResultIgnoreCount?: Maybe<ProjectCaseResultIgnoreCount>;
};


/** The system project. */
export type ProjectAnalysisArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
  recentDays?: Maybe<Scalars['Int']>;
};


/** The system project. */
export type ProjectAnalysisByNameArgs = {
  name: Scalars['String'];
};

/**
 * 本项目涉及xx条自动化测试用例、yy条半自动化测试用例、zz条手工测试用例。
 * 创建项目返回的用例数量
 */
export type ProjectCaseResultCount = {
  __typename?: 'ProjectCaseResultCount';
  autoCaseCount: Scalars['Int'];
  semiAutomaticCaseCount: Scalars['Int'];
  manualCaseCount: Scalars['Int'];
};

/** 本项目忽略了多少字段 */
export type ProjectCaseResultIgnoreCount = {
  __typename?: 'ProjectCaseResultIgnoreCount';
  ignoreCaseCount: Scalars['Int'];
  stepWords: Array<Maybe<Scalars['String']>>;
};

export type ProjectClientDeviceList = {
  __typename?: 'ProjectClientDeviceList';
  deviceId: Scalars['String'];
  deviceName: Scalars['String'];
  isUsable: Scalars['Boolean'];
};

export type ProjectClientList = {
  __typename?: 'ProjectClientList';
  clientId: Scalars['String'];
  clientName: Scalars['String'];
  clientChild: Array<Maybe<ProjectClientDeviceList>>;
};

/** The connection type for Project. */
export type ProjectConnection = {
  __typename?: 'ProjectConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Project>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Project. */
export type ProjectConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** project details */
export type ProjectDetailsRsp = {
  __typename?: 'ProjectDetailsRsp';
  teamId: Scalars['Int'];
  projectId: Scalars['Int'];
  /** project result info */
  projectResult?: Maybe<ProjectInfo>;
  /** tools item list */
  toolResult?: Maybe<Array<Maybe<ToolItemRsp>>>;
};

/** rule check recent statistics */
export type ProjectInfo = {
  __typename?: 'ProjectInfo';
  id: Scalars['ID'];
  name: Scalars['String'];
  submitTime: Scalars['String'];
  /** create user name */
  dutyUser: Scalars['String'];
  dutyUserId?: Maybe<Scalars['ID']>;
  taskStatus: Scalars['Int'];
  /** law standard message */
  lawStandard: Scalars['String'];
  carModel: Scalars['String'];
  module: Scalars['String'];
  version: Scalars['String'];
  caseNumber: Scalars['Int'];
  autoSetpMaxIndex?: Maybe<Scalars['Int']>;
  messages?: Maybe<Array<Maybe<Scalars['String']>>>;
  testObject?: Maybe<ProjectTestObjectInfo>;
  testDeviceId?: Maybe<Scalars['String']>;
  testResult?: Maybe<ProjectTestResultRsp>;
  caseResultAlertNumber?: Maybe<ProjectCaseResultCount>;
};

export type ProjectInfoRsp = {
  __typename?: 'ProjectInfoRsp';
  count?: Maybe<Scalars['Int']>;
  projectInfo?: Maybe<Array<Maybe<ProjectInfo>>>;
};

/** Input type for project list */
export type ProjectListInput = {
  /** team id */
  teamId: Scalars['ID'];
  /** search word , if empty response all data */
  search?: Maybe<Scalars['String']>;
  offset?: Maybe<OffsetConnectionInput>;
};

export type ProjectSelectorList = {
  __typename?: 'ProjectSelectorList';
  testObject: Array<Maybe<ProjectTestObjectList>>;
  clientAndroid: Array<Maybe<ProjectClientList>>;
  clientLinux: Array<Maybe<ProjectClientList>>;
  uploadFileUrl: Scalars['String'];
};

export type ProjectTask = {
  __typename?: 'ProjectTask';
  taskId: Scalars['String'];
  timeoutSecond?: Maybe<Scalars['Int']>;
  taskStatus?: Maybe<Scalars['Int']>;
  configJson?: Maybe<Scalars['String']>;
  clientExeProgress?: Maybe<Scalars['Int']>;
  userSelected?: Maybe<Scalars['Int']>;
  isUserCustomCaseProject?: Maybe<Scalars['Int']>;
};

export type ProjectTaskItemList = {
  __typename?: 'ProjectTaskItemList';
  carModelList?: Maybe<Array<Maybe<NewTaskAttributeRsp>>>;
  principalList?: Maybe<Array<Maybe<NewTaskAttributeRsp>>>;
  lawList?: Maybe<Array<Maybe<NewTaskAttributeRsp>>>;
  modelList?: Maybe<Array<Maybe<NewTaskAttributeRsp>>>;
};

export type ProjectTestObjectInfo = {
  __typename?: 'ProjectTestObjectInfo';
  autoPartsName?: Maybe<Scalars['String']>;
  systemName?: Maybe<Scalars['String']>;
  systemType?: Maybe<Scalars['String']>;
  systemVersion?: Maybe<Scalars['String']>;
};

export type ProjectTestObjectList = {
  __typename?: 'ProjectTestObjectList';
  autoPartsId: Scalars['Int'];
  autoPartsName: Scalars['String'];
  systemChild: Array<Maybe<ProjectTestObjectSystemList>>;
};

export type ProjectTestObjectSystemList = {
  __typename?: 'ProjectTestObjectSystemList';
  systemId: Scalars['Int'];
  systemName: Scalars['String'];
  systemType: Scalars['String'];
  systemVersion?: Maybe<Scalars['String']>;
};

/** project 's test result info */
export type ProjectTestResultRsp = {
  __typename?: 'ProjectTestResultRsp';
  /** pass case number */
  passNumber?: Maybe<Scalars['Int']>;
  /** unpass case number */
  unPassNumber?: Maybe<Scalars['Int']>;
  /** un test case number */
  unTestNumber?: Maybe<Scalars['Int']>;
  /** ignore case number */
  ignoreNumber?: Maybe<Scalars['Int']>;
  /** testint case number */
  testingNumber?: Maybe<Scalars['Int']>;
  /** project all case number */
  caseNumber?: Maybe<Scalars['Int']>;
  /** passRate */
  passRate?: Maybe<Scalars['Float']>;
};

export type Query = {
  __typename?: 'Query';
  /** Config. */
  feature: FeatureConfig;
  /** Report config feature */
  reportFeature: ReportFeatureConfig;
  /** Dependence check. */
  dependence: Dependence;
  /** Useless now, can return hello world. */
  info?: Maybe<Scalars['String']>;
  /** Current login user. */
  viewer?: Maybe<User>;
  /** Overview for all teams. */
  overview: Overview;
  /** Team list. */
  team?: Maybe<TeamConnection>;
  /** Search team by team name. */
  teamByName?: Maybe<Team>;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Sysauditor management. */
  management: Management;
  /** User role. */
  userRole?: Maybe<Array<Role>>;
  /** Team role. */
  teamRole?: Maybe<Array<Role>>;
  /** Pick user list, used to add user into team. */
  pickUser?: Maybe<PickUserConnection>;
  /** Token for download, it will expire in short time. */
  downloadToken: Scalars['String'];
  /** Expired license information, it will return value when current license has expired. */
  expiredLicense?: Maybe<SystemLicense>;
  /** token list for current user. */
  token?: Maybe<TokenConnection>;
  /** Fetch one task for agent. */
  fetchTask?: Maybe<AnalyzeTask>;
  /** workbench 's system message of my project */
  sysMessage?: Maybe<Array<SysMessageRsp>>;
  /** workbench 's my items */
  myItems?: Maybe<MyItemsInterfaceRsp>;
  /** rule check 's team overview */
  teamOverview?: Maybe<TeamOverviewRsp>;
  /** rule check 's recent statistics */
  recentStatistics?: Maybe<Array<Maybe<RecentStatisticsRsp>>>;
  /** rule check 's  in tool case result list（删除 暂留） */
  caseOfToolResult: CaseOfToolResultRsp;
  /** rule check 's case result list. 用例维度列表 */
  caseResultList?: Maybe<CaseResultListRsp>;
  /** rule check 's new task item item ids */
  projectTaskItemList?: Maybe<ProjectTaskItemList>;
  /** workbench 's my project statistics */
  myProjectStatistics?: Maybe<Array<Maybe<MyProjectStatisticsRsp>>>;
  /** rule check 's recent statistics , ProjectInfoRsp use myself */
  projectList?: Maybe<ProjectInfoRsp>;
  /** rule check 's project details */
  projectDetails?: Maybe<ProjectDetailsRsp>;
  /** rule check 's change project history list */
  changeProjectHistory?: Maybe<HistoryRep>;
  /** rule check 's case result detail */
  caseResultDetail?: Maybe<CaseDetailRsp>;
  /** 合规维度数据统计（合规概览） */
  complianceResult?: Maybe<CatalogueTestResultRsp>;
  /** rule check 's law cata */
  lawCatalogueCheckDetail: Array<Maybe<LawCatalogueCheckDetailRep>>;
  /** rule check 's law cata */
  lawCatalogueDetail: Array<Maybe<LawCatalogueCheckDetailRep>>;
  projectHeartBeat: ProjectTask;
  projectTaskStatusUpdate: ProjectInfo;
  projectEventHeartBeat: ActionEvent;
  projectEventResultUpdate: ActionEvent;
  /** 在线设备状态更新（包括上下线状态和是否空闲状态） */
  updateDeviceState?: Maybe<DeviceRsp>;
  /** 注册设备 */
  registerDevice?: Maybe<DeviceRsp>;
  /** 注册client */
  registerClient?: Maybe<DeviceRsp>;
  /** client心跳：0不在线1在线 */
  sendHeartbeat?: Maybe<DeviceRsp>;
  /** 获取模块化用例步骤详情 */
  getCaseStepDetail: StepBaseV2;
  /** 获得所有模块化步骤支持列表 */
  getCaseAllStep?: Maybe<GetCaseAllStepRsp>;
  /** 获取法条详情 */
  getCatalogueDetail?: Maybe<Array<Maybe<LawCatalogueBaseDetail>>>;
  /** 临时更改接口 */
  updateSysMessage: Scalars['Boolean'];
  /** 心跳拉取步骤的结果，异步请求的问题 */
  getStepResult?: Maybe<StepResult>;
  /** 检测进度 */
  getProjectAutoTaskProgress?: Maybe<DetectionProgress>;
  /** 检测进度第二版本 */
  getProjectAutoTaskProgressV2?: Maybe<DetectionProgressV2>;
  checkSelectDeviceOnlineHeartBeat?: Maybe<ClientDeviceOnline>;
  /** rule check 's change case history list */
  changeCaseHistory?: Maybe<HistoryRep>;
  /** 法规集 */
  getLawList?: Maybe<Array<Maybe<LawInfo>>>;
  /** 车新信息列表 */
  carInfoList: CarInfoRep;
  /** 法规详情 */
  lawDetail?: Maybe<LawDeatilMd>;
  /** 自动apkpecker获取弹窗内容 */
  getApkSelectorList?: Maybe<Array<Maybe<ApkSelectorInfo>>>;
  /** 查询用例集列表，包含原来的 */
  getUserCustomCaseSuiteList?: Maybe<SuiteCustomItemRep>;
  /** 更具用例id查询用例列表 */
  getUserCustomCaseListBySuiteId?: Maybe<CaseCustomItemRep>;
  /** 获得用例集的类型。 */
  getUserCustomSuiteType?: Maybe<Array<Maybe<StaticItem>>>;
  /** 查看报告步骤 查看报告 */
  reportViewAction?: Maybe<ReportViewActionRsp>;
  /** 查询所有用例 */
  getAllCaseList?: Maybe<CaseCustomItemRep>;
  /** 查询用例的分类和领域 */
  getCaseStaticCheckedItems?: Maybe<CaseCheckedItem>;
  /** 查询车型列表， */
  getCarInfoList?: Maybe<CarModelListRsp>;
  /** 查询车型列表， */
  getCarInfoListSelector?: Maybe<Array<Maybe<CarInfoItemSelector>>>;
  /** 查询部件列表 */
  getCarStaticComponent?: Maybe<Array<Maybe<StaticItem>>>;
  /** 公共报告透传接口， */
  getCommonalityAutoTaskReport?: Maybe<CommonalityAutoTaskReportRep>;
  /** 查询用例所在哪些用例集 */
  GetSuiteWithCaseIds?: Maybe<SuiteCustomItemRep>;
  /** 查询当前连接的设备信息，client+usb设备 */
  getOnlineUsbDeviceList?: Maybe<Client>;
  /** 我的项目信息查询 */
  getMyProjectStatistics?: Maybe<MyProjectStatistics>;
  /** 项目的用户列表 */
  getUserSelectorList?: Maybe<Array<Maybe<StaticUserItem>>>;
  /** 检查报告状态能否导出报告 */
  checkProjectReportStatus: Scalars['Boolean'];
  /** 全局client事件的弹窗触发 */
  clientEventAlert: ClientAlertMsg;
  /** 用例信息页 用例信息接口 */
  caseAllInfo?: Maybe<CaseInfo>;
  /** 创建项目中。拉取选项菜单 */
  projectSelectorList?: Maybe<ProjectSelectorList>;
  /** 查看设备是否在线 */
  checkDeviceOnline?: Maybe<ClientDeviceOnline>;
  /** 项目下点击用例得查看报告--用例测试过程信息+基本信息+用例状态 */
  caseTestProcessRecord?: Maybe<CaseTestProcessRecordRsp>;
  /** 检查设备是否在线，心跳 */
  checkDeviceHeartbeat?: Maybe<ClientDeviceOnlineV2>;
  /** 改变linux设备连接信息 */
  exchangeLinuxDeviceConnectMsg?: Maybe<Scalars['Boolean']>;
  /** 获取实时的车机apk列表 */
  realtimeGetApkInfo?: Maybe<Array<Maybe<ApkSelectorInfo>>>;
  /** 项目解除绑定的车机 */
  unBindDevice?: Maybe<Scalars['Boolean']>;
  getSelectedAppList?: Maybe<Array<Maybe<AppSelectedList>>>;
  getAnalysisAppList?: Maybe<Array<Maybe<AppSelectedList>>>;
  cancelDeviceOnlineAlert?: Maybe<Scalars['Boolean']>;
};


export type QueryTeamArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


export type QueryTeamByNameArgs = {
  name: Scalars['String'];
};


export type QueryNodeArgs = {
  id: Scalars['ID'];
};


export type QueryPickUserArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


export type QueryTokenArgs = {
  offset?: Maybe<OffsetConnectionInput>;
};


export type QueryFetchTaskArgs = {
  id?: Maybe<Scalars['ID']>;
};


export type QuerySysMessageArgs = {
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryMyItemsArgs = {
  teamId: Scalars['ID'];
};


export type QueryTeamOverviewArgs = {
  teamId?: Maybe<Scalars['ID']>;
};


export type QueryRecentStatisticsArgs = {
  teamId: Scalars['ID'];
  searchDay?: Maybe<Scalars['Int']>;
};


export type QueryCaseOfToolResultArgs = {
  teamId: Scalars['ID'];
  toolID: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryCaseResultListArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryProjectTaskItemListArgs = {
  teamId: Scalars['ID'];
};


export type QueryMyProjectStatisticsArgs = {
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryProjectListArgs = {
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryProjectDetailsArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryChangeProjectHistoryArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryCaseResultDetailArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryComplianceResultArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryLawCatalogueCheckDetailArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryLawCatalogueDetailArgs = {
  teamId: Scalars['ID'];
  lawId: Scalars['ID'];
};


export type QueryProjectHeartBeatArgs = {
  clientId: Scalars['String'];
  secretId: Scalars['String'];
  secretKey: Scalars['String'];
};


export type QueryProjectTaskStatusUpdateArgs = {
  taskId: Scalars['String'];
  proStatus: Scalars['Int'];
  clientId: Scalars['String'];
  secretId: Scalars['String'];
  secretKey: Scalars['String'];
};


export type QueryProjectEventHeartBeatArgs = {
  taskId: Scalars['String'];
  clientId: Scalars['String'];
  secretId: Scalars['String'];
  secretKey: Scalars['String'];
};


export type QueryProjectEventResultUpdateArgs = {
  clientId: Scalars['String'];
  secretId: Scalars['String'];
  secretKey: Scalars['String'];
  stepResultId: Scalars['String'];
  status: Scalars['Int'];
  result: Scalars['String'];
  taskId: Scalars['String'];
};


export type QueryUpdateDeviceStateArgs = {
  clientId: Scalars['String'];
  secretId: Scalars['String'];
  secretKey: Scalars['String'];
  deviceList?: Maybe<Array<Maybe<DeviceState>>>;
};


export type QueryRegisterDeviceArgs = {
  clientId: Scalars['String'];
  secretId: Scalars['String'];
  secretKey: Scalars['String'];
  device: Device;
};


export type QueryRegisterClientArgs = {
  clientId: Scalars['String'];
  secretId?: Maybe<Scalars['String']>;
  secretKey?: Maybe<Scalars['String']>;
  version: Scalars['String'];
  ip: Scalars['String'];
  internal?: Maybe<Scalars['Int']>;
  hostname?: Maybe<Scalars['String']>;
  plugin?: Maybe<Scalars['String']>;
  os?: Maybe<Scalars['String']>;
  remarkL?: Maybe<Scalars['String']>;
};


export type QuerySendHeartbeatArgs = {
  clientId: Scalars['String'];
  secretId?: Maybe<Scalars['String']>;
  secretKey?: Maybe<Scalars['String']>;
};


export type QueryGetCaseStepDetailArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
};


export type QueryGetCaseAllStepArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryGetCatalogueDetailArgs = {
  caseId: Scalars['ID'];
};


export type QueryUpdateSysMessageArgs = {
  message?: Maybe<Scalars['String']>;
};


export type QueryGetStepResultArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryGetProjectAutoTaskProgressArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryGetProjectAutoTaskProgressV2Args = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryCheckSelectDeviceOnlineHeartBeatArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryChangeCaseHistoryArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryCarInfoListArgs = {
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryLawDetailArgs = {
  lawId: Scalars['ID'];
};


export type QueryGetApkSelectorListArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryGetUserCustomCaseSuiteListArgs = {
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryGetUserCustomCaseListBySuiteIdArgs = {
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryGetUserCustomSuiteTypeArgs = {
  teamId: Scalars['ID'];
};


export type QueryReportViewActionArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  caseStepId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryGetAllCaseListArgs = {
  teamId: Scalars['ID'];
  suiteId?: Maybe<Scalars['ID']>;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Retrieve>;
};


export type QueryGetCaseStaticCheckedItemsArgs = {
  teamId: Scalars['ID'];
};


export type QueryGetCarInfoListArgs = {
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryGetCarInfoListSelectorArgs = {
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryGetCarStaticComponentArgs = {
  teamId: Scalars['ID'];
};


export type QueryGetCommonalityAutoTaskReportArgs = {
  teamId: Scalars['ID'];
  component?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  projectId: Scalars['ID'];
  caseId: Scalars['ID'];
  caseStepId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
};


export type QueryGetSuiteWithCaseIdsArgs = {
  teamId: Scalars['ID'];
  caseIds?: Maybe<Array<Scalars['ID']>>;
};


export type QueryGetOnlineUsbDeviceListArgs = {
  teamId: Scalars['ID'];
};


export type QueryGetMyProjectStatisticsArgs = {
  teamId: Scalars['ID'];
};


export type QueryGetUserSelectorListArgs = {
  teamId: Scalars['ID'];
};


export type QueryCheckProjectReportStatusArgs = {
  projectId: Scalars['ID'];
};


export type QueryClientEventAlertArgs = {
  teamId: Scalars['ID'];
};


export type QueryCaseAllInfoArgs = {
  caseId: Scalars['ID'];
};


export type QueryProjectSelectorListArgs = {
  teamId: Scalars['ID'];
};


export type QueryCheckDeviceOnlineArgs = {
  teamId: Scalars['ID'];
  clientId: Scalars['String'];
  connectType: Scalars['String'];
  connectIP: Scalars['String'];
  connectPort: Scalars['Int'];
  connectUser: Scalars['String'];
  connectPassword?: Maybe<Scalars['String']>;
  connectCertificateUrl?: Maybe<Scalars['String']>;
};


export type QueryCaseTestProcessRecordArgs = {
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryCheckDeviceHeartbeatArgs = {
  teamId: Scalars['ID'];
  deviceId: Scalars['String'];
  projectId: Scalars['ID'];
};


export type QueryExchangeLinuxDeviceConnectMsgArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  clientId: Scalars['String'];
  deviceId: Scalars['String'];
  connectType: Scalars['String'];
  connectIP: Scalars['String'];
  connectPort: Scalars['Int'];
  connectUser: Scalars['String'];
  connectPassword?: Maybe<Scalars['String']>;
  connectCertificateUrl?: Maybe<Scalars['String']>;
};


export type QueryRealtimeGetApkInfoArgs = {
  projectId: Scalars['ID'];
};


export type QueryUnBindDeviceArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryGetSelectedAppListArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryGetAnalysisAppListArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};


export type QueryCancelDeviceOnlineAlertArgs = {
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
};

/** rule check recent statistics */
export type RecentStatisticsRsp = {
  __typename?: 'RecentStatisticsRsp';
  /** statistics time */
  statTime?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
};

/** Analysis report. */
export type Report = SysReport | ApkReport;

export type ReportApkManifest = {
  __typename?: 'ReportApkManifest';
  appName?: Maybe<Scalars['String']>;
  allowBackup?: Maybe<Scalars['Boolean']>;
  debuggable?: Maybe<Scalars['Boolean']>;
};

export type ReportApkSignature = {
  __typename?: 'ReportApkSignature';
  appName?: Maybe<Scalars['String']>;
  algorithm?: Maybe<Scalars['String']>;
  from?: Maybe<Scalars['String']>;
  oid?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  to?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

export type ReportCheckSec = {
  __typename?: 'ReportCheckSec';
  canary?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nx?: Maybe<Scalars['String']>;
  pie?: Maybe<Scalars['String']>;
  relro?: Maybe<Scalars['String']>;
  rpath?: Maybe<Scalars['String']>;
  runpath?: Maybe<Scalars['String']>;
  symbols?: Maybe<Scalars['String']>;
};

export type ReportCveSec = {
  __typename?: 'ReportCVESec';
  mainList?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
  risk?: Maybe<Array<Maybe<ReportCveSecRisk>>>;
  version?: Maybe<Scalars['String']>;
  cvss?: Maybe<Scalars['Float']>;
  cvssRank?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  patch?: Maybe<Scalars['String']>;
  poc?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  exp?: Maybe<Scalars['String']>;
};

export type ReportCveSecRisk = {
  __typename?: 'ReportCVESecRisk';
  count?: Maybe<Scalars['Int']>;
  risk?: Maybe<Scalars['String']>;
};

export type ReportFeatureConfig = {
  __typename?: 'ReportFeatureConfig';
  baseline: Scalars['Boolean'];
  custom: Scalars['Boolean'];
  cveSec: Scalars['Boolean'];
  cveKernel: Scalars['Boolean'];
  license: Scalars['Boolean'];
  detail: Scalars['Boolean'];
  sensitive: Scalars['Boolean'];
  risk: Scalars['Boolean'];
};

export type ReportFile = {
  __typename?: 'ReportFile';
  name?: Maybe<Scalars['String']>;
  perm?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

/**
 * Report overview include baseline statistics, custom statistics,
 * threat alert statistics, cve statistics and license statistics.
 */
export type ReportOverview = {
  __typename?: 'ReportOverview';
  baseline: Array<CheckRiskStatistics>;
  baselineSecureScore?: Maybe<Scalars['Int']>;
  custom?: Maybe<Array<CheckRiskStatistics>>;
  threatAlert?: Maybe<Array<CommonRiskStatistics>>;
  cve?: Maybe<Array<CvssRankStatistics>>;
  license?: Maybe<Array<LicenseRiskStatistics>>;
};

export type ReportSystemUser = {
  __typename?: 'ReportSystemUser';
  gid?: Maybe<Scalars['Int']>;
  passwordHash?: Maybe<Scalars['String']>;
  shell?: Maybe<Scalars['String']>;
  uid?: Maybe<Scalars['Int']>;
  userName?: Maybe<Scalars['String']>;
};

export type ReportViewActionRsp = {
  __typename?: 'ReportViewActionRsp';
  count: Scalars['Int'];
  type?: Maybe<Scalars['String']>;
  toolType?: Maybe<Scalars['String']>;
  caseReportList: Array<Maybe<CaseReport>>;
};

/** Input type for project/analysis restore. */
export type RestoreInput = {
  id: Scalars['ID'];
  /** Need rename project/analysis if there is an undeleted project/analysis with the same name */
  rename?: Maybe<Scalars['String']>;
};

/** Retrieve 复杂的检索排序数据 */
export type Retrieve = {
  retrieveData?: Maybe<Array<Maybe<RetrieveObject>>>;
  sortData?: Maybe<Array<Maybe<SortObject>>>;
};

export type RetrieveObject = {
  RetrieveColumn: Scalars['String'];
  RetrieveValue: Scalars['String'];
};

/** User role. */
export type Role = {
  __typename?: 'Role';
  id: Scalars['ID'];
  name: Scalars['String'];
  permissions: Array<UserPermission>;
};

/** Network routing, include table, destination address, mask, gateway and interface name. */
export type Routing = ErrDescription & {
  __typename?: 'Routing';
  table: Scalars['String'];
  destination: Scalars['String'];
  mask: Scalars['String'];
  gateway: Scalars['String'];
  interfaceName: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Routing. */
export type RoutingConnection = {
  __typename?: 'RoutingConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Routing>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Routing. */
export type RoutingConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** Check rule information. */
export type Rule = {
  __typename?: 'Rule';
  id: Scalars['ID'];
  class: Scalars['String'];
  classKey: Scalars['String'];
  catalog: Scalars['String'];
  catalogKey: Scalars['String'];
  riskLevel: CheckRisk;
  ruleName: Scalars['String'];
  riskContent: Scalars['String'];
  riskReason: Scalars['String'];
  description: Scalars['String'];
  remediation: Scalars['String'];
  time?: Maybe<Scalars['Time']>;
  extra?: Maybe<Scalars['Map']>;
  wp29?: Maybe<Array<Wp29>>;
  detail?: Maybe<DetailConnection>;
};


/** Check rule information. */
export type RuleDetailArgs = {
  offset?: Maybe<OffsetConnectionInput>;
};

/** The connection type for Rule. */
export type RuleConnection = {
  __typename?: 'RuleConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Rule>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Rule. */
export type RuleConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** SAML Setting */
export type SamlSetting = {
  __typename?: 'SAMLSetting';
  /** SAML Toggle */
  enabled: Scalars['Boolean'];
  /** Auto Create User when SAML Login */
  autoCreateUser: Scalars['Boolean'];
  /** Auto Join Team Info, null means disabled */
  autoJoinTeam?: Maybe<Team>;
  /** Auto Join Team Role Info, null means disabled */
  autoJoinTeamRole?: Maybe<Role>;
  /** SysAuditor URL used in SAML Login */
  url: Scalars['String'];
  /** MetaData used in SAML Login */
  metaData: Scalars['String'];
};

/** Input type for saml setting. */
export type SamlSettingInput = {
  /** SAML Toggle */
  enabled?: Maybe<Scalars['Boolean']>;
  /** Auto Create User when SAML Login */
  autoCreateUser?: Maybe<Scalars['Boolean']>;
  /**
   * Auto Join Team when SAML Login, null means not update
   * nested ID in IDWithToggle is null means disable
   */
  autoJoinTeam?: Maybe<IdWithToggle>;
  /** Auto Join Team when SAML Login, null means not */
  autoJoinTeamRole?: Maybe<IdWithToggle>;
  /** SysAuditor URL used in SAML Login */
  url?: Maybe<Scalars['String']>;
  /** metaData used in SAML Login */
  metaData?: Maybe<Scalars['String']>;
};

/** SDK information. */
export type Sdk = {
  __typename?: 'Sdk';
  name: Scalars['String'];
};

/** The connection type for SDK. */
export type SdkConnection = {
  __typename?: 'SDKConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Sdk>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Input type for project list */
export type SearchPrecise = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  searchField?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};

/** SELinuxRisk information. */
export type SeLinuxRisk = {
  __typename?: 'SELinuxRisk';
  revise: Scalars['String'];
  action: Scalars['String'];
  role: Scalars['String'];
  context: Scalars['String'];
  class: Scalars['String'];
  detail: Scalars['String'];
};

/**
 * The connection type for SELinuxRisk.
 * .
 */
export type SeLinuxRiskConnection = {
  __typename?: 'SELinuxRiskConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<SeLinuxRisk>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Sensitive content information, include key file, private key and uri password. */
export type SensitiveContent = {
  __typename?: 'SensitiveContent';
  file: SensitiveFile;
  content: Array<Scalars['String']>;
};

/** Sensitive domain information, include uri, email. */
export type SensitiveDomain = {
  __typename?: 'SensitiveDomain';
  type: Scalars['String'];
  domain: Scalars['String'];
  count: Scalars['Int'];
  detail: Array<SensitiveDomainDetail>;
};

/** Sensitive domain information detail, include content(uri, email) and the files that contain the content. */
export type SensitiveDomainDetail = {
  __typename?: 'SensitiveDomainDetail';
  content: Scalars['String'];
  count: Scalars['Int'];
  files: Array<SensitiveFile>;
};

/** Sensitive file that contains the sensitive information, include file name and file type. */
export type SensitiveFile = {
  __typename?: 'SensitiveFile';
  name: Scalars['String'];
  type: Scalars['String'];
};

/** Sensitive information. */
export type SensitiveInfo = SensitiveContent | SensitiveIp | SensitiveDomain;

/** The connection type for SensitiveInfo. */
export type SensitiveInfoConnection = {
  __typename?: 'SensitiveInfoConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<SensitiveInfo>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /**
   * Field list with count used in filter. For example, input ["a","b"],
   * return map{"a":[{"value":"avalue1","count":acount1}],"b":[{"value":"bvalue1","count":bcount1}]}.
   */
  fieldValuesWithCount?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for SensitiveInfo. */
export type SensitiveInfoConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};


/** The connection type for SensitiveInfo. */
export type SensitiveInfoConnectionFieldValuesWithCountArgs = {
  fields: Array<Scalars['String']>;
};

/** Sensitive ip information. */
export type SensitiveIp = {
  __typename?: 'SensitiveIP';
  ip: Scalars['String'];
  type: Scalars['String'];
  count: Scalars['Int'];
  files: Array<SensitiveFile>;
};

/** Sensitive information type enum. */
export enum SensitiveType {
  Uri = 'URI',
  Ip = 'IP',
  Email = 'Email',
  KeyFile = 'KeyFile',
  PrivateKey = 'PrivateKey',
  UriPassword = 'URIPassword'
}

/** System Setting */
export type Setting = SamlSetting | SystemSetting;

export type SettingMutation = {
  __typename?: 'SettingMutation';
  /** Edit system setting. */
  systemSetting?: Maybe<SystemSetting>;
  /** Edit saml setting. */
  SAMLSetting?: Maybe<SamlSetting>;
};


export type SettingMutationSystemSettingArgs = {
  input: SystemSettingInput;
};


export type SettingMutationSamlSettingArgs = {
  input: SamlSettingInput;
};

/** The sharelib type, just include name but may be expand. */
export type Sharelib = {
  __typename?: 'Sharelib';
  /** Lib path plus lib name. */
  name: Scalars['String'];
};

/**
 * Socket, include local address, local port, remote address,
 * remote port, inode, process name list, pid list and protocol type.
 */
export type Socket = ErrDescription & {
  __typename?: 'Socket';
  localAddress: Scalars['String'];
  localPort: Scalars['Int'];
  remoteAddress: Scalars['String'];
  remotePort: Scalars['Int'];
  inode: Scalars['Int'];
  processName?: Maybe<Array<Scalars['String']>>;
  pid?: Maybe<Array<Scalars['Int']>>;
  type: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Socket. */
export type SocketConnection = {
  __typename?: 'SocketConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Socket>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Socket. */
export type SocketConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

export type SortObject = {
  SortColumn: Scalars['String'];
  SortOrder: Order;
};

export type StaticItem = {
  __typename?: 'StaticItem';
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

export type StaticUserItem = {
  __typename?: 'StaticUserItem';
  userId: Scalars['ID'];
  name: Scalars['String'];
};

export type StepBase = {
  __typename?: 'StepBase';
  markdown: Scalars['String'];
  code?: Maybe<Scalars['String']>;
  config: Scalars['String'];
  caseEnable: Scalars['Boolean'];
  resetCheckEnable: Scalars['Boolean'];
};

export type StepBaseV2 = {
  __typename?: 'StepBaseV2';
  stepName: Scalars['String'];
  stepDesc: Scalars['String'];
  stepType: Scalars['String'];
  markdown: Scalars['String'];
  config: Scalars['String'];
  result: Scalars['String'];
  caseEnable: Scalars['Boolean'];
  resetCheckEnable: Scalars['Boolean'];
};

export type StepInfo = {
  __typename?: 'StepInfo';
  stepId?: Maybe<Scalars['ID']>;
  stepName?: Maybe<Scalars['String']>;
  stepTestJson?: Maybe<Scalars['String']>;
};

export type StepResult = {
  __typename?: 'StepResult';
  clientStatus: Scalars['Int'];
  stepStatus: Scalars['Int'];
  result: Scalars['String'];
  setpIndex: Scalars['Int'];
};

/** Storage mount, include device, mountPoint, fsType and option. */
export type StorageMount = ErrDescription & {
  __typename?: 'StorageMount';
  device: Scalars['String'];
  mountPoint: Scalars['String'];
  fsType: Scalars['String'];
  option: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for StorageMount. */
export type StorageMountConnection = {
  __typename?: 'StorageMountConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<StorageMount>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Storage partition information, include name, size and node. */
export type StoragePartition = ErrDescription & {
  __typename?: 'StoragePartition';
  name: Scalars['String'];
  size: Scalars['Int'];
  node: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for StoragePartition. */
export type StoragePartitionConnection = {
  __typename?: 'StoragePartitionConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<StoragePartition>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/**
 * Storage usage, include filesystem, total, used,
 * available, usePercent and mountOn.
 */
export type StorageUsage = ErrDescription & {
  __typename?: 'StorageUsage';
  filesystem: Scalars['String'];
  total: Scalars['String'];
  used: Scalars['String'];
  available: Scalars['String'];
  usePercent: Scalars['String'];
  mountOn: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for StorageUsage. */
export type StorageUsageConnection = {
  __typename?: 'StorageUsageConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<StorageUsage>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Stream, include content and type. */
export type Stream = {
  __typename?: 'Stream';
  content: Scalars['String'];
  type: StreamType;
};

/** Stream type enum. */
export enum StreamType {
  Start = 'Start',
  Append = 'Append',
  End = 'End'
}

export type Subscription = {
  __typename?: 'Subscription';
  /**
   * Analyze status subscription, if input is not null,
   * subscribe analyses belong to inputed project.
   */
  analysisStatus: Analysis;
  /**
   * Collect status subscription, if input is not null,
   * subscribe collectors belong to inputed analysis.
   */
  collectorStatus: Collector;
  /** Log subscription. */
  log: Stream;
};


export type SubscriptionAnalysisStatusArgs = {
  projectID?: Maybe<Scalars['ID']>;
};


export type SubscriptionCollectorStatusArgs = {
  analysisID?: Maybe<Scalars['ID']>;
};


export type SubscriptionLogArgs = {
  id: Scalars['ID'];
};

export type SuiteCustomItem = {
  __typename?: 'SuiteCustomItem';
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  layType?: Maybe<Scalars['Int']>;
  descriptionInfo?: Maybe<Scalars['String']>;
  canModify?: Maybe<Scalars['Boolean']>;
  caseCount?: Maybe<Scalars['Int']>;
};

export type SuiteCustomItemRep = {
  __typename?: 'SuiteCustomItemRep';
  count?: Maybe<Scalars['Int']>;
  resultList?: Maybe<Array<Maybe<SuiteCustomItem>>>;
};

/** The supportedfs type, include dev and type. */
export type Supportedfs = ErrDescription & {
  __typename?: 'Supportedfs';
  dev: Scalars['String'];
  type: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for Supportedfs. */
export type SupportedfsConnection = {
  __typename?: 'SupportedfsConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Supportedfs>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Supportedfs. */
export type SupportedfsConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

export type SysAuditorReport = {
  __typename?: 'SysAuditorReport';
  analysisResultId: Scalars['ID'];
  ruleName: Scalars['String'];
  riskLevel: Scalars['String'];
  catalog: Scalars['String'];
  description: Scalars['String'];
  remediation: Scalars['String'];
  riskContent: Scalars['String'];
  riskReason: Scalars['String'];
};

/** workbench 's system message */
export type SysMessageRsp = {
  __typename?: 'SysMessageRsp';
  /** system message response occurrence time */
  occTime: Scalars['String'];
  /** system message response message */
  message: Scalars['String'];
};

/** Linux system report. */
export type SysReport = {
  __typename?: 'SysReport';
  id: Scalars['ID'];
  /** Report overview. */
  overview: ReportOverview;
  /** Detail system information of current project. */
  system: System;
  /** Threat alert chain */
  threatAlert?: Maybe<ThreatAlertConnection>;
  /** List audit. */
  listAudit?: Maybe<Array<CheckList>>;
  /** Audit report */
  auditReport: Check;
  /** Audit rule list (under ovewview section) */
  audit?: Maybe<RuleConnection>;
  /** Sensitive info */
  sensitiveInfo?: Maybe<SensitiveInfoConnection>;
  /** License audit info */
  license?: Maybe<LicenseConnection>;
  /** Process risk */
  procRisk: ProcRisk;
  /** Android risk */
  androidRisk: AndroidRisk;
  /** Search rule by id. */
  ruleByID?: Maybe<Rule>;
  /** Get item position offset in report page. */
  position?: Maybe<Scalars['Int']>;
};


/** Linux system report. */
export type SysReportThreatAlertArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  risk?: Maybe<CommonRisk>;
};


/** Linux system report. */
export type SysReportListAuditArgs = {
  auditType: AuditType;
};


/** Linux system report. */
export type SysReportAuditReportArgs = {
  auditType: AuditType;
  classType?: Maybe<Scalars['String']>;
  checkType?: Maybe<Scalars['String']>;
};


/** Linux system report. */
export type SysReportAuditArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  risk?: Maybe<Array<CheckRisk>>;
  auditType: AuditType;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Linux system report. */
export type SysReportSensitiveInfoArgs = {
  type: SensitiveType;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Linux system report. */
export type SysReportLicenseArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Linux system report. */
export type SysReportRuleByIdArgs = {
  id: Scalars['ID'];
};


/** Linux system report. */
export type SysReportPositionArgs = {
  page: SysReportPage;
  field: Scalars['Map'];
};

/** System report page enum. */
export enum SysReportPage {
  File = 'File',
  Process = 'Process'
}

/** System information. */
export type System = {
  __typename?: 'System';
  /** Kernel information. */
  kernel: Kernel;
  /** Buddyinfo list */
  buddyInfo?: Maybe<BuddyInfoConnection>;
  /** Crypto list */
  crypto?: Maybe<CryptoConnection>;
  /** supportedfs list */
  supportedfs?: Maybe<SupportedfsConnection>;
  /** Host list. */
  hosts?: Maybe<HostConnection>;
  /** System user list. */
  user?: Maybe<SystemUserConnection>;
  /** System group list. */
  group?: Maybe<GroupConnection>;
  /** System network information list. */
  network?: Maybe<Network>;
  /** File information list. */
  file?: Maybe<FileConnection>;
  /** Storage partition information list. */
  storagePartition?: Maybe<StoragePartitionConnection>;
  /** Process list which are running. */
  process?: Maybe<ProcessConnection>;
  /** Storage usage information list. */
  storageUsage?: Maybe<StorageUsageConnection>;
  /** Storage mount information list. */
  storageMount?: Maybe<StorageMountConnection>;
  /** Lib cve information list. */
  libCveSec?: Maybe<CveSecConnection>;
  /** Kernel cve information list. */
  kernelCveSec?: Maybe<CveSecConnection>;
  /** CheckSec information list. */
  checkSec?: Maybe<CheckSecConnection>;
  /** Command information */
  command?: Maybe<CommandConnection>;
  /** usb information list. */
  usb?: Maybe<UsbConnection>;
};


/** System information. */
export type SystemBuddyInfoArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** System information. */
export type SystemCryptoArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** System information. */
export type SystemSupportedfsArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** System information. */
export type SystemHostsArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};


/** System information. */
export type SystemUserArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};


/** System information. */
export type SystemGroupArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
};


/** System information. */
export type SystemFileArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  searchField?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  path?: Maybe<Scalars['String']>;
  noneVirtual?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** System information. */
export type SystemStoragePartitionArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** System information. */
export type SystemProcessArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  searchField?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  orderBy?: Maybe<OrderByInput>;
};


/** System information. */
export type SystemStorageUsageArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** System information. */
export type SystemStorageMountArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** System information. */
export type SystemLibCveSecArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  pid?: Maybe<Scalars['Int']>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** System information. */
export type SystemKernelCveSecArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  pid?: Maybe<Scalars['Int']>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** System information. */
export type SystemCheckSecArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  pid?: Maybe<Scalars['Int']>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** System information. */
export type SystemCommandArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
};


/** System information. */
export type SystemUsbArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};

/**
 * System license information, include name(Backend/Arrowhead), version, expire time
 * and customer company.
 */
export type SystemLicense = {
  __typename?: 'SystemLicense';
  name: Scalars['String'];
  version?: Maybe<Scalars['String']>;
  expireTime?: Maybe<Scalars['Time']>;
  customerCompany?: Maybe<Scalars['String']>;
};

/** System setting. */
export type SystemSetting = {
  __typename?: 'SystemSetting';
  /**
   * Single file upload size limit.
   * Unit MB, default 4096 MB, max is "maxSingleUpload", min 100 MB.
   */
  singleUpload: Scalars['Int'];
  /** Max single file upload size, Unit MB. */
  maxSingleUpload: Scalars['Int'];
  /**
   * Global analyze timeout.
   * It's invalid for the analysis that has set timeout in analysis setting.
   * Unit minute, default 10 minutes, max 60 minutes(1 hour), min 1 minute.
   */
  analyzeTimeout: Scalars['Int'];
  /**
   * Session expiration time if no activity.
   * Unit minute, default 15 minutes, max 1440 minutes(24 hours), min 10 minute.
   */
  sessionExpTime: Scalars['Int'];
  /** Log level, default INFO. */
  logLevel: LogLevel;
};

/** Input type for system setting. */
export type SystemSettingInput = {
  /** Unit MB, max size get from backend, min 100 MB. */
  singleUpload?: Maybe<Scalars['Int']>;
  /** Unit minute, max 60 minutes(1 hour), min 1 minute. */
  analyzeTimeout?: Maybe<Scalars['Int']>;
  /** Unit minute, max 1440 minutes(24 hours), min 10 minute. */
  sessionExpTime?: Maybe<Scalars['Int']>;
  /** Log level. */
  logLevel?: Maybe<LogLevel>;
};

/**
 * Sysauditor system status, include system disk space
 * and postgresql session status.
 */
export type SystemStatus = {
  __typename?: 'SystemStatus';
  disk: DiskStatus;
  postgres: PostgresStatus;
};

/**
 * System user information, include user id, user name, primary group id,
 * password hash and shell.
 */
export type SystemUser = ErrDescription & {
  __typename?: 'SystemUser';
  uid: Scalars['Int'];
  userName: Scalars['String'];
  gid: Scalars['Int'];
  shell: Scalars['String'];
  passwordHash: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for SystemUser. */
export type SystemUserConnection = {
  __typename?: 'SystemUserConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<SystemUser>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Analysis task management. */
export type Task = {
  __typename?: 'Task';
  id: Scalars['ID'];
  /**
   * Analysis which current task belongs to,
   * analysis will be null if task is be deleted.
   */
  analysis?: Maybe<Analysis>;
  /**
   * Agent which is analyzing current task,
   * agent will be null if task in waiting or be deleted.
   */
  agent?: Maybe<Agent>;
  status: AnalysisStatus;
  command: AnalyzeCommand;
  time: Scalars['Time'];
  displayID: Scalars['String'];
  /**
   * Information records when task creating.
   * UserName is the user who creating the task.
   * TeamName is the team to which the task belongs.
   * ProjectName is the project to which the task belongs.
   */
  userName: Scalars['String'];
  teamName: Scalars['String'];
  projectName: Scalars['String'];
};

/** The connection type for Task. */
export type TaskConnection = {
  __typename?: 'TaskConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Task>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for Task. */
export type TaskConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** Team information. */
export type Team = Node & {
  __typename?: 'Team';
  id: Scalars['ID'];
  name: Scalars['String'];
  createTime: Scalars['Time'];
  /**
   * Using times limit. And only success tasks consume times.
   * Team is unlimited if return null.
   */
  timesLimit?: Maybe<Limit>;
  /** Viewer role for current team. */
  viewerRole?: Maybe<Role>;
  /** Overview of all analysis belong to current team. */
  overview: TeamOverview;
  /** Project list belong current team, such as bmw, audi. */
  project?: Maybe<ProjectConnection>;
  /** Information only admin or team manager can query */
  manager: TeamManager;
  /** Search project by project name. */
  projectByName?: Maybe<Project>;
};


/** Team information. */
export type TeamProjectArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};


/** Team information. */
export type TeamProjectByNameArgs = {
  name: Scalars['String'];
};

/** The connection type for Team. */
export type TeamConnection = {
  __typename?: 'TeamConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Team>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Team information only admin or team manager can query. */
export type TeamManager = {
  __typename?: 'TeamManager';
  /** Users added into current team */
  user?: Maybe<UserConnection>;
  /** Tasks belong to current team */
  task?: Maybe<TaskConnection>;
};


/** Team information only admin or team manager can query. */
export type TeamManagerUserArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
};


/** Team information only admin or team manager can query. */
export type TeamManagerTaskArgs = {
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
};

/** Type for team mutation. */
export type TeamMutation = {
  __typename?: 'TeamMutation';
  /** Add user into team. */
  addUser?: Maybe<User>;
  /** Remove user from team. */
  removeUser?: Maybe<Array<Maybe<User>>>;
  /** Edit user role for current team. */
  editUser?: Maybe<User>;
};


/** Type for team mutation. */
export type TeamMutationAddUserArgs = {
  input: TeamUserInput;
};


/** Type for team mutation. */
export type TeamMutationRemoveUserArgs = {
  input: Array<Scalars['ID']>;
};


/** Type for team mutation. */
export type TeamMutationEditUserArgs = {
  input: TeamUserInput;
};

/** Overview for current team. */
export type TeamOverview = {
  __typename?: 'TeamOverview';
  /** Current team project status statistics. */
  status: Array<CommonStatusStatistics>;
  /**
   * Current team project risk overview.
   * Risk statistics, include baseline,
   * cve and license.
   */
  risk: AllRiskStatistics;
  /** Recent 10 project event. */
  recentEvent?: Maybe<Array<Project>>;
};

/** rule check overview info */
export type TeamOverviewRsp = {
  __typename?: 'TeamOverviewRsp';
  /** project statistics info */
  projectNumber?: Maybe<Scalars['Int']>;
  passingRate?: Maybe<Scalars['Int']>;
  passNumber?: Maybe<Scalars['Int']>;
  unPassNumber?: Maybe<Scalars['Int']>;
  checkingNumber?: Maybe<Scalars['Int']>;
  unCheckedNumber?: Maybe<Scalars['Int']>;
  /** car info */
  carInfoList?: Maybe<Array<Maybe<CarInfoStatisFuse>>>;
  /** car info */
  carInfoListClassify?: Maybe<Array<Maybe<CarInfoStatis>>>;
  /** module info */
  moduleInfoList?: Maybe<Array<Maybe<ModuleInfoStatis>>>;
};

export type TeamProjectMutation = {
  __typename?: 'TeamProjectMutation';
  /**
   * Create a new project.
   * createNewProjectTask(newProjectInput: NewProjectInput): ID!
   */
  createProject?: Maybe<Project>;
  /**
   * Delete an existing project or project list.
   * delProject(projectId: ID!)
   */
  deleteProject?: Maybe<Array<Maybe<Project>>>;
  /**
   * Edit an existing project.
   * finishedProjectTask(projectId: ID!): Boolean
   * updateProjectName(projectName: String! projectId: ID!): Boolean
   * updateProjectDuty(dutyUserId: ID! projectId: ID!):Boolean
   */
  editProject?: Maybe<Project>;
  /** Analyze a project or project list. */
  analyzeProject?: Maybe<Array<Maybe<Project>>>;
  /** Fast create a new analysis. */
  createAnalysisFast?: Maybe<Analysis>;
  /** Create a new analysis. */
  createAnalysis?: Maybe<Analysis>;
  /** Delete an existing analysis or analysis list. */
  deleteAnalysis?: Maybe<Array<Maybe<Analysis>>>;
  /** Edit an existing analysis. */
  editAnalysis?: Maybe<Analysis>;
  /** Edit an analysis setting. */
  editAnalysisSetting?: Maybe<AnalysisSetting>;
  /** Analyze an analysis or analysis list. */
  analyzeAnalysis?: Maybe<Array<Maybe<Analysis>>>;
  /** Stop an analyzing analysis. */
  stopAnalysis?: Maybe<Analysis>;
  /** Undo custom audit. */
  undoAudit?: Maybe<Array<Maybe<Rule>>>;
  /** Add collector for one analysis. */
  addCollector?: Maybe<Collector>;
  /** Delete an existing collector or collector list. */
  deleteCollector?: Maybe<Collector>;
  /** Config an existing collector. */
  configCollector?: Maybe<Collector>;
  /** Collect a collector. */
  collectCollector?: Maybe<Collector>;
  /** Stop an collecting collector. */
  stopCollector?: Maybe<Collector>;
  /**
   * Edit file for an analysis, can upload file or edit file information.
   * submitAnalysisFile(file: FileInput): Boolean
   */
  editFile?: Maybe<Analysis>;
  /** rule check 's check project name exists in db */
  checkProjectName?: Maybe<Scalars['Boolean']>;
};


export type TeamProjectMutationCreateProjectArgs = {
  input: CreateProjectInput;
};


export type TeamProjectMutationDeleteProjectArgs = {
  input: Array<Scalars['ID']>;
};


export type TeamProjectMutationEditProjectArgs = {
  input: EditProjectInput;
};


export type TeamProjectMutationAnalyzeProjectArgs = {
  input: Array<Scalars['ID']>;
};


export type TeamProjectMutationCreateAnalysisFastArgs = {
  input: CreateAnalysisFastInput;
};


export type TeamProjectMutationCreateAnalysisArgs = {
  input: CreateAnalysisInput;
};


export type TeamProjectMutationDeleteAnalysisArgs = {
  input: Array<Scalars['ID']>;
};


export type TeamProjectMutationEditAnalysisArgs = {
  input: EditAnalysisInput;
};


export type TeamProjectMutationEditAnalysisSettingArgs = {
  input: EditAnalysisSettingInput;
};


export type TeamProjectMutationAnalyzeAnalysisArgs = {
  input: Array<Scalars['ID']>;
};


export type TeamProjectMutationStopAnalysisArgs = {
  input: Scalars['ID'];
};


export type TeamProjectMutationUndoAuditArgs = {
  input: Array<Scalars['ID']>;
};


export type TeamProjectMutationAddCollectorArgs = {
  input: AddCollectorInput;
};


export type TeamProjectMutationDeleteCollectorArgs = {
  input: Scalars['ID'];
};


export type TeamProjectMutationConfigCollectorArgs = {
  input: ConfigCollectorInput;
};


export type TeamProjectMutationCollectCollectorArgs = {
  input: Scalars['ID'];
};


export type TeamProjectMutationStopCollectorArgs = {
  input: Scalars['ID'];
};


export type TeamProjectMutationEditFileArgs = {
  input: EditFileInput;
};


export type TeamProjectMutationCheckProjectNameArgs = {
  projectName: Scalars['String'];
};

/** Team statistics, include name and statistics count. */
export type TeamStatistics = {
  __typename?: 'TeamStatistics';
  name: Scalars['String'];
  project: Scalars['Int'];
  risk?: Maybe<Scalars['Int']>;
  timesLimit?: Maybe<Limit>;
};

/** Input type for add user into team or edit user role of team. */
export type TeamUserInput = {
  id: Scalars['ID'];
  teamRole: Scalars['ID'];
};

/** ThreatAlert chain */
export type ThreatAlert = {
  __typename?: 'ThreatAlert';
  /** ThreatAlert chain start with a interface. */
  interface: InterfaceSecurity;
  /** Process security list, list order means process connection relation. */
  procSecurity?: Maybe<Array<ProcSecurity>>;
  /** ThreatAlert chain end with kernel, and it may be null. */
  kernel?: Maybe<Kernel>;
  /** Score evaluate vulnerability of current threat alert chain. */
  score: Scalars['Float'];
};

/** The connection type for ThreatAlert. */
export type ThreatAlertConnection = {
  __typename?: 'ThreatAlertConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<ThreatAlert>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/**
 * Token type, include token value, token create time
 * and token description.
 */
export type Token = {
  __typename?: 'Token';
  id: Scalars['ID'];
  token: Scalars['String'];
  createTime: Scalars['Time'];
  description?: Maybe<Scalars['String']>;
};

/** The connection type for Token. */
export type TokenConnection = {
  __typename?: 'TokenConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Token>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Type for token mutation. */
export type TokenMutation = {
  __typename?: 'TokenMutation';
  /** Create token. */
  createToken?: Maybe<Token>;
  /** Delete an existing token or token list belonging to current user. */
  deleteToken?: Maybe<Array<Maybe<Token>>>;
  /** Edit an existing token belonging to current user. */
  editToken?: Maybe<Token>;
  /** Activate current token, and return error if not activate for a long time. */
  activateToken?: Maybe<Token>;
};


/** Type for token mutation. */
export type TokenMutationCreateTokenArgs = {
  input: CreateTokenInput;
};


/** Type for token mutation. */
export type TokenMutationDeleteTokenArgs = {
  input: Array<Scalars['ID']>;
};


/** Type for token mutation. */
export type TokenMutationEditTokenArgs = {
  input: EditTokenInput;
};

/** my tool info */
export type ToolItemRsp = {
  __typename?: 'ToolItemRsp';
  id: Scalars['ID'];
  name: Scalars['String'];
  projectId: Scalars['ID'];
  projectName: Scalars['String'];
  status: Scalars['Int'];
  /** duty user name */
  dutyUser: Scalars['String'];
  toolResult: ProjectTestResultRsp;
};

/** Unix socket, include inode, path, process name list and pid list. */
export type UnixSocket = ErrDescription & {
  __typename?: 'UnixSocket';
  inode: Scalars['Int'];
  path: Scalars['String'];
  processName?: Maybe<Array<Scalars['String']>>;
  pid?: Maybe<Array<Scalars['Int']>>;
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for UnixSocket. */
export type UnixSocketConnection = {
  __typename?: 'UnixSocketConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<UnixSocket>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** Input type for agent update. */
export type UpdateAgentInput = {
  uuid: Scalars['String'];
  status: AgentStatus;
  error?: Maybe<Scalars['String']>;
};

/** Input type for system license updating. */
export type UpdateLicenseInput = {
  /** Input license content. */
  content?: Maybe<Scalars['String']>;
  /** Upload license file. */
  file?: Maybe<Scalars['Upload']>;
};

/** Input type for task update. */
export type UpdateTaskInput = {
  id: Scalars['ID'];
  uuid: Scalars['String'];
  status: AnalysisStatus;
};


export type UploadData = {
  __typename?: 'UploadData';
  fileUUID: Scalars['String'];
  fileName: Scalars['String'];
  size: Scalars['Int'];
  fileUrl: Scalars['String'];
};

/**
 * Upload file information, include name, file type, upload time
 * and file analyze parameter.
 */
export type UploadFile = {
  __typename?: 'UploadFile';
  id: Scalars['ID'];
  name: Scalars['String'];
  type: UploadFileType;
  analyzeParam: Scalars['Map'];
  time: Scalars['Time'];
};

/** Upload file type. */
export enum UploadFileType {
  /** Used for analysis type SystemLinux/SystemAndroid8/SystemAndroid9/SystemAndroid10/SystemAndroidOther */
  Image = 'Image',
  Collector = 'Collector',
  /** Used for analysis type ArtifactAPK */
  Apk = 'APK',
  /** Used for analysis type ArtifactPackage */
  Package = 'Package',
  /** Used for analysis type ArtifactRTOS */
  RtosFirmware = 'RTOSFirmware'
}

/** USB information. */
export type Usb = ErrDescription & {
  __typename?: 'USB';
  busID: Scalars['String'];
  deviceID: Scalars['String'];
  idVendor: Scalars['String'];
  idProduct: Scalars['String'];
  description: Scalars['String'];
  errDescription?: Maybe<Scalars['Map']>;
};

/** The connection type for USB. */
export type UsbConnection = {
  __typename?: 'USBConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<Usb>>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};

/** User information. */
export type User = {
  __typename?: 'User';
  id: Scalars['ID'];
  /** Username. */
  username: Scalars['String'];
  /** Nickname. */
  nickname: Scalars['String'];
  /** User role. */
  userRole: Role;
  /** Team role which current user belong to. */
  teamRole?: Maybe<Role>;
  /** Last login time. */
  lastLoginTime: Scalars['Time'];
};


/** User information. */
export type UserTeamRoleArgs = {
  teamID: Scalars['ID'];
};

/** The connection type for User. */
export type UserConnection = {
  __typename?: 'UserConnection';
  /** A list of nodes. */
  nodes?: Maybe<Array<User>>;
  /**
   * Field list used in filter. For example, input ["a","b"],
   * return map{"a":["aValue1","aValue2"],"b":["bValue1","bValue2"]}.
   */
  fieldValues?: Maybe<Scalars['Map']>;
  /** Identifies the total count of items in the connection. */
  totalCount: Scalars['Int'];
};


/** The connection type for User. */
export type UserConnectionFieldValuesArgs = {
  fields: Array<Scalars['String']>;
};

/** User permission enum. */
export enum UserPermission {
  ManagementReadable = 'ManagementReadable',
  ManagementWriteable = 'ManagementWriteable',
  TeamUserReadable = 'TeamUserReadable',
  TeamUserWriteable = 'TeamUserWriteable',
  TeamProjectReadable = 'TeamProjectReadable',
  TeamProjectWriteable = 'TeamProjectWriteable',
  UserPickable = 'UserPickable'
}

export type VersionSelector = {
  __typename?: 'VersionSelector';
  id: Scalars['ID'];
  titile: Scalars['String'];
  versionName: Scalars['String'];
};

/** WP29 rule information. */
export type Wp29 = {
  __typename?: 'WP29';
  rule: Scalars['String'];
  class: Scalars['String'];
  detail: Scalars['String'];
  example: Scalars['String'];
};

export type ApkRuleFragment = (
  { __typename?: 'Rule' }
  & Pick<Rule, 'id' | 'class' | 'catalog' | 'catalogKey' | 'riskLevel' | 'ruleName' | 'riskContent' | 'riskReason' | 'description' | 'remediation' | 'extra'>
);

export type ApkCheckFragment = (
  { __typename?: 'Check' }
  & { rule?: Maybe<Array<(
    { __typename?: 'Rule' }
    & ApkRuleFragment
  )>>, risk: Array<(
    { __typename?: 'CheckRiskStatistics' }
    & Pick<CheckRiskStatistics, 'risk' | 'count'>
  )> }
);

export type ApkReportGenericQueryVariables = Exact<{
  id: Scalars['ID'];
  classType: Scalars['String'];
  language: Language;
}>;


export type ApkReportGenericQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & Pick<ApkReport, 'id'>
      & { auditReport: (
        { __typename?: 'Check' }
        & ApkCheckFragment
      ) }
    ) }
  )> }
  & ViewerFragment
);

export type ApkReportBaselineQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  risk?: Maybe<Array<CheckRisk> | CheckRisk>;
  language: Language;
}>;


export type ApkReportBaselineQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & Pick<ApkReport, 'id'>
      & { audit?: Maybe<(
        { __typename?: 'RuleConnection' }
        & Pick<RuleConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'Rule' }
          & Pick<Rule, 'id' | 'classKey' | 'class' | 'catalogKey' | 'catalog' | 'ruleName' | 'description' | 'riskLevel' | 'riskContent'>
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type ApkOverviewQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ApkOverviewQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { manifest: (
        { __typename?: 'ApkManifest' }
        & Pick<ApkManifest, 'packageName' | 'version' | 'md5' | 'beginTime' | 'allowBackup' | 'debuggable'>
      ), overview: (
        { __typename?: 'ReportOverview' }
        & { baseline: Array<(
          { __typename?: 'CheckRiskStatistics' }
          & Pick<CheckRiskStatistics, 'risk' | 'count'>
        )>, cve?: Maybe<Array<(
          { __typename?: 'CvssRankStatistics' }
          & Pick<CvssRankStatistics, 'risk' | 'count'>
        )>>, license?: Maybe<Array<(
          { __typename?: 'LicenseRiskStatistics' }
          & Pick<LicenseRiskStatistics, 'risk' | 'count'>
        )>> }
      ) }
    ) }
  )> }
  & ViewerFragment
);

export type ApkDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ApkDetailQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { signature: (
        { __typename?: 'ApkSignature' }
        & Pick<ApkSignature, 'from' | 'to' | 'oid' | 'subject' | 'version' | 'algorithm'>
      ), components: (
        { __typename?: 'ApkComponents' }
        & Pick<ApkComponents, 'activities' | 'services' | 'receivers' | 'providers'>
      ) }
    ) }
  )> }
  & ViewerFragment
);

export type PublicComponentsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type PublicComponentsQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { components: (
        { __typename?: 'ApkComponents' }
        & Pick<ApkComponents, 'activities' | 'services' | 'receivers' | 'providers'>
      ) }
    ) }
  )> }
  & ViewerFragment
);

export type ApkDetailPermissionQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type ApkDetailPermissionQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { permission?: Maybe<(
        { __typename?: 'ApkPermissionConnection' }
        & Pick<ApkPermissionConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'ApkPermission' }
          & Pick<ApkPermission, 'name'>
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type ApkDetailSdkQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type ApkDetailSdkQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { sdk?: Maybe<(
        { __typename?: 'SDKConnection' }
        & Pick<SdkConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'Sdk' }
          & Pick<Sdk, 'name'>
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type ApkReportAnalysisFragment = (
  { __typename?: 'Analysis' }
  & Pick<Analysis, 'id' | 'analysisType'>
  & { report: { __typename?: 'SysReport' } | (
    { __typename?: 'ApkReport' }
    & Pick<ApkReport, 'id'>
    & { audit?: Maybe<Array<(
      { __typename?: 'CheckList' }
      & CheckItemFragment
    )>> }
  ) }
);

export type SensitiveFileFragment = (
  { __typename?: 'SensitiveFile' }
  & Pick<SensitiveFile, 'name' | 'type'>
);

export type SensitiveIpFragment = (
  { __typename?: 'SensitiveIP' }
  & Pick<SensitiveIp, 'ip' | 'type' | 'count'>
  & { files?: Maybe<Array<(
    { __typename?: 'SensitiveFile' }
    & SensitiveFileFragment
  )>> }
);

export type SensitiveDomainFragment = (
  { __typename?: 'SensitiveDomain' }
  & Pick<SensitiveDomain, 'type' | 'domain' | 'count'>
  & { detail?: Maybe<Array<(
    { __typename?: 'SensitiveDomainDetail' }
    & Pick<SensitiveDomainDetail, 'content'>
    & { files: Array<(
      { __typename?: 'SensitiveFile' }
      & SensitiveFileFragment
    )> }
  )>> }
);

export type SensitiveContentFragment = (
  { __typename?: 'SensitiveContent' }
  & Pick<SensitiveContent, 'content'>
  & { file: (
    { __typename?: 'SensitiveFile' }
    & Pick<SensitiveFile, 'name' | 'type'>
  ) }
);

export type ApkSensitiveInfoQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  type: SensitiveType;
  domain?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  withDetail?: Scalars['Boolean'];
  filterFields?: Maybe<Scalars['Map']>;
  orderBy?: Maybe<OrderByInput>;
}>;


export type ApkSensitiveInfoQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { sensitiveInfo?: Maybe<(
        { __typename?: 'SensitiveInfoConnection' }
        & MakeOptional<Pick<SensitiveInfoConnection, 'totalCount' | 'fieldValues' | 'fieldValuesWithCount'>, 'fieldValuesWithCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'SensitiveContent' }
          & SensitiveContentFragment
        ) | (
          { __typename?: 'SensitiveIP' }
          & SensitiveIpFragment
        ) | (
          { __typename?: 'SensitiveDomain' }
          & SensitiveDomainFragment
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type ApkProjectFileContentQueryVariables = Exact<{
  id: Scalars['ID'];
  fileId?: Maybe<Scalars['ID']>;
}>;


export type ApkProjectFileContentQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { file?: Maybe<(
        { __typename?: 'FileConnection' }
        & Pick<FileConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'File' }
          & FileWithContentFragment
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type ApkProjectFileTreeQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  path?: Maybe<Scalars['String']>;
  fileId?: Maybe<Scalars['ID']>;
}>;


export type ApkProjectFileTreeQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { file?: Maybe<(
        { __typename?: 'FileConnection' }
        & Pick<FileConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'File' }
          & Pick<File, 'id' | 'name' | 'type' | 'perm' | 'virtual'>
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type ApkProjectFileQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
  searchField?: Maybe<Scalars['String']>;
}>;


export type ApkProjectFileQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { file?: Maybe<(
        { __typename?: 'FileConnection' }
        & Pick<FileConnection, 'totalCount' | 'fieldValues'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'File' }
          & FileFragment
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type CvssRankStatisticsFragment = (
  { __typename?: 'CvssRankStatistics' }
  & Pick<CvssRankStatistics, 'risk' | 'count'>
);

export type CveFragment = (
  { __typename?: 'CVE' }
  & Pick<Cve, 'name' | 'cvssRank' | 'cvss' | 'status' | 'poc' | 'patch' | 'exp' | 'description' | 'file'>
  & { cvss3Info?: Maybe<(
    { __typename?: 'Cvss3Info' }
    & Pick<Cvss3Info, 'cvss' | 'attackVector' | 'attackComplexity' | 'privilegesRequired' | 'userInteraction' | 'scope' | 'confidentialityImpact' | 'integrityImpact' | 'availabilityImpact'>
  )>, cvss2Info?: Maybe<(
    { __typename?: 'Cvss2Info' }
    & Pick<Cvss2Info, 'cvss' | 'accessVector' | 'accessComplexity' | 'authentication' | 'confidentialityImpact' | 'integrityImpact' | 'availabilityImpact'>
  )> }
);

export type CveSecFragment = (
  { __typename?: 'CVESec' }
  & Pick<CveSec, 'component' | 'version' | 'description' | 'path' | 'errDescription'>
  & { risk: Array<(
    { __typename?: 'CvssRankStatistics' }
    & CvssRankStatisticsFragment
  )>, cve?: Maybe<Array<(
    { __typename?: 'CVE' }
    & CveFragment
  )>> }
);

export type ApkProjectCveSecQueryVariables = Exact<{
  id: Scalars['ID'];
  pid?: Maybe<Scalars['Int']>;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
  withCVE?: Maybe<Scalars['Boolean']>;
}>;


export type ApkProjectCveSecQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { libCveSec?: Maybe<(
        { __typename?: 'CVESecConnection' }
        & Pick<CveSecConnection, 'fieldValues' | 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'CVESec' }
          & Pick<CveSec, 'errDescription'>
          & CveSecFragment
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type LicenseTagFragment = (
  { __typename?: 'LicenseTag' }
  & Pick<LicenseTag, 'name' | 'type' | 'description'>
);

export type LicenseFragment = (
  { __typename?: 'License' }
  & MakeOptional<Pick<License, 'component' | 'description' | 'file'>, 'file'>
  & { license: Array<(
    { __typename?: 'LicenseDetail' }
    & MakeOptional<Pick<LicenseDetail, 'name' | 'source' | 'content' | 'risk'>, 'content'>
    & { required?: Maybe<Array<(
      { __typename?: 'LicenseTag' }
      & LicenseTagFragment
    )>>, forbidden?: Maybe<Array<(
      { __typename?: 'LicenseTag' }
      & LicenseTagFragment
    )>>, permitted?: Maybe<Array<(
      { __typename?: 'LicenseTag' }
      & LicenseTagFragment
    )>> }
  )>, risk: Array<(
    { __typename?: 'LicenseDetail' }
    & Pick<LicenseDetail, 'risk'>
  )> }
);

export type ApkProjectLicenseQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
  withContent?: Maybe<Scalars['Boolean']>;
  withFile?: Maybe<Scalars['Boolean']>;
}>;


export type ApkProjectLicenseQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & { license?: Maybe<(
        { __typename?: 'LicenseConnection' }
        & Pick<LicenseConnection, 'totalCount' | 'fieldValues' | 'fieldValuesWithCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'License' }
          & LicenseFragment
        )>> }
      )> }
    ) }
  )> }
  & ViewerFragment
);

export type ApkPositionQueryVariables = Exact<{
  id: Scalars['ID'];
  field: Scalars['Map'];
}>;


export type ApkPositionQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: { __typename?: 'SysReport' } | (
      { __typename?: 'ApkReport' }
      & Pick<ApkReport, 'position'>
    ) }
  )> }
  & ViewerFragment
);

export type RealtimeLogSubscriptionVariables = Exact<{
  id: Scalars['ID'];
}>;


export type RealtimeLogSubscription = (
  { __typename?: 'Subscription' }
  & { log: (
    { __typename?: 'Stream' }
    & Pick<Stream, 'content' | 'type'>
  ) }
);

export type EditPasswordMutationVariables = Exact<{
  cur: Scalars['String'];
  newPwd: Scalars['String'];
}>;


export type EditPasswordMutation = (
  { __typename?: 'Mutation' }
  & { editPassword?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id'>
  )> }
);

export type ExpiredLicenseQueryVariables = Exact<{ [key: string]: never; }>;


export type ExpiredLicenseQuery = (
  { __typename?: 'Query' }
  & { expiredLicense?: Maybe<(
    { __typename?: 'SystemLicense' }
    & Pick<SystemLicense, 'name' | 'version' | 'expireTime' | 'customerCompany'>
  )> }
);

export type FeatureConfigFragment = (
  { __typename?: 'FeatureConfig' }
  & Pick<FeatureConfig, 'systemLinux' | 'systemAndroid' | 'systemOther' | 'artifactAPK' | 'artifactRTOS' | 'artifactPackage' | 'uploadPackage' | 'uploadRTOSFirmware' | 'uploadImage' | 'uploadCDat' | 'uploadAPK' | 'plugin' | 'collector' | 'timesLimitEnabled'>
);

export type ReportFeatureConfigFragment = (
  { __typename?: 'ReportFeatureConfig' }
  & Pick<ReportFeatureConfig, 'baseline' | 'custom' | 'cveSec' | 'cveKernel' | 'license' | 'detail' | 'sensitive' | 'risk'>
);

export type FeatureConfigQueryVariables = Exact<{ [key: string]: never; }>;


export type FeatureConfigQuery = (
  { __typename?: 'Query' }
  & { feature: (
    { __typename?: 'FeatureConfig' }
    & FeatureConfigFragment
  ), reportFeature: (
    { __typename?: 'ReportFeatureConfig' }
    & ReportFeatureConfigFragment
  ) }
);

export type ViewerFragment = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'username' | 'nickname'>
    & { userRole: (
      { __typename?: 'Role' }
      & Pick<Role, 'id' | 'name' | 'permissions'>
    ) }
  )> }
);

export type ViewerQueryVariables = Exact<{ [key: string]: never; }>;


export type ViewerQuery = (
  { __typename?: 'Query' }
  & ViewerFragment
);

export type ReportQueryVariables = Exact<{
  teamName: Scalars['String'];
  projectName: Scalars['String'];
  analysisName: Scalars['String'];
  language: Language;
}>;


export type ReportQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
    & { project?: Maybe<(
      { __typename?: 'Project' }
      & { analysis?: Maybe<(
        { __typename?: 'Analysis' }
        & SysReportAnalysisFragment
        & ApkReportAnalysisFragment
      )> }
      & ProjectHomeFragment
    )> }
  )> }
  & ViewerFragment
);

export type LoginMutationVariables = Exact<{
  username: Scalars['String'];
  password: Scalars['String'];
}>;


export type LoginMutation = (
  { __typename?: 'Mutation' }
  & { loginByPassword?: Maybe<(
    { __typename?: 'LoginPayload' }
    & Pick<LoginPayload, 'token'>
  )> }
);

export type TeamUserItemFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'username'>
  & { teamRole?: Maybe<(
    { __typename?: 'Role' }
    & Pick<Role, 'id' | 'name'>
  )> }
);

export type TeamRoleQueryVariables = Exact<{ [key: string]: never; }>;


export type TeamRoleQuery = (
  { __typename?: 'Query' }
  & { teamRole?: Maybe<Array<(
    { __typename?: 'Role' }
    & Pick<Role, 'id' | 'name'>
  )>> }
);

export type TeamUserQueryVariables = Exact<{
  teamId: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type TeamUserQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<{ __typename?: 'Project' } | (
    { __typename?: 'Team' }
    & Pick<Team, 'id' | 'name'>
    & { manager: (
      { __typename?: 'TeamManager' }
      & { user?: Maybe<(
        { __typename?: 'UserConnection' }
        & Pick<UserConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'User' }
          & TeamUserItemFragment
        )>> }
      )> }
    ) }
  ) | { __typename?: 'Analysis' }> }
);

export type TeamTaskQueryVariables = Exact<{
  teamId: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type TeamTaskQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<{ __typename?: 'Project' } | (
    { __typename?: 'Team' }
    & Pick<Team, 'id' | 'name'>
    & { manager: (
      { __typename?: 'TeamManager' }
      & { task?: Maybe<(
        { __typename?: 'TaskConnection' }
        & Pick<TaskConnection, 'totalCount' | 'fieldValues'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'Task' }
          & TaskFragment
        )>> }
      )> }
    ) }
  ) | { __typename?: 'Analysis' }> }
);

export type TeamAddUserMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: TeamUserInput;
}>;


export type TeamAddUserMutation = (
  { __typename?: 'Mutation' }
  & { team: (
    { __typename?: 'TeamMutation' }
    & { addUser?: Maybe<(
      { __typename?: 'User' }
      & TeamUserItemFragment
    )> }
  ) }
);

export type TeamEditUserMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: TeamUserInput;
}>;


export type TeamEditUserMutation = (
  { __typename?: 'Mutation' }
  & { team: (
    { __typename?: 'TeamMutation' }
    & { editUser?: Maybe<(
      { __typename?: 'User' }
      & TeamUserItemFragment
    )> }
  ) }
);

export type TeamRemoveUserMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type TeamRemoveUserMutation = (
  { __typename?: 'Mutation' }
  & { team: (
    { __typename?: 'TeamMutation' }
    & { removeUser?: Maybe<Array<Maybe<(
      { __typename?: 'User' }
      & TeamUserItemFragment
    )>>> }
  ) }
);

export type AllRiskStatisticsFragment = (
  { __typename?: 'AllRiskStatistics' }
  & { baseline?: Maybe<Array<(
    { __typename?: 'CheckRiskStatistics' }
    & Pick<CheckRiskStatistics, 'risk' | 'count'>
  )>>, cve?: Maybe<Array<(
    { __typename?: 'CvssRankStatistics' }
    & Pick<CvssRankStatistics, 'risk' | 'count'>
  )>>, license?: Maybe<Array<(
    { __typename?: 'LicenseRiskStatistics' }
    & Pick<LicenseRiskStatistics, 'risk' | 'count'>
  )>> }
);

export type TeamOverviewRecentItemFragment = (
  { __typename?: 'Project' }
  & Pick<Project, 'id' | 'time' | 'name' | 'status'>
  & { risk: (
    { __typename?: 'AllRiskStatistics' }
    & AllRiskStatisticsFragment
  ) }
);

export type TeamIdQueryVariables = Exact<{
  name: Scalars['String'];
}>;


export type TeamIdQuery = (
  { __typename?: 'Query' }
  & { teamByName?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
  )> }
);

export type TeamLimitQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type TeamLimitQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<{ __typename?: 'Project' } | (
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
    & { timesLimit?: Maybe<(
      { __typename?: 'Limit' }
      & Pick<Limit, 'total' | 'used' | 'available'>
    )> }
  ) | { __typename?: 'Analysis' }> }
);

export type TeamOverviewQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type TeamOverviewQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<{ __typename?: 'Project' } | (
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
    & { timesLimit?: Maybe<(
      { __typename?: 'Limit' }
      & Pick<Limit, 'total' | 'used' | 'available'>
    )>, overview: (
      { __typename?: 'TeamOverview' }
      & { status: Array<(
        { __typename?: 'CommonStatusStatistics' }
        & Pick<CommonStatusStatistics, 'status' | 'count'>
      )>, risk: (
        { __typename?: 'AllRiskStatistics' }
        & AllRiskStatisticsFragment
      ), recentEvent?: Maybe<Array<(
        { __typename?: 'Project' }
        & TeamOverviewRecentItemFragment
      )>> }
    ), project?: Maybe<(
      { __typename?: 'ProjectConnection' }
      & Pick<ProjectConnection, 'totalCount'>
    )> }
  ) | { __typename?: 'Analysis' }> }
);

export type ProjectListItemFragment = (
  { __typename?: 'Project' }
  & Pick<Project, 'id' | 'name' | 'description' | 'status'>
  & { risk: (
    { __typename?: 'AllRiskStatistics' }
    & AllRiskStatisticsFragment
  ) }
);

export type ProjectListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type ProjectListQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<{ __typename?: 'Project' } | (
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
    & { project?: Maybe<(
      { __typename?: 'ProjectConnection' }
      & Pick<ProjectConnection, 'totalCount' | 'fieldValues'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Project' }
        & ProjectListItemFragment
      )>> }
    )> }
  ) | { __typename?: 'Analysis' }> }
);

export type ProjectNewMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: CreateProjectInput;
}>;


export type ProjectNewMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { createProject?: Maybe<(
      { __typename?: 'Project' }
      & ProjectListItemFragment
    )> }
  ) }
);

export type ProjectEditMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
}>;


export type ProjectEditMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { editProject?: Maybe<(
      { __typename?: 'Project' }
      & ProjectListItemFragment
    )> }
  ) }
);

export type ProjectDeleteMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type ProjectDeleteMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { deleteProject?: Maybe<Array<Maybe<(
      { __typename?: 'Project' }
      & ProjectListItemFragment
    )>>> }
  ) }
);

export type ProjectAnalyzeMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type ProjectAnalyzeMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { analyzeProject?: Maybe<Array<Maybe<(
      { __typename?: 'Project' }
      & ProjectListItemFragment
    )>>> }
  ) }
);

export type LimitFragment = (
  { __typename?: 'Limit' }
  & Pick<Limit, 'total' | 'used' | 'available' | 'allocated' | 'unallocated'>
);

export type TeamStatisticsFragment = (
  { __typename?: 'TeamStatistics' }
  & Pick<TeamStatistics, 'name' | 'project' | 'risk'>
  & { timesLimit?: Maybe<(
    { __typename?: 'Limit' }
    & LimitFragment
  )> }
);

export type OverviewRecentItemFragment = (
  { __typename?: 'Project' }
  & Pick<Project, 'id' | 'time' | 'name' | 'status'>
  & { team?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id' | 'name'>
  )>, risk: (
    { __typename?: 'AllRiskStatistics' }
    & AllRiskStatisticsFragment
  ) }
);

export type OverviewQueryVariables = Exact<{ [key: string]: never; }>;


export type OverviewQuery = (
  { __typename?: 'Query' }
  & { overview: (
    { __typename?: 'Overview' }
    & { status: Array<(
      { __typename?: 'CommonStatusStatistics' }
      & Pick<CommonStatusStatistics, 'status' | 'count'>
    )>, risk: (
      { __typename?: 'AllRiskStatistics' }
      & AllRiskStatisticsFragment
    ), team?: Maybe<Array<(
      { __typename?: 'TeamStatistics' }
      & TeamStatisticsFragment
    )>>, recentEvent?: Maybe<Array<(
      { __typename?: 'Project' }
      & OverviewRecentItemFragment
    )>> }
  ) }
);

export type TokenItemFragment = (
  { __typename?: 'Token' }
  & Pick<Token, 'id' | 'token' | 'createTime' | 'description'>
);

export type TokenListQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
}>;


export type TokenListQuery = (
  { __typename?: 'Query' }
  & { token?: Maybe<(
    { __typename?: 'TokenConnection' }
    & Pick<TokenConnection, 'totalCount'>
    & { nodes?: Maybe<Array<(
      { __typename?: 'Token' }
      & TokenItemFragment
    )>> }
  )> }
);

export type TokenNewMutationVariables = Exact<{
  input: CreateTokenInput;
}>;


export type TokenNewMutation = (
  { __typename?: 'Mutation' }
  & { token: (
    { __typename?: 'TokenMutation' }
    & { createToken?: Maybe<(
      { __typename?: 'Token' }
      & TokenItemFragment
    )> }
  ) }
);

export type TokenEditMutationVariables = Exact<{
  input: EditTokenInput;
}>;


export type TokenEditMutation = (
  { __typename?: 'Mutation' }
  & { token: (
    { __typename?: 'TokenMutation' }
    & { editToken?: Maybe<(
      { __typename?: 'Token' }
      & TokenItemFragment
    )> }
  ) }
);

export type TokenDeleteMutationVariables = Exact<{
  input: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type TokenDeleteMutation = (
  { __typename?: 'Mutation' }
  & { token: (
    { __typename?: 'TokenMutation' }
    & { deleteToken?: Maybe<Array<Maybe<(
      { __typename?: 'Token' }
      & TokenItemFragment
    )>>> }
  ) }
);

export type ProfileTeamListQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type ProfileTeamListQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<(
    { __typename?: 'TeamConnection' }
    & Pick<TeamConnection, 'totalCount'>
    & { nodes?: Maybe<Array<(
      { __typename?: 'Team' }
      & Pick<Team, 'id' | 'name'>
      & { viewerRole?: Maybe<(
        { __typename?: 'Role' }
        & Pick<Role, 'id' | 'name'>
      )> }
    )>> }
  )> }
);

export type AnalysisListFileItemFragment = (
  { __typename?: 'UploadFile' }
  & Pick<UploadFile, 'id' | 'name' | 'type' | 'analyzeParam' | 'time'>
);

export type AnalysisListItemFragment = (
  { __typename?: 'Analysis' }
  & Pick<Analysis, 'id' | 'name' | 'status' | 'analysisType' | 'description' | 'time' | 'displayID' | 'logSubID'>
  & { risk: (
    { __typename?: 'AllRiskStatistics' }
    & AllRiskStatisticsFragment
  ), file?: Maybe<Array<(
    { __typename?: 'UploadFile' }
    & AnalysisListFileItemFragment
  )>>, setting: (
    { __typename?: 'AnalysisSetting' }
    & AnalysisSettingFragment
  ) }
);

export type ProjectIdQueryVariables = Exact<{
  teamName: Scalars['String'];
  projectName: Scalars['String'];
}>;


export type ProjectIdQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
    & { project?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
    )> }
  )> }
  & ViewerFragment
);

export type ProjectChartQueryVariables = Exact<{
  projectId: Scalars['ID'];
  recentDays?: Maybe<Scalars['Int']>;
}>;


export type ProjectChartQuery = (
  { __typename?: 'Query' }
  & { project?: Maybe<(
    { __typename?: 'Project' }
    & Pick<Project, 'id'>
    & { chart?: Maybe<(
      { __typename?: 'AnalysisConnection' }
      & { nodes?: Maybe<Array<(
        { __typename?: 'Analysis' }
        & Pick<Analysis, 'id' | 'name' | 'time' | 'status'>
        & { risk: (
          { __typename?: 'AllRiskStatistics' }
          & AllRiskStatisticsFragment
        ) }
      )>> }
    )> }
  ) | { __typename?: 'Team' } | { __typename?: 'Analysis' }> }
  & ViewerFragment
);

export type AnalysisListQueryVariables = Exact<{
  projectId: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type AnalysisListQuery = (
  { __typename?: 'Query' }
  & { project?: Maybe<(
    { __typename?: 'Project' }
    & Pick<Project, 'id'>
    & { analysis?: Maybe<(
      { __typename?: 'AnalysisConnection' }
      & Pick<AnalysisConnection, 'totalCount' | 'fieldValues'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Analysis' }
        & AnalysisListItemFragment
      )>> }
    )> }
  ) | { __typename?: 'Team' } | { __typename?: 'Analysis' }> }
  & ViewerFragment
);

export type AnalysisDetailByIdQueryVariables = Exact<{
  analysisId: Scalars['ID'];
}>;


export type AnalysisDetailByIdQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & AnalysisListItemFragment
  )> }
);

export type GetAnalysisStatusQueryVariables = Exact<{
  analysisID: Scalars['ID'];
}>;


export type GetAnalysisStatusQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id' | 'status'>
  )> }
);

export type AnalysisDetailQueryVariables = Exact<{
  team: Scalars['String'];
  project: Scalars['String'];
  analysis: Scalars['String'];
}>;


export type AnalysisDetailQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
    & { project?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
      & { analysis?: Maybe<(
        { __typename?: 'Analysis' }
        & AnalysisListItemFragment
      )> }
    )> }
  )> }
  & ViewerFragment
);

export type CustomizedAuditFragment = (
  { __typename?: 'Rule' }
  & Pick<Rule, 'id' | 'ruleName' | 'time'>
);

export type AnalysisCustomizedAuditQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
}>;


export type AnalysisCustomizedAuditQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { customAudit?: Maybe<(
      { __typename?: 'RuleConnection' }
      & Pick<RuleConnection, 'totalCount'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Rule' }
        & CustomizedAuditFragment
      )>> }
    )> }
  )> }
);

export type AnalysisCustomizedAuditUndoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type AnalysisCustomizedAuditUndoMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { undoAudit?: Maybe<Array<Maybe<(
      { __typename?: 'Rule' }
      & CustomizedAuditFragment
    )>>> }
  ) }
);

export type AnalysisNewMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: CreateAnalysisInput;
}>;


export type AnalysisNewMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { createAnalysis?: Maybe<(
      { __typename?: 'Analysis' }
      & AnalysisListItemFragment
    )> }
  ) }
);

export type AnalysisEditMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: EditAnalysisInput;
}>;


export type AnalysisEditMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { editAnalysis?: Maybe<(
      { __typename?: 'Analysis' }
      & AnalysisListItemFragment
    )> }
  ) }
);

export type AnalysisEditFileMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: EditFileInput;
}>;


export type AnalysisEditFileMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { editFile?: Maybe<(
      { __typename?: 'Analysis' }
      & AnalysisListItemFragment
    )> }
  ) }
);

export type AnalysisDeleteMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type AnalysisDeleteMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { deleteAnalysis?: Maybe<Array<Maybe<(
      { __typename?: 'Analysis' }
      & AnalysisListItemFragment
    )>>> }
  ) }
);

export type AnalysisAnalyzeMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type AnalysisAnalyzeMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { analyzeAnalysis?: Maybe<Array<Maybe<(
      { __typename?: 'Analysis' }
      & AnalysisListItemFragment
    )>>> }
  ) }
);

export type AnalysisStopMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
}>;


export type AnalysisStopMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { stopAnalysis?: Maybe<(
      { __typename?: 'Analysis' }
      & AnalysisListItemFragment
    )> }
  ) }
);

export type AnalysisStatusSubscriptionVariables = Exact<{
  projectId: Scalars['ID'];
}>;


export type AnalysisStatusSubscription = (
  { __typename?: 'Subscription' }
  & { analysisStatus: (
    { __typename?: 'Analysis' }
    & AnalysisListItemFragment
  ) }
);

export type CollectorItemFragment = (
  { __typename?: 'Collector' }
  & Pick<Collector, 'id' | 'name' | 'description' | 'status' | 'time' | 'config' | 'logSubID'>
);

export type AnalysisCollectorQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
}>;


export type AnalysisCollectorQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { collector?: Maybe<(
      { __typename?: 'CollectorConnection' }
      & Pick<CollectorConnection, 'totalCount'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Collector' }
        & CollectorItemFragment
      )>> }
    )> }
  )> }
);

export type CollectorAddMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: AddCollectorInput;
}>;


export type CollectorAddMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { addCollector?: Maybe<(
      { __typename?: 'Collector' }
      & CollectorItemFragment
    )> }
  ) }
);

export type CollectorCollectMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
}>;


export type CollectorCollectMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { collectCollector?: Maybe<(
      { __typename?: 'Collector' }
      & CollectorItemFragment
    )> }
  ) }
);

export type CollectorStopMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
}>;


export type CollectorStopMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { stopCollector?: Maybe<(
      { __typename?: 'Collector' }
      & CollectorItemFragment
    )> }
  ) }
);

export type CollectorDeleteMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
}>;


export type CollectorDeleteMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { deleteCollector?: Maybe<(
      { __typename?: 'Collector' }
      & CollectorItemFragment
    )> }
  ) }
);

export type CollectorConfigMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: ConfigCollectorInput;
}>;


export type CollectorConfigMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { configCollector?: Maybe<(
      { __typename?: 'Collector' }
      & CollectorItemFragment
    )> }
  ) }
);

export type CollectorDetailQueryVariables = Exact<{
  team: Scalars['String'];
  project: Scalars['String'];
  analysis: Scalars['String'];
  collector: Scalars['String'];
}>;


export type CollectorDetailQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id'>
    & { project?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
      & { analysis?: Maybe<(
        { __typename?: 'Analysis' }
        & Pick<Analysis, 'id'>
        & { collector?: Maybe<(
          { __typename?: 'Collector' }
          & CollectorItemFragment
        )> }
      )> }
    )> }
  )> }
  & ViewerFragment
);

export type CollectorStatusSubscriptionVariables = Exact<{
  analysisID: Scalars['ID'];
}>;


export type CollectorStatusSubscription = (
  { __typename?: 'Subscription' }
  & { collectorStatus: (
    { __typename?: 'Collector' }
    & CollectorItemFragment
  ) }
);

export type TeamSelectListQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type TeamSelectListQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<(
    { __typename?: 'TeamConnection' }
    & Pick<TeamConnection, 'totalCount'>
    & { nodes?: Maybe<Array<(
      { __typename?: 'Team' }
      & Pick<Team, 'id' | 'name'>
    )>> }
  )> }
);

export type ManagementTeamSelectListQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type ManagementTeamSelectListQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { team?: Maybe<(
      { __typename?: 'TeamConnection' }
      & Pick<TeamConnection, 'totalCount'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Team' }
        & Pick<Team, 'id' | 'name'>
      )>> }
    )> }
  ) }
);

export type DiskStatusFragment = (
  { __typename?: 'DiskStatus' }
  & Pick<DiskStatus, 'totalSpace' | 'freeSpace' | 'occupiedSpace'>
);

export type PostgresStatusFragment = (
  { __typename?: 'PostgresStatus' }
  & Pick<PostgresStatus, 'totalSessionCount' | 'activeSessionCount' | 'idleSessionCount'>
);

export type StatusDiskQueryVariables = Exact<{ [key: string]: never; }>;


export type StatusDiskQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { systemStatus: (
      { __typename?: 'SystemStatus' }
      & { disk: (
        { __typename?: 'DiskStatus' }
        & DiskStatusFragment
      ) }
    ) }
  ) }
);

export type StatusPostgresQueryVariables = Exact<{ [key: string]: never; }>;


export type StatusPostgresQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { systemStatus: (
      { __typename?: 'SystemStatus' }
      & { postgres: (
        { __typename?: 'PostgresStatus' }
        & PostgresStatusFragment
      ) }
    ) }
  ) }
);

export type TeamListItemFragment = (
  { __typename?: 'Team' }
  & Pick<Team, 'id' | 'name' | 'createTime'>
  & { timesLimit?: Maybe<(
    { __typename?: 'Limit' }
    & Pick<Limit, 'total' | 'used' | 'available'>
  )> }
);

export type TeamListQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
}>;


export type TeamListQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { team?: Maybe<(
      { __typename?: 'TeamConnection' }
      & Pick<TeamConnection, 'totalCount'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Team' }
        & TeamListItemFragment
      )>> }
    )> }
  ) }
);

export type TeamNewMutationVariables = Exact<{
  name: Scalars['String'];
  timesLimit?: Maybe<Scalars['Int']>;
}>;


export type TeamNewMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { createTeam?: Maybe<(
      { __typename?: 'Team' }
      & TeamListItemFragment
    )> }
  ) }
);

export type TeamEditMutationVariables = Exact<{
  input: EditTeamInput;
}>;


export type TeamEditMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { editTeam?: Maybe<(
      { __typename?: 'Team' }
      & TeamListItemFragment
    )> }
  ) }
);

export type TeamDeleteMutationVariables = Exact<{
  ids: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type TeamDeleteMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { deleteTeam?: Maybe<Array<Maybe<(
      { __typename?: 'Team' }
      & TeamListItemFragment
    )>>> }
  ) }
);

export type UserListItemFragment = (
  { __typename?: 'User' }
  & Pick<User, 'id' | 'username' | 'nickname' | 'lastLoginTime'>
  & { userRole: (
    { __typename?: 'Role' }
    & Pick<Role, 'id' | 'name' | 'permissions'>
  ) }
);

export type UserListQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type UserListQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { user?: Maybe<(
      { __typename?: 'UserConnection' }
      & Pick<UserConnection, 'totalCount' | 'fieldValues'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'User' }
        & UserListItemFragment
      )>> }
    )> }
  ) }
);

export type UserNewMutationVariables = Exact<{
  user: CreateUserInput;
}>;


export type UserNewMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { createUser?: Maybe<(
      { __typename?: 'User' }
      & UserListItemFragment
    )> }
  ) }
);

export type UserEditMutationVariables = Exact<{
  user: EditUserInput;
}>;


export type UserEditMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { editUser?: Maybe<(
      { __typename?: 'User' }
      & UserListItemFragment
    )> }
  ) }
);

export type UserDeleteMutationVariables = Exact<{
  users: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type UserDeleteMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { deleteUser?: Maybe<Array<Maybe<(
      { __typename?: 'User' }
      & UserListItemFragment
    )>>> }
  ) }
);

export type SystemLicenseFragment = (
  { __typename?: 'SystemLicense' }
  & Pick<SystemLicense, 'name' | 'version' | 'expireTime' | 'customerCompany'>
);

export type LicenseQueryVariables = Exact<{ [key: string]: never; }>;


export type LicenseQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { license: Array<(
      { __typename?: 'SystemLicense' }
      & SystemLicenseFragment
    )> }
  ) }
);

export type UpdateLicenseMutationVariables = Exact<{
  content?: Maybe<Scalars['String']>;
  file?: Maybe<Scalars['Upload']>;
}>;


export type UpdateLicenseMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & Pick<ManagementMutation, 'updateLicense'>
  ) }
);

export type ManagementLogQueryVariables = Exact<{
  date?: Maybe<Scalars['Time']>;
}>;


export type ManagementLogQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & Pick<Management, 'hostname' | 'earliestLogDate'>
    & { log?: Maybe<(
      { __typename?: 'Log' }
      & Pick<Log, 'content' | 'type' | 'level'>
    )> }
  ) }
);

export type ManagementLimitQueryVariables = Exact<{ [key: string]: never; }>;


export type ManagementLimitQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { timesLimit?: Maybe<(
      { __typename?: 'Limit' }
      & Pick<Limit, 'total' | 'used' | 'available' | 'allocated' | 'unallocated'>
    )> }
  ) }
);

export type MgrProjectListItemFragment = (
  { __typename?: 'Project' }
  & Pick<Project, 'id' | 'name' | 'description' | 'status' | 'deleteTime'>
  & { risk: (
    { __typename?: 'AllRiskStatistics' }
    & AllRiskStatisticsFragment
  ), team?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id' | 'name'>
  )> }
);

export type MgrProjectListQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  delete?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type MgrProjectListQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { project?: Maybe<(
      { __typename?: 'ProjectConnection' }
      & Pick<ProjectConnection, 'totalCount' | 'fieldValues'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Project' }
        & MgrProjectListItemFragment
      )>> }
    )> }
  ) }
);

export type ProjectDeletePermanentlyMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ProjectDeletePermanentlyMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { permanentlyDeleteProject?: Maybe<Array<Maybe<(
      { __typename?: 'Project' }
      & MgrProjectListItemFragment
    )>>> }
  ) }
);

export type ProjectRestoreMutationVariables = Exact<{
  id: Scalars['ID'];
  rename?: Maybe<Scalars['String']>;
}>;


export type ProjectRestoreMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { restoreProject?: Maybe<(
      { __typename?: 'Project' }
      & MgrProjectListItemFragment
    )> }
  ) }
);

export type MgrAnalysisListItemFragment = (
  { __typename?: 'Analysis' }
  & Pick<Analysis, 'id' | 'name' | 'status' | 'description' | 'time' | 'deleteTime' | 'analysisType' | 'displayID'>
  & { risk: (
    { __typename?: 'AllRiskStatistics' }
    & AllRiskStatisticsFragment
  ), project?: Maybe<(
    { __typename?: 'Project' }
    & Pick<Project, 'id' | 'name' | 'deleteTime'>
    & { team?: Maybe<(
      { __typename?: 'Team' }
      & Pick<Team, 'id' | 'name'>
    )> }
  )> }
);

export type MgrAnalysisListQueryVariables = Exact<{
  projectId: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  delete?: Maybe<Scalars['Boolean']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type MgrAnalysisListQuery = (
  { __typename?: 'Query' }
  & { project?: Maybe<(
    { __typename?: 'Project' }
    & Pick<Project, 'id' | 'name'>
  ) | { __typename?: 'Team' } | { __typename?: 'Analysis' }>, management: (
    { __typename?: 'Management' }
    & { analysis?: Maybe<(
      { __typename?: 'AnalysisConnection' }
      & Pick<AnalysisConnection, 'totalCount' | 'fieldValues'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Analysis' }
        & MgrAnalysisListItemFragment
      )>> }
    )> }
  ) }
);

export type AnalysisDeletePermanentlyMutationVariables = Exact<{
  id: Scalars['ID'];
}>;


export type AnalysisDeletePermanentlyMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { permanentlyDeleteAnalysis?: Maybe<Array<Maybe<(
      { __typename?: 'Analysis' }
      & MgrAnalysisListItemFragment
    )>>> }
  ) }
);

export type AnalysisRestoreMutationVariables = Exact<{
  id: Scalars['ID'];
  rename?: Maybe<Scalars['String']>;
}>;


export type AnalysisRestoreMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { restoreAnalysis?: Maybe<(
      { __typename?: 'Analysis' }
      & MgrAnalysisListItemFragment
    )> }
  ) }
);

export type TeamQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type TeamQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { team?: Maybe<(
      { __typename?: 'TeamConnection' }
      & Pick<TeamConnection, 'totalCount'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Team' }
        & Pick<Team, 'id' | 'name'>
      )>> }
    )> }
  ) }
);

export type RoleQueryVariables = Exact<{ [key: string]: never; }>;


export type RoleQuery = (
  { __typename?: 'Query' }
  & { userRole?: Maybe<Array<(
    { __typename?: 'Role' }
    & Pick<Role, 'id' | 'name'>
  )>> }
);

export type ViewerTeamRoleQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type ViewerTeamRoleQuery = (
  { __typename?: 'Query' }
  & { viewer?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { teamRole?: Maybe<(
      { __typename?: 'Role' }
      & Pick<Role, 'id' | 'permissions'>
    )> }
  )> }
);

export type PickUserQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type PickUserQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'PickUserConnection' }
    & Pick<PickUserConnection, 'totalCount'>
    & { nodes?: Maybe<Array<(
      { __typename?: 'PickUser' }
      & Pick<PickUser, 'id' | 'username'>
    )>> }
  )> }
);

export type PickProjectQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  teamId: Scalars['ID'];
}>;


export type PickProjectQuery = (
  { __typename?: 'Query' }
  & { team?: Maybe<{ __typename?: 'Project' } | (
    { __typename?: 'Team' }
    & { project?: Maybe<(
      { __typename?: 'ProjectConnection' }
      & { nodes?: Maybe<Array<(
        { __typename?: 'Project' }
        & ProjectListItemFragment
      )>> }
    )> }
  ) | { __typename?: 'Analysis' }> }
);

export type DownloadTokenQueryVariables = Exact<{ [key: string]: never; }>;


export type DownloadTokenQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'downloadToken'>
);

export type AgentFragment = (
  { __typename?: 'Agent' }
  & Pick<Agent, 'id' | 'displayID' | 'name' | 'token' | 'time' | 'status' | 'error' | 'version'>
);

export type ManagementAgentQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type ManagementAgentQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { agent?: Maybe<(
      { __typename?: 'AgentConnection' }
      & Pick<AgentConnection, 'totalCount'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Agent' }
        & AgentFragment
      )>> }
    )> }
  ) }
);

export type TaskFragment = (
  { __typename?: 'Task' }
  & Pick<Task, 'id' | 'displayID' | 'status' | 'time' | 'command' | 'userName' | 'teamName'>
  & { analysis?: Maybe<(
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id' | 'displayID' | 'name' | 'deleteTime'>
    & { project?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id' | 'name'>
      & { team?: Maybe<(
        { __typename?: 'Team' }
        & Pick<Team, 'id' | 'name'>
      )> }
    )> }
  )>, agent?: Maybe<(
    { __typename?: 'Agent' }
    & Pick<Agent, 'id' | 'name' | 'displayID'>
  )> }
);

export type ManagementTaskQueryVariables = Exact<{
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type ManagementTaskQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { task?: Maybe<(
      { __typename?: 'TaskConnection' }
      & Pick<TaskConnection, 'totalCount' | 'fieldValues'>
      & { nodes?: Maybe<Array<(
        { __typename?: 'Task' }
        & TaskFragment
      )>> }
    )> }
  ) }
);

export type ManagementAgentNewMutationVariables = Exact<{
  input: CreateAgentInput;
}>;


export type ManagementAgentNewMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { createAgent?: Maybe<(
      { __typename?: 'Agent' }
      & AgentFragment
    )> }
  ) }
);

export type ManagementAgentDeleteMutationVariables = Exact<{
  input: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type ManagementAgentDeleteMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { deleteAgent?: Maybe<Array<Maybe<(
      { __typename?: 'Agent' }
      & AgentFragment
    )>>> }
  ) }
);

export type ManagementAgentEditMutationVariables = Exact<{
  input: EditAgentInput;
}>;


export type ManagementAgentEditMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { editAgent?: Maybe<(
      { __typename?: 'Agent' }
      & AgentFragment
    )> }
  ) }
);

export type DependenceQueryVariables = Exact<{ [key: string]: never; }>;


export type DependenceQuery = (
  { __typename?: 'Query' }
  & { dependence: (
    { __typename?: 'Dependence' }
    & Pick<Dependence, 'latex'>
  ) }
);

export type CreateAnalysisFastMutationVariables = Exact<{
  input: CreateAnalysisFastInput;
  teamId: Scalars['ID'];
}>;


export type CreateAnalysisFastMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { createAnalysisFast?: Maybe<(
      { __typename?: 'Analysis' }
      & Pick<Analysis, 'id'>
    )> }
  ) }
);

export type UpdateTokenMutationVariables = Exact<{ [key: string]: never; }>;


export type UpdateTokenMutation = (
  { __typename?: 'Mutation' }
  & { token: (
    { __typename?: 'TokenMutation' }
    & { activateToken?: Maybe<(
      { __typename?: 'Token' }
      & Pick<Token, 'id'>
    )> }
  ) }
);

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'logout'>
);

export type SystemSettingFragment = (
  { __typename?: 'SystemSetting' }
  & Pick<SystemSetting, 'singleUpload' | 'maxSingleUpload' | 'analyzeTimeout' | 'sessionExpTime' | 'logLevel'>
);

export type SystemSettingQueryVariables = Exact<{ [key: string]: never; }>;


export type SystemSettingQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { systemSetting: (
      { __typename?: 'SystemSetting' }
      & SystemSettingFragment
    ) }
  ) }
);

export type UpdateSystemSettingMutationVariables = Exact<{
  input: SystemSettingInput;
}>;


export type UpdateSystemSettingMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { settingMutation: (
      { __typename?: 'SettingMutation' }
      & { systemSetting?: Maybe<(
        { __typename?: 'SystemSetting' }
        & SystemSettingFragment
      )> }
    ) }
  ) }
);

export type SamlSettingFragment = (
  { __typename?: 'SAMLSetting' }
  & Pick<SamlSetting, 'enabled' | 'url' | 'metaData' | 'autoCreateUser'>
  & { autoJoinTeam?: Maybe<(
    { __typename?: 'Team' }
    & Pick<Team, 'id' | 'name'>
  )>, autoJoinTeamRole?: Maybe<(
    { __typename?: 'Role' }
    & Pick<Role, 'id'>
  )> }
);

export type SamlSettingQueryVariables = Exact<{ [key: string]: never; }>;


export type SamlSettingQuery = (
  { __typename?: 'Query' }
  & { management: (
    { __typename?: 'Management' }
    & { SAMLSetting: (
      { __typename?: 'SAMLSetting' }
      & SamlSettingFragment
    ) }
  ) }
);

export type UpdateSamlSettingMutationVariables = Exact<{
  input: SamlSettingInput;
}>;


export type UpdateSamlSettingMutation = (
  { __typename?: 'Mutation' }
  & { management: (
    { __typename?: 'ManagementMutation' }
    & { settingMutation: (
      { __typename?: 'SettingMutation' }
      & { SAMLSetting?: Maybe<(
        { __typename?: 'SAMLSetting' }
        & SamlSettingFragment
      )> }
    ) }
  ) }
);

export type AnalysisSettingFragment = (
  { __typename?: 'AnalysisSetting' }
  & Pick<AnalysisSetting, 'analyzeTimeout' | 'fileType' | 'fileSkiped'>
);

export type UpdateAnalysisSettingMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: EditAnalysisSettingInput;
}>;


export type UpdateAnalysisSettingMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { editAnalysisSetting?: Maybe<(
      { __typename?: 'AnalysisSetting' }
      & AnalysisSettingFragment
    )> }
  ) }
);

export type ProjectOptionFragment = (
  { __typename?: 'NewTaskAttributeRsp' }
  & Pick<NewTaskAttributeRsp, 'id' | 'name'>
);

export type ProjectTaskItemListQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type ProjectTaskItemListQuery = (
  { __typename?: 'Query' }
  & { projectTaskItemList?: Maybe<(
    { __typename?: 'ProjectTaskItemList' }
    & { carModelList?: Maybe<Array<Maybe<(
      { __typename?: 'NewTaskAttributeRsp' }
      & ProjectOptionFragment
    )>>>, principalList?: Maybe<Array<Maybe<(
      { __typename?: 'NewTaskAttributeRsp' }
      & ProjectOptionFragment
    )>>>, lawList?: Maybe<Array<Maybe<(
      { __typename?: 'NewTaskAttributeRsp' }
      & ProjectOptionFragment
    )>>>, modelList?: Maybe<Array<Maybe<(
      { __typename?: 'NewTaskAttributeRsp' }
      & ProjectOptionFragment
    )>>> }
  )> }
);

export type TestResultObjectFragment = (
  { __typename?: 'ProjectTestResultRsp' }
  & Pick<ProjectTestResultRsp, 'passNumber' | 'unPassNumber' | 'unTestNumber' | 'ignoreNumber' | 'caseNumber' | 'passRate' | 'testingNumber'>
);

export type ProjectListObjectFragment = (
  { __typename?: 'ProjectInfo' }
  & Pick<ProjectInfo, 'id' | 'name' | 'submitTime' | 'dutyUser' | 'taskStatus' | 'lawStandard' | 'carModel' | 'module' | 'version' | 'caseNumber'>
  & { testResult?: Maybe<(
    { __typename?: 'ProjectTestResultRsp' }
    & TestResultObjectFragment
  )> }
);

export type ComplianceProjectListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type ComplianceProjectListQuery = (
  { __typename?: 'Query' }
  & { projectList?: Maybe<(
    { __typename?: 'ProjectInfoRsp' }
    & Pick<ProjectInfoRsp, 'count'>
    & { projectInfo?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectInfo' }
      & ProjectListObjectFragment
    )>>> }
  )> }
);

export type CreateProjectMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: CreateProjectInput;
}>;


export type CreateProjectMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { createProject?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
    )> }
  ) }
);

export type CarInfoObjectFragment = (
  { __typename?: 'CarInfoStatisFuse' }
  & Pick<CarInfoStatisFuse, 'modelName' | 'value' | 'checkStatueMsg'>
);

export type ModuleInfoObjectFragment = (
  { __typename?: 'ModuleInfoStatis' }
  & Pick<ModuleInfoStatis, 'modelName' | 'number'>
);

export type TeamOverviewRspObjectFragment = (
  { __typename?: 'TeamOverviewRsp' }
  & Pick<TeamOverviewRsp, 'projectNumber' | 'checkingNumber' | 'passNumber' | 'unPassNumber' | 'passingRate' | 'unCheckedNumber'>
  & { carInfoList?: Maybe<Array<Maybe<(
    { __typename?: 'CarInfoStatisFuse' }
    & CarInfoObjectFragment
  )>>>, moduleInfoList?: Maybe<Array<Maybe<(
    { __typename?: 'ModuleInfoStatis' }
    & ModuleInfoObjectFragment
  )>>> }
);

export type ComplianceTeamOverviewQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type ComplianceTeamOverviewQuery = (
  { __typename?: 'Query' }
  & { teamOverview?: Maybe<(
    { __typename?: 'TeamOverviewRsp' }
    & TeamOverviewRspObjectFragment
  )> }
);

export type RecentStatisticsQueryVariables = Exact<{
  teamId: Scalars['ID'];
  searchDay?: Maybe<Scalars['Int']>;
}>;


export type RecentStatisticsQuery = (
  { __typename?: 'Query' }
  & { recentStatistics?: Maybe<Array<Maybe<(
    { __typename?: 'RecentStatisticsRsp' }
    & Pick<RecentStatisticsRsp, 'statTime' | 'number'>
  )>>> }
);

export type ProjectDetailsObjectFragment = (
  { __typename?: 'ProjectInfo' }
  & Pick<ProjectInfo, 'name' | 'version' | 'caseNumber' | 'carModel' | 'submitTime' | 'id' | 'dutyUser' | 'dutyUserId' | 'taskStatus' | 'lawStandard' | 'module' | 'messages'>
);

export type _TestResultObjectFragment = (
  { __typename?: 'ProjectTestResultRsp' }
  & Pick<ProjectTestResultRsp, 'passRate' | 'passNumber' | 'ignoreNumber' | 'unPassNumber' | 'unTestNumber' | 'caseNumber' | 'testingNumber'>
);

export type ToolResultObjectFragment = (
  { __typename?: 'ToolItemRsp' }
  & Pick<ToolItemRsp, 'id' | 'name' | 'projectId' | 'projectName' | 'status' | 'dutyUser'>
);

export type _ToolResultObjectFragment = (
  { __typename?: 'ProjectTestResultRsp' }
  & Pick<ProjectTestResultRsp, 'passNumber' | 'unPassNumber' | 'unTestNumber' | 'ignoreNumber' | 'caseNumber' | 'passRate'>
);

export type _ComplianceResultFragment = (
  { __typename?: 'CatalogueTestResultRsp' }
  & Pick<CatalogueTestResultRsp, 'passNumber' | 'unPassNumber' | 'unTestNumber' | 'ignoreNumber' | 'passRate' | 'catalogueNumber'>
);

export type ProjectDetailsQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type ProjectDetailsQuery = (
  { __typename?: 'Query' }
  & { projectDetails?: Maybe<(
    { __typename?: 'ProjectDetailsRsp' }
    & { projectResult?: Maybe<(
      { __typename?: 'ProjectInfo' }
      & Pick<ProjectInfo, 'testDeviceId'>
      & { testResult?: Maybe<(
        { __typename?: 'ProjectTestResultRsp' }
        & _TestResultObjectFragment
      )>, caseResultAlertNumber?: Maybe<(
        { __typename?: 'ProjectCaseResultCount' }
        & Pick<ProjectCaseResultCount, 'autoCaseCount' | 'semiAutomaticCaseCount' | 'manualCaseCount'>
      )>, testObject?: Maybe<(
        { __typename?: 'ProjectTestObjectInfo' }
        & Pick<ProjectTestObjectInfo, 'autoPartsName' | 'systemName' | 'systemType' | 'systemVersion'>
      )> }
      & ProjectDetailsObjectFragment
    )> }
  )>, complianceResult?: Maybe<(
    { __typename?: 'CatalogueTestResultRsp' }
    & _ComplianceResultFragment
  )> }
);

export type CaseClassifyResultRepObjFragment = (
  { __typename?: 'CaseClassifyResultRep' }
  & Pick<CaseClassifyResultRep, 'caseId' | 'caseSerialNumber' | 'caseName' | 'taskStatus' | 'checkTool' | 'hanlder' | 'lawCatalogueId'>
);

export type LawCatalogueCheckDetailpObjFragment = (
  { __typename?: 'LawCatalogueCheckDetailRep' }
  & Pick<LawCatalogueCheckDetailRep, 'lawName' | 'lawCatalogueId' | 'dutyLawCatalogueName' | 'dutyLawClassify1' | 'dutyLawClassify2' | 'dutyLawClassify3' | 'dutyLawClassify4' | 'dutyLawClassify5' | 'checkResultCount' | 'checkPassResultCount' | 'checkUnPassNumberCount' | 'checkIgnoreNumberCount' | 'checkUnTestNumberCount' | 'passStatus'>
  & { caseClassifyResultRep?: Maybe<Array<Maybe<(
    { __typename?: 'CaseClassifyResultRep' }
    & CaseClassifyResultRepObjFragment
  )>>> }
);

export type LawCatalogueCheckDetailQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type LawCatalogueCheckDetailQuery = (
  { __typename?: 'Query' }
  & { lawCatalogueCheckDetail: Array<Maybe<(
    { __typename?: 'LawCatalogueCheckDetailRep' }
    & LawCatalogueCheckDetailpObjFragment
  )>> }
);

export type ChangeProjectHistoryQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type ChangeProjectHistoryQuery = (
  { __typename?: 'Query' }
  & { changeProjectHistory?: Maybe<(
    { __typename?: 'HistoryRep' }
    & Pick<HistoryRep, 'count'>
    & { history?: Maybe<Array<Maybe<(
      { __typename?: 'History' }
      & Pick<History, 'id' | 'changeTime' | 'changeUser' | 'changeObject' | 'changematter'>
    )>>> }
  )> }
);

export type MyItemsGetCaseListByUserIdQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type MyItemsGetCaseListByUserIdQuery = (
  { __typename?: 'Query' }
  & { myItems?: Maybe<(
    { __typename?: 'MyItemsInterfaceRsp' }
    & { getCaseListByUserId?: Maybe<Array<Maybe<(
      { __typename?: 'CaseItemRsp' }
      & Pick<CaseItemRsp, 'id' | 'caseName' | 'projectName' | 'projectId' | 'toolId' | 'toolName' | 'status'>
    )>>> }
  )> }
);

export type MyItemsGetProjectListByUserIdQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type MyItemsGetProjectListByUserIdQuery = (
  { __typename?: 'Query' }
  & { myItems?: Maybe<(
    { __typename?: 'MyItemsInterfaceRsp' }
    & { getProjectListByUserId?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectInfo' }
      & Pick<ProjectInfo, 'id' | 'name' | 'submitTime' | 'dutyUser' | 'lawStandard' | 'carModel' | 'module' | 'version' | 'caseNumber'>
      & { testResult?: Maybe<(
        { __typename?: 'ProjectTestResultRsp' }
        & Pick<ProjectTestResultRsp, 'passNumber' | 'unPassNumber' | 'unTestNumber' | 'ignoreNumber' | 'caseNumber' | 'passRate'>
      )> }
    )>>> }
  )> }
);

export type MyItemsGetToolListByUserIdQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type MyItemsGetToolListByUserIdQuery = (
  { __typename?: 'Query' }
  & { myItems?: Maybe<(
    { __typename?: 'MyItemsInterfaceRsp' }
    & { getToolListByUserId?: Maybe<Array<Maybe<(
      { __typename?: 'ToolItemRsp' }
      & Pick<ToolItemRsp, 'id' | 'name' | 'projectId' | 'projectName' | 'status' | 'dutyUser'>
      & { toolResult: (
        { __typename?: 'ProjectTestResultRsp' }
        & Pick<ProjectTestResultRsp, 'passNumber' | 'unPassNumber' | 'unTestNumber' | 'ignoreNumber' | 'caseNumber' | 'passRate'>
      ) }
    )>>> }
  )> }
);

export type MyItemsCountQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type MyItemsCountQuery = (
  { __typename?: 'Query' }
  & { myItems?: Maybe<(
    { __typename?: 'MyItemsInterfaceRsp' }
    & { count?: Maybe<(
      { __typename?: 'MyItemsCount' }
      & Pick<MyItemsCount, 'projectCount' | 'caseCount' | 'toolCount'>
    )> }
  )> }
);

export type CaseOfToolResultQueryVariables = Exact<{
  teamId: Scalars['ID'];
  toolID: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type CaseOfToolResultQuery = (
  { __typename?: 'Query' }
  & { caseOfToolResult: (
    { __typename?: 'CaseOfToolResultRsp' }
    & { toolItemBase: (
      { __typename?: 'ToolItemRsp' }
      & Pick<ToolItemRsp, 'id' | 'name' | 'projectId' | 'projectName' | 'status' | 'dutyUser'>
      & { toolResult: (
        { __typename?: 'ProjectTestResultRsp' }
        & Pick<ProjectTestResultRsp, 'passNumber' | 'unPassNumber' | 'unTestNumber' | 'ignoreNumber' | 'caseNumber' | 'passRate'>
      ) }
    ), caseResult?: Maybe<Array<(
      { __typename?: 'CaseResult' }
      & Pick<CaseResult, 'id' | 'caseName' | 'status' | 'handlerUser' | 'catalogue'>
    )>> }
  ) }
);

export type CaseResultDetailQueryVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type CaseResultDetailQuery = (
  { __typename?: 'Query' }
  & { caseResultDetail?: Maybe<(
    { __typename?: 'CaseDetailRsp' }
    & Pick<CaseDetailRsp, 'caseResultId' | 'caseId' | 'projectId' | 'projectName' | 'caseName' | 'caseCheckStatus' | 'dutyLawName' | 'dutyLawCatalogueName' | 'dutyLawClassify1' | 'dutyLawClassify2' | 'dutyLawClassify3' | 'dutyLawClassify4' | 'dutyLawClassify5' | 'checkMethod' | 'testCaseStep' | 'resultStandard' | 'resultSuccess' | 'resultFail'>
  )> }
);

export type SysMessageQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type SysMessageQuery = (
  { __typename?: 'Query' }
  & { sysMessage?: Maybe<Array<(
    { __typename?: 'SysMessageRsp' }
    & Pick<SysMessageRsp, 'occTime' | 'message'>
  )>> }
);

export type ComplianceDeleteProjectMutationVariables = Exact<{
  teamId: Scalars['ID'];
  input: Array<Scalars['ID']> | Scalars['ID'];
}>;


export type ComplianceDeleteProjectMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { deleteProject?: Maybe<Array<Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
    )>>> }
  ) }
);

export type EndTaskMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  status?: Maybe<Scalars['Int']>;
}>;


export type EndTaskMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { editProject?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
    )> }
  ) }
);

export type ResetToolResultMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  toolID?: Maybe<Scalars['ID']>;
}>;


export type ResetToolResultMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'resetToolResult'>
);

export type ResetCaseResultMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  caseIds?: Maybe<Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>>;
}>;


export type ResetCaseResultMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'resetToolResult'>
);

export type GetCaseAllStepQueryVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type GetCaseAllStepQuery = (
  { __typename?: 'Query' }
  & { getCaseAllStep?: Maybe<(
    { __typename?: 'GetCaseAllStepRsp' }
    & Pick<GetCaseAllStepRsp, 'currentCaseStepIndex' | 'caseId' | 'caseName' | 'caseStatus' | 'projectStatus'>
    & { stepInfoList?: Maybe<Array<Maybe<(
      { __typename?: 'StepInfo' }
      & Pick<StepInfo, 'stepId' | 'stepName'>
    )>>> }
  )> }
);

export type GetCaseDetailQueryVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type GetCaseDetailQuery = (
  { __typename?: 'Query' }
  & { getCaseAllStep?: Maybe<(
    { __typename?: 'GetCaseAllStepRsp' }
    & Pick<GetCaseAllStepRsp, 'currentCaseStepIndex' | 'caseId' | 'caseName' | 'caseStatus' | 'projectStatus'>
    & { stepInfoList?: Maybe<Array<Maybe<(
      { __typename?: 'StepInfo' }
      & Pick<StepInfo, 'stepId' | 'stepName'>
    )>>> }
  )> }
);

export type GetCaseStepDetailQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
}>;


export type GetCaseStepDetailQuery = (
  { __typename?: 'Query' }
  & { getCaseStepDetail: (
    { __typename?: 'StepBaseV2' }
    & Pick<StepBaseV2, 'stepName' | 'stepDesc' | 'stepType' | 'markdown' | 'config' | 'result' | 'caseEnable' | 'resetCheckEnable'>
  ) }
);

export type GetStepResultQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
}>;


export type GetStepResultQuery = (
  { __typename?: 'Query' }
  & { getStepResult?: Maybe<(
    { __typename?: 'StepResult' }
    & Pick<StepResult, 'clientStatus' | 'stepStatus' | 'result'>
    & { stepIndex: StepResult['setpIndex'] }
  )> }
);

export type GetProjectAutoTaskProgressQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type GetProjectAutoTaskProgressQuery = (
  { __typename?: 'Query' }
  & { getProjectAutoTaskProgress?: Maybe<(
    { __typename?: 'DetectionProgress' }
    & Pick<DetectionProgress, 'maxIndex' | 'index' | 'alert' | 'alertMessage'>
  )> }
);

export type CaseResultListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type CaseResultListQuery = (
  { __typename?: 'Query' }
  & { caseResultList?: Maybe<(
    { __typename?: 'CaseResultListRsp' }
    & Pick<CaseResultListRsp, 'count'>
    & { caseResultList: Array<Maybe<(
      { __typename?: 'CaseResult' }
      & Pick<CaseResult, 'id' | 'caseId' | 'serialNumber' | 'caseName' | 'status' | 'handlerUser' | 'catalogue' | 'lawCatalogueId' | 'classifyName' | 'classifyId' | 'operatingSystemName' | 'operatingSystemID' | 'riskLevelName' | 'riskLevelType' | 'riskLevelId' | 'testMethodName' | 'testMethodId'>
    )>> }
  )> }
);

export type GetCatalogueDetailQueryVariables = Exact<{
  caseId: Scalars['ID'];
}>;


export type GetCatalogueDetailQuery = (
  { __typename?: 'Query' }
  & { getCatalogueDetail?: Maybe<Array<Maybe<(
    { __typename?: 'LawCatalogueBaseDetail' }
    & Pick<LawCatalogueBaseDetail, 'lawName' | 'lawCatalogueId' | 'dutyLawCatalogueName' | 'dutyLawClassify1' | 'dutyLawClassify2' | 'dutyLawClassify3' | 'dutyLawClassify4' | 'dutyLawClassify5' | 'description'>
  )>>> }
);

export type SubmitResultMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  actionName: Scalars['String'];
  value?: Maybe<Scalars['String']>;
}>;


export type SubmitResultMutation = (
  { __typename?: 'Mutation' }
  & { submitResult: (
    { __typename?: 'ActionPushResult' }
    & Pick<ActionPushResult, 'result'>
  ) }
);

export type NextStepSubmitResultMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  caseId: Scalars['ID'];
  stepId: Scalars['ID'];
  result?: Maybe<Scalars['String']>;
}>;


export type NextStepSubmitResultMutation = (
  { __typename?: 'Mutation' }
  & { nextStepSubmitResult: (
    { __typename?: 'StepInfo' }
    & Pick<StepInfo, 'stepId' | 'stepName' | 'stepTestJson'>
  ) }
);

export type StartProjectDetectionMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type StartProjectDetectionMutation = (
  { __typename?: 'Mutation' }
  & { startProjectDetection?: Maybe<(
    { __typename?: 'Project' }
    & Pick<Project, 'id' | 'name'>
  )> }
);

export type ChangeCaseStatusMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  cmd: Scalars['Int'];
}>;


export type ChangeCaseStatusMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'changeCaseStatus'>
);

export type ResetStepCheckedResultMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
}>;


export type ResetStepCheckedResultMutation = (
  { __typename?: 'Mutation' }
  & { resetStepCheckedResult: (
    { __typename?: 'StepInfo' }
    & Pick<StepInfo, 'stepId' | 'stepName' | 'stepTestJson'>
  ) }
);

export type StopProjectMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type StopProjectMutation = (
  { __typename?: 'Mutation' }
  & { stopProject?: Maybe<(
    { __typename?: 'Project' }
    & Pick<Project, 'id'>
  )> }
);

export type ResetProjectMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type ResetProjectMutation = (
  { __typename?: 'Mutation' }
  & { resetProject?: Maybe<(
    { __typename?: 'Project' }
    & Pick<Project, 'id' | 'name'>
  )> }
);

export type GetLawListQueryVariables = Exact<{ [key: string]: never; }>;


export type GetLawListQuery = (
  { __typename?: 'Query' }
  & { getLawList?: Maybe<Array<Maybe<(
    { __typename?: 'LawInfo' }
    & Pick<LawInfo, 'title' | 'lawId' | 'count'>
    & { catalogueList?: Maybe<Array<Maybe<(
      { __typename?: 'LawCatalogueBaseDetail' }
      & Pick<LawCatalogueBaseDetail, 'dutyLawClassify1'>
    )>>> }
  )>>> }
);

export type LawDetailQueryVariables = Exact<{
  lawId: Scalars['ID'];
}>;


export type LawDetailQuery = (
  { __typename?: 'Query' }
  & { lawDetail?: Maybe<(
    { __typename?: 'LawDeatilMd' }
    & Pick<LawDeatilMd, 'title' | 'markDown'>
  )> }
);

export type CarInfoListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type CarInfoListQuery = (
  { __typename?: 'Query' }
  & { carInfoList: (
    { __typename?: 'CarInfoRep' }
    & Pick<CarInfoRep, 'count'>
    & { carList: Array<Maybe<(
      { __typename?: 'CarInfo' }
      & Pick<CarInfo, 'id' | 'modelName' | 'description' | 'collectorConfig' | 'terminalModelInfos' | 'collectorResultUrl' | 'collectStatus' | 'collectorProgress' | 'collectorProgressMax' | 'createUserName' | 'createTimeFormart'>
    )>> }
  ) }
);

export type EditCarInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  modelName?: Maybe<Scalars['String']>;
  collectorResultUrl?: Maybe<Scalars['String']>;
}>;


export type EditCarInfoMutation = (
  { __typename?: 'Mutation' }
  & { editCarInfo: (
    { __typename?: 'CarInfo' }
    & Pick<CarInfo, 'id'>
  ) }
);

export type DelCarInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
}>;


export type DelCarInfoMutation = (
  { __typename?: 'Mutation' }
  & { delCarInfo: (
    { __typename?: 'CarInfo' }
    & Pick<CarInfo, 'id'>
  ) }
);

export type CreateNewCarIInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  modelName: Scalars['String'];
  description?: Maybe<Scalars['String']>;
}>;


export type CreateNewCarIInfoMutation = (
  { __typename?: 'Mutation' }
  & { createNewCarIInfo: (
    { __typename?: 'CarInfo' }
    & Pick<CarInfo, 'id'>
  ) }
);

export type CollectorCarInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  connectionCmd?: Maybe<Scalars['String']>;
}>;


export type CollectorCarInfoMutation = (
  { __typename?: 'Mutation' }
  & { collectorCarInfo: (
    { __typename?: 'CarInfo' }
    & Pick<CarInfo, 'id'>
  ) }
);

export type GetApkSelectorListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type GetApkSelectorListQuery = (
  { __typename?: 'Query' }
  & { getApkSelectorList?: Maybe<Array<Maybe<(
    { __typename?: 'ApkSelectorInfo' }
    & Pick<ApkSelectorInfo, 'appName' | 'packageName'>
  )>>> }
);

export type SubmitSelectorListMutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectID: Scalars['ID'];
  result?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
}>;


export type SubmitSelectorListMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'submitSelectorList'>
);

export type ReportViewActionQueryVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  caseStepId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type ReportViewActionQuery = (
  { __typename?: 'Query' }
  & { reportViewAction?: Maybe<(
    { __typename?: 'ReportViewActionRsp' }
    & Pick<ReportViewActionRsp, 'count' | 'type' | 'toolType'>
    & { caseReportList: Array<Maybe<(
      { __typename?: 'CaseReport' }
      & Pick<CaseReport, 'appName' | 'sysAnalysisId'>
      & { sysAuditorReportList?: Maybe<Array<Maybe<(
        { __typename?: 'SysAuditorReport' }
        & Pick<SysAuditorReport, 'analysisResultId' | 'ruleName' | 'riskLevel' | 'catalog' | 'description' | 'remediation' | 'riskContent' | 'riskReason'>
      )>>> }
    )>> }
  )> }
);

export type CreateUserCustomCaseSuiteMutationVariables = Exact<{
  teamId: Scalars['ID'];
  name: Scalars['String'];
  suiteType: Scalars['Int'];
}>;


export type CreateUserCustomCaseSuiteMutation = (
  { __typename?: 'Mutation' }
  & { createUserCustomCaseSuite?: Maybe<(
    { __typename?: 'SuiteCustomItem' }
    & Pick<SuiteCustomItem, 'name'>
  )> }
);

export type CreateUserCustomCaseMutationVariables = Exact<{
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
  name: Scalars['String'];
  descriptionInfo: Scalars['String'];
  caseType?: Maybe<Scalars['Int']>;
  scriptUrl?: Maybe<Scalars['String']>;
}>;


export type CreateUserCustomCaseMutation = (
  { __typename?: 'Mutation' }
  & { createUserCustomCase?: Maybe<(
    { __typename?: 'CaseCustomItem' }
    & Pick<CaseCustomItem, 'name'>
  )> }
);

export type DeleteUserCustomCaseMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
}>;


export type DeleteUserCustomCaseMutation = (
  { __typename?: 'Mutation' }
  & { deleteUserCustomCase?: Maybe<(
    { __typename?: 'CaseCustomItem' }
    & Pick<CaseCustomItem, 'name'>
  )> }
);

export type DeleteUserCustomCaseSuiteMutationVariables = Exact<{
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
}>;


export type DeleteUserCustomCaseSuiteMutation = (
  { __typename?: 'Mutation' }
  & { deleteUserCustomCaseSuite?: Maybe<(
    { __typename?: 'SuiteCustomItem' }
    & Pick<SuiteCustomItem, 'name'>
  )> }
);

export type GetUserCustomCaseSuiteListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type GetUserCustomCaseSuiteListQuery = (
  { __typename?: 'Query' }
  & { getUserCustomCaseSuiteList?: Maybe<(
    { __typename?: 'SuiteCustomItemRep' }
    & Pick<SuiteCustomItemRep, 'count'>
    & { resultList?: Maybe<Array<Maybe<(
      { __typename?: 'SuiteCustomItem' }
      & Pick<SuiteCustomItem, 'id' | 'name' | 'layType' | 'descriptionInfo' | 'canModify' | 'caseCount'>
    )>>> }
  )> }
);

export type GetUserCustomCaseListBySuiteIdQueryVariables = Exact<{
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type GetUserCustomCaseListBySuiteIdQuery = (
  { __typename?: 'Query' }
  & { getUserCustomCaseListBySuiteId?: Maybe<(
    { __typename?: 'CaseCustomItemRep' }
    & Pick<CaseCustomItemRep, 'count' | 'suiteName' | 'uploadFileUrl' | 'canModify'>
    & { resultList?: Maybe<Array<Maybe<(
      { __typename?: 'CaseCustomItem' }
      & Pick<CaseCustomItem, 'id' | 'serialNumber' | 'name' | 'submitUserName' | 'submitTime' | 'belongSuite' | 'descriptionInfo' | 'caseType' | 'scriptUrl' | 'canModify' | 'scriptFileName' | 'classifyName' | 'classifyId'>
    )>>> }
  )> }
);

export type ChangeCaseHistoryQueryVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type ChangeCaseHistoryQuery = (
  { __typename?: 'Query' }
  & { changeCaseHistory?: Maybe<(
    { __typename?: 'HistoryRep' }
    & Pick<HistoryRep, 'count'>
    & { history?: Maybe<Array<Maybe<(
      { __typename?: 'History' }
      & Pick<History, 'id' | 'changeTime' | 'changeUser' | 'changeObject' | 'changematter'>
    )>>> }
  )> }
);

export type LawCatalogueDetailQueryVariables = Exact<{
  teamId: Scalars['ID'];
  lawId: Scalars['ID'];
}>;


export type LawCatalogueDetailQuery = (
  { __typename?: 'Query' }
  & { lawCatalogueDetail: Array<Maybe<(
    { __typename?: 'LawCatalogueCheckDetailRep' }
    & Pick<LawCatalogueCheckDetailRep, 'lawCatalogueId' | 'dutyLawCatalogueName' | 'dutyLawClassify1' | 'dutyLawClassify2' | 'dutyLawClassify3' | 'dutyLawClassify4' | 'dutyLawClassify5' | 'checkResultCount' | 'checkPassResultCount' | 'checkUnPassNumberCount' | 'checkUnTestNumberCount' | 'checkIgnoreNumberCount' | 'passStatus'>
    & { caseClassifyResultRep?: Maybe<Array<Maybe<(
      { __typename?: 'CaseClassifyResultRep' }
      & Pick<CaseClassifyResultRep, 'caseId' | 'caseSerialNumber' | 'caseName' | 'taskStatus' | 'checkTool' | 'hanlder' | 'lawCatalogueId'>
    )>>> }
  )>> }
);

export type EditUserCustomCaseMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  name: Scalars['String'];
  caseDesc?: Maybe<Scalars['String']>;
  remediation?: Maybe<Scalars['String']>;
  descriptionInfo: Scalars['String'];
  caseType?: Maybe<Scalars['Int']>;
  scriptUrl?: Maybe<Scalars['String']>;
  stepName: Scalars['String'];
  classifyId?: Maybe<Scalars['Int']>;
  operatingSystemId: Scalars['Int'];
  riskLevelId: Scalars['Int'];
  testMethod: Scalars['Int'];
}>;


export type EditUserCustomCaseMutation = (
  { __typename?: 'Mutation' }
  & { editUserCustomCase?: Maybe<(
    { __typename?: 'CaseCustomItem' }
    & Pick<CaseCustomItem, 'name'>
  )> }
);

export type GetAllCaseListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  suiteId?: Maybe<Scalars['ID']>;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Retrieve>;
}>;


export type GetAllCaseListQuery = (
  { __typename?: 'Query' }
  & { getAllCaseList?: Maybe<(
    { __typename?: 'CaseCustomItemRep' }
    & Pick<CaseCustomItemRep, 'count' | 'suiteName' | 'uploadFileUrl' | 'canModify' | 'selectCaseId'>
    & { resultList?: Maybe<Array<Maybe<(
      { __typename?: 'CaseCustomItem' }
      & Pick<CaseCustomItem, 'id' | 'serialNumber' | 'name' | 'caseDesc' | 'remediation' | 'submitUserName' | 'submitTime' | 'belongSuite' | 'descriptionInfo' | 'caseType' | 'scriptFileName' | 'scriptUrl' | 'canModify' | 'classifyName' | 'classifyId' | 'operatingSystemName' | 'operatingSystemID' | 'operatingSystemType' | 'riskLevelName' | 'riskLevelType' | 'riskLevelId' | 'testMethodName' | 'testMethodId' | 'testMothodType'>
    )>>>, groupResultList?: Maybe<Array<Maybe<(
      { __typename?: 'CaseCustomItemResultGroup' }
      & Pick<CaseCustomItemResultGroup, 'name' | 'groupCheckedStatus'>
      & { resultList?: Maybe<Array<Maybe<(
        { __typename?: 'CaseCustomItem' }
        & Pick<CaseCustomItem, 'id' | 'serialNumber' | 'name' | 'caseDesc' | 'remediation' | 'submitUserName' | 'submitTime' | 'belongSuite' | 'descriptionInfo' | 'caseType' | 'scriptFileName' | 'scriptUrl' | 'canModify' | 'classifyName' | 'classifyId' | 'operatingSystemName' | 'operatingSystemID' | 'operatingSystemType' | 'riskLevelName' | 'riskLevelType' | 'riskLevelId' | 'testMethodName' | 'testMethodId' | 'testMothodType'>
      )>>> }
    )>>> }
  )> }
);

export type CreateUserCustomCaseItemMutationVariables = Exact<{
  teamId: Scalars['ID'];
  name: Scalars['String'];
  caseDesc?: Maybe<Scalars['String']>;
  remediation?: Maybe<Scalars['String']>;
  descriptionInfo: Scalars['String'];
  caseType?: Maybe<Scalars['Int']>;
  scriptUrl?: Maybe<Scalars['String']>;
  stepName: Scalars['String'];
  classifyId?: Maybe<Scalars['Int']>;
  operatingSystemId: Scalars['Int'];
  riskLevelId: Scalars['Int'];
  testMethod: Scalars['Int'];
}>;


export type CreateUserCustomCaseItemMutation = (
  { __typename?: 'Mutation' }
  & { createUserCustomCaseItem?: Maybe<(
    { __typename?: 'CaseCustomItem' }
    & Pick<CaseCustomItem, 'name'>
  )> }
);

export type GetCaseStaticCheckedItemsQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type GetCaseStaticCheckedItemsQuery = (
  { __typename?: 'Query' }
  & { getCaseStaticCheckedItems?: Maybe<(
    { __typename?: 'CaseCheckedItem' }
    & { territoryList?: Maybe<Array<Maybe<(
      { __typename?: 'StaticItem' }
      & Pick<StaticItem, 'id' | 'name'>
    )>>>, classifyList?: Maybe<Array<Maybe<(
      { __typename?: 'StaticItem' }
      & Pick<StaticItem, 'id' | 'name'>
    )>>>, operatingSystem?: Maybe<Array<Maybe<(
      { __typename?: 'StaticItem' }
      & Pick<StaticItem, 'id' | 'name'>
    )>>>, riskLevel?: Maybe<Array<Maybe<(
      { __typename?: 'StaticItem' }
      & Pick<StaticItem, 'id' | 'name'>
    )>>>, carSpareParts?: Maybe<Array<Maybe<(
      { __typename?: 'StaticItem' }
      & Pick<StaticItem, 'id' | 'name'>
    )>>> }
  )> }
);

export type AddUserCustomCaseIntoSuiteMutationVariables = Exact<{
  teamId: Scalars['ID'];
  suiteId: Scalars['ID'];
  caseIds?: Maybe<Array<Maybe<Scalars['ID']>> | Maybe<Scalars['ID']>>;
}>;


export type AddUserCustomCaseIntoSuiteMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'addUserCustomCaseIntoSuite'>
);

export type GetCarStaticComponentQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type GetCarStaticComponentQuery = (
  { __typename?: 'Query' }
  & { getCarStaticComponent?: Maybe<Array<Maybe<(
    { __typename?: 'StaticItem' }
    & Pick<StaticItem, 'id' | 'name'>
  )>>> }
);

export type CreateCarModelInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  carName?: Maybe<Scalars['String']>;
  componentList?: Maybe<Array<Maybe<CarInfoItemCreate>> | Maybe<CarInfoItemCreate>>;
}>;


export type CreateCarModelInfoMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'createCarModelInfo'>
);

export type GetCarInfoListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type GetCarInfoListQuery = (
  { __typename?: 'Query' }
  & { getCarInfoList?: Maybe<(
    { __typename?: 'CarModelListRsp' }
    & Pick<CarModelListRsp, 'count'>
    & { carInfoList?: Maybe<Array<Maybe<(
      { __typename?: 'CarModelItem' }
      & Pick<CarModelItem, 'id' | 'carName' | 'createTime' | 'createUser'>
      & { carInfoItem?: Maybe<Array<Maybe<(
        { __typename?: 'CarInfoItem' }
        & Pick<CarInfoItem, 'id' | 'modelName' | 'modelId' | 'modelTypeId' | 'modelType' | 'collectType' | 'version' | 'collectStatus' | 'collectorProgress' | 'collectorProgressMax'>
      )>>> }
    )>>> }
  )> }
);

export type EditCarModelInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  carName?: Maybe<Scalars['String']>;
  componentList?: Maybe<Array<Maybe<CarInfoItemCreate>> | Maybe<CarInfoItemCreate>>;
  id: Scalars['ID'];
}>;


export type EditCarModelInfoMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'editCarModelInfo'>
);

export type GetCarInfoListSelectorQueryVariables = Exact<{
  teamId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type GetCarInfoListSelectorQuery = (
  { __typename?: 'Query' }
  & { getCarInfoListSelector?: Maybe<Array<Maybe<(
    { __typename?: 'CarInfoItemSelector' }
    & Pick<CarInfoItemSelector, 'id' | 'modelName' | 'titile'>
    & { modelList?: Maybe<Array<Maybe<(
      { __typename?: 'CarModelItemSelector' }
      & Pick<CarModelItemSelector, 'modelId' | 'modelName' | 'titile'>
      & { versions?: Maybe<Array<Maybe<(
        { __typename?: 'VersionSelector' }
        & Pick<VersionSelector, 'id' | 'titile' | 'versionName'>
      )>>> }
    )>>> }
  )>>> }
);

export type GetCommonalityAutoTaskReportQueryVariables = Exact<{
  teamId: Scalars['ID'];
  component?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  projectId: Scalars['ID'];
  caseId: Scalars['ID'];
  caseStepId: Scalars['ID'];
  search?: Maybe<SearchPrecise>;
}>;


export type GetCommonalityAutoTaskReportQuery = (
  { __typename?: 'Query' }
  & { getCommonalityAutoTaskReport?: Maybe<(
    { __typename?: 'CommonalityAutoTaskReportRep' }
    & Pick<CommonalityAutoTaskReportRep, 'count'>
    & { reportSystemUser?: Maybe<Array<Maybe<(
      { __typename?: 'ReportSystemUser' }
      & Pick<ReportSystemUser, 'gid' | 'passwordHash' | 'shell' | 'uid' | 'userName'>
    )>>>, reportFile?: Maybe<Array<Maybe<(
      { __typename?: 'ReportFile' }
      & Pick<ReportFile, 'name' | 'perm' | 'type'>
    )>>>, reportCVESec?: Maybe<Array<Maybe<(
      { __typename?: 'ReportCVESec' }
      & Pick<ReportCveSec, 'mainList' | 'component' | 'version' | 'cvss' | 'cvssRank' | 'name' | 'patch' | 'poc' | 'status' | 'exp'>
      & { risk?: Maybe<Array<Maybe<(
        { __typename?: 'ReportCVESecRisk' }
        & Pick<ReportCveSecRisk, 'count' | 'risk'>
      )>>> }
    )>>>, reportApkSignature?: Maybe<Array<Maybe<(
      { __typename?: 'ReportApkSignature' }
      & Pick<ReportApkSignature, 'appName' | 'algorithm' | 'from' | 'oid' | 'subject' | 'to' | 'version'>
    )>>>, reportApkManifest?: Maybe<Array<Maybe<(
      { __typename?: 'ReportApkManifest' }
      & Pick<ReportApkManifest, 'appName' | 'allowBackup' | 'debuggable'>
    )>>>, reportCheckSec?: Maybe<Array<Maybe<(
      { __typename?: 'ReportCheckSec' }
      & Pick<ReportCheckSec, 'canary' | 'name' | 'nx' | 'pie' | 'relro' | 'rpath' | 'runpath' | 'symbols'>
    )>>>, apkComponents?: Maybe<Array<Maybe<(
      { __typename?: 'ComplianceApkComponents' }
      & Pick<ComplianceApkComponents, 'appName' | 'activities' | 'providers' | 'receivers' | 'services'>
    )>>> }
  )> }
);

export type GetUserCustomSuiteTypeQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type GetUserCustomSuiteTypeQuery = (
  { __typename?: 'Query' }
  & { getUserCustomSuiteType?: Maybe<Array<Maybe<(
    { __typename?: 'StaticItem' }
    & Pick<StaticItem, 'id' | 'name'>
  )>>> }
);

export type GetOnlineUsbDeviceListQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type GetOnlineUsbDeviceListQuery = (
  { __typename?: 'Query' }
  & { getOnlineUsbDeviceList?: Maybe<(
    { __typename?: 'Client' }
    & Pick<Client, 'isConnected' | 'clientId' | 'clientVersion' | 'clientOs' | 'clientHostName' | 'clientIp' | 'clientExecutingProjectTaskId' | 'inUsedDeviceInfo' | 'usbDeviceCount'>
    & { onlineUsbDevice?: Maybe<Array<Maybe<(
      { __typename?: 'OnlineUsbDevice' }
      & Pick<OnlineUsbDevice, 'uuid' | 'serialNum' | 'clientId' | 'dType' | 'usbName' | 'usbAlertMessage'>
    )>>> }
  )> }
);

export type GetSuiteWithCaseIdsQueryVariables = Exact<{
  teamId: Scalars['ID'];
  caseIds?: Maybe<Array<Scalars['ID']> | Scalars['ID']>;
}>;


export type GetSuiteWithCaseIdsQuery = (
  { __typename?: 'Query' }
  & { GetSuiteWithCaseIds?: Maybe<(
    { __typename?: 'SuiteCustomItemRep' }
    & Pick<SuiteCustomItemRep, 'count'>
    & { resultList?: Maybe<Array<Maybe<(
      { __typename?: 'SuiteCustomItem' }
      & Pick<SuiteCustomItem, 'id' | 'name' | 'layType' | 'descriptionInfo' | 'canModify' | 'caseCount'>
    )>>> }
  )> }
);

export type EditUserCustomCaseIntoSuiteMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  suiteName?: Maybe<Scalars['String']>;
}>;


export type EditUserCustomCaseIntoSuiteMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'editUserCustomCaseIntoSuite'>
);

export type GetMyProjectStatisticsQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type GetMyProjectStatisticsQuery = (
  { __typename?: 'Query' }
  & { getMyProjectStatistics?: Maybe<(
    { __typename?: 'MyProjectStatistics' }
    & Pick<MyProjectStatistics, 'projectNumber' | 'projectCheckingNumber' | 'projectPassNumber' | 'projectUnPassNumber' | 'passingRateChecking' | 'passingRatePass' | 'passingRateUnPass'>
  )> }
);

export type EditProjectMutationVariables = Exact<{
  teamId: Scalars['ID'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  dutyUserId?: Maybe<Scalars['ID']>;
}>;


export type EditProjectMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { editProject?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
    )> }
  ) }
);

export type GetUserSelectorListQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type GetUserSelectorListQuery = (
  { __typename?: 'Query' }
  & { getUserSelectorList?: Maybe<Array<Maybe<(
    { __typename?: 'StaticUserItem' }
    & Pick<StaticUserItem, 'userId' | 'name'>
  )>>> }
);

export type CheckProjectReportStatusQueryVariables = Exact<{
  projectId: Scalars['ID'];
}>;


export type CheckProjectReportStatusQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'checkProjectReportStatus'>
);

export type CaseAllInfoQueryVariables = Exact<{
  caseId: Scalars['ID'];
}>;


export type CaseAllInfoQuery = (
  { __typename?: 'Query' }
  & { caseAllInfo?: Maybe<(
    { __typename?: 'CaseInfo' }
    & Pick<CaseInfo, 'caseTestProcess'>
    & { caseBaseInfo: (
      { __typename?: 'CaseCustomItem' }
      & Pick<CaseCustomItem, 'id' | 'serialNumber' | 'name' | 'caseDesc' | 'remediation' | 'bindName' | 'classifyName' | 'operatingSystemName' | 'riskLevelName' | 'submitTime' | 'submitUserName' | 'riskLevelType' | 'canModify' | 'testMethodName' | 'testMothodType'>
    ), complianceRequire?: Maybe<Array<Maybe<(
      { __typename?: 'LawCatalogueBaseDetail' }
      & Pick<LawCatalogueBaseDetail, 'lawName' | 'lawCatalogueId' | 'dutyLawCatalogueName' | 'dutyLawClassify1' | 'description'>
    )>>> }
  )> }
);

export type ClientEventAlertQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type ClientEventAlertQuery = (
  { __typename?: 'Query' }
  & { clientEventAlert: (
    { __typename?: 'ClientAlertMsg' }
    & Pick<ClientAlertMsg, 'hasAlert' | 'alertType' | 'uuid' | 'oldDeviceName' | 'newDeviceName'>
  ) }
);

export type SubmitClientDeviceChangeMutationVariables = Exact<{
  teamId: Scalars['ID'];
  uuid: Scalars['String'];
  result: Scalars['Boolean'];
}>;


export type SubmitClientDeviceChangeMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'submitClientDeviceChange'>
);

export type DeleteStepUploadDataMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
  uuid: Scalars['String'];
}>;


export type DeleteStepUploadDataMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteStepUploadData'>
);

export type SaveStepInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
  buttonName: Scalars['String'];
  buttonType: Scalars['String'];
  result?: Maybe<Scalars['String']>;
  remark?: Maybe<Scalars['String']>;
  stepType: Scalars['String'];
}>;


export type SaveStepInfoMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'saveStepInfo'>
);

export type SaveStepDialogInfoMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
  buttonName: Scalars['String'];
  buttonType: Scalars['String'];
  cancel: Scalars['Boolean'];
}>;


export type SaveStepDialogInfoMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'saveStepDialogInfo'>
);

export type ScriptExeMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
  appList?: Maybe<Array<Maybe<AppInfo>> | Maybe<AppInfo>>;
  argParams?: Maybe<Scalars['Map']>;
}>;


export type ScriptExeMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'scriptExe'>
);

export type ScreenshotMutationVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
  stepId: Scalars['ID'];
}>;


export type ScreenshotMutation = (
  { __typename?: 'Mutation' }
  & { screenshot: (
    { __typename?: 'UploadData' }
    & Pick<UploadData, 'fileUrl' | 'size' | 'fileUUID' | 'fileName'>
  ) }
);

export type RealtimeGetApkInfoQueryVariables = Exact<{
  projectId: Scalars['ID'];
}>;


export type RealtimeGetApkInfoQuery = (
  { __typename?: 'Query' }
  & { realtimeGetApkInfo?: Maybe<Array<Maybe<(
    { __typename?: 'ApkSelectorInfo' }
    & Pick<ApkSelectorInfo, 'appName' | 'packageName'>
  )>>> }
);

export type CheckDeviceOnlineQueryVariables = Exact<{
  teamId: Scalars['ID'];
  clientId: Scalars['String'];
  connectType: Scalars['String'];
  connectIP: Scalars['String'];
  connectPort: Scalars['Int'];
  connectUser: Scalars['String'];
  connectPassword?: Maybe<Scalars['String']>;
  connectCertificateUrl?: Maybe<Scalars['String']>;
}>;


export type CheckDeviceOnlineQuery = (
  { __typename?: 'Query' }
  & { checkDeviceOnline?: Maybe<(
    { __typename?: 'ClientDeviceOnline' }
    & Pick<ClientDeviceOnline, 'isOnline' | 'deviceType' | 'deviceId' | 'deviceName' | 'clientId'>
  )> }
);

export type GetProjectAutoTaskProgressV2QueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type GetProjectAutoTaskProgressV2Query = (
  { __typename?: 'Query' }
  & { getProjectAutoTaskProgressV2?: Maybe<(
    { __typename?: 'DetectionProgressV2' }
    & Pick<DetectionProgressV2, 'title' | 'currentIndedx' | 'progressPercent' | 'isFinished'>
    & { stepConfig: Array<Maybe<(
      { __typename?: 'DetectionStepConfig' }
      & Pick<DetectionStepConfig, 'title' | 'description' | 'alertType'>
    )>> }
  )> }
);

export type CheckDeviceHeartbeatQueryVariables = Exact<{
  teamId: Scalars['ID'];
  deviceId: Scalars['String'];
  projectId: Scalars['ID'];
}>;


export type CheckDeviceHeartbeatQuery = (
  { __typename?: 'Query' }
  & { checkDeviceHeartbeat?: Maybe<(
    { __typename?: 'ClientDeviceOnlineV2' }
    & Pick<ClientDeviceOnlineV2, 'isOnline' | 'deviceType' | 'deviceId' | 'deviceName' | 'clientId'>
    & { offlineData?: Maybe<(
      { __typename?: 'LinuxDeviceConnectInfo' }
      & Pick<LinuxDeviceConnectInfo, 'clientId' | 'connectType' | 'connectIP' | 'connectPort' | 'connectUser' | 'connectPassword' | 'connectCertificateUrl' | 'hasConnectCertificateFile' | 'uploadFileServerUrl'>
    )> }
  )> }
);

export type GetAnalysisAppListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type GetAnalysisAppListQuery = (
  { __typename?: 'Query' }
  & { getAnalysisAppList?: Maybe<Array<Maybe<(
    { __typename?: 'AppSelectedList' }
    & Pick<AppSelectedList, 'appInfo' | 'analysisStatus' | 'analysisErrorMsg'>
  )>>> }
);

export type GetSelectedAppListQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type GetSelectedAppListQuery = (
  { __typename?: 'Query' }
  & { getSelectedAppList?: Maybe<Array<Maybe<(
    { __typename?: 'AppSelectedList' }
    & Pick<AppSelectedList, 'appInfo'>
  )>>> }
);

export type SubmitSelectorListV2MutationVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  result?: Maybe<Array<Maybe<Scalars['String']>> | Maybe<Scalars['String']>>;
  isJumpStep: Scalars['Boolean'];
}>;


export type SubmitSelectorListV2Mutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'submitSelectorListV2'>
);

export type ExchangeLinuxDeviceConnectMsgQueryVariables = Exact<{
  teamId: Scalars['ID'];
  projectId: Scalars['ID'];
  clientId: Scalars['String'];
  deviceId: Scalars['String'];
  connectType: Scalars['String'];
  connectIP: Scalars['String'];
  connectPort: Scalars['Int'];
  connectUser: Scalars['String'];
  connectPassword?: Maybe<Scalars['String']>;
  connectCertificateUrl?: Maybe<Scalars['String']>;
}>;


export type ExchangeLinuxDeviceConnectMsgQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'exchangeLinuxDeviceConnectMsg'>
);

export type ProjectSelectorListQueryVariables = Exact<{
  teamId: Scalars['ID'];
}>;


export type ProjectSelectorListQuery = (
  { __typename?: 'Query' }
  & { projectSelectorList?: Maybe<(
    { __typename?: 'ProjectSelectorList' }
    & Pick<ProjectSelectorList, 'uploadFileUrl'>
    & { testObject: Array<Maybe<(
      { __typename?: 'ProjectTestObjectList' }
      & Pick<ProjectTestObjectList, 'autoPartsId' | 'autoPartsName'>
      & { systemChild: Array<Maybe<(
        { __typename?: 'ProjectTestObjectSystemList' }
        & Pick<ProjectTestObjectSystemList, 'systemId' | 'systemName' | 'systemType' | 'systemVersion'>
      )>> }
    )>>, clientAndroid: Array<Maybe<(
      { __typename?: 'ProjectClientList' }
      & Pick<ProjectClientList, 'clientId' | 'clientName'>
      & { clientChild: Array<Maybe<(
        { __typename?: 'ProjectClientDeviceList' }
        & Pick<ProjectClientDeviceList, 'deviceId' | 'deviceName' | 'isUsable'>
      )>> }
    )>>, clientLinux: Array<Maybe<(
      { __typename?: 'ProjectClientList' }
      & Pick<ProjectClientList, 'clientId' | 'clientName'>
    )>> }
  )> }
);

export type CreateTestProjectMutationVariables = Exact<{
  id: Scalars['ID'];
  name: Scalars['String'];
  lawId: Scalars['ID'];
  principalUserId?: Maybe<Scalars['ID']>;
  autoPartsId: Scalars['Int'];
  systemId: Scalars['Int'];
  systemType: Scalars['String'];
  clientId?: Maybe<Scalars['String']>;
  deviceId?: Maybe<Scalars['String']>;
  linuxConnectType?: Maybe<Scalars['String']>;
  linuxConnectIP?: Maybe<Scalars['String']>;
  linuxConnectPort?: Maybe<Scalars['Int']>;
  linuxConnectUser?: Maybe<Scalars['String']>;
  linuxConnectPassword?: Maybe<Scalars['String']>;
  linuxConnectCertificateUrl?: Maybe<Scalars['String']>;
}>;


export type CreateTestProjectMutation = (
  { __typename?: 'Mutation' }
  & { teamProject: (
    { __typename?: 'TeamProjectMutation' }
    & { createProject?: Maybe<(
      { __typename?: 'Project' }
      & Pick<Project, 'id'>
      & { caseResultIgnoreCount?: Maybe<(
        { __typename?: 'ProjectCaseResultIgnoreCount' }
        & Pick<ProjectCaseResultIgnoreCount, 'ignoreCaseCount' | 'stepWords'>
      )> }
    )> }
  ) }
);

export type CaseTestProcessRecordQueryVariables = Exact<{
  teamId: Scalars['ID'];
  caseId: Scalars['ID'];
  projectId: Scalars['ID'];
}>;


export type CaseTestProcessRecordQuery = (
  { __typename?: 'Query' }
  & { caseTestProcessRecord?: Maybe<(
    { __typename?: 'CaseTestProcessRecordRsp' }
    & Pick<CaseTestProcessRecordRsp, 'caseStatus'>
    & { caseBaseInfo: (
      { __typename?: 'CaseCustomItem' }
      & Pick<CaseCustomItem, 'id' | 'serialNumber' | 'name' | 'caseDesc' | 'remediation' | 'bindName' | 'classifyName' | 'operatingSystemName' | 'riskLevelName' | 'submitTime' | 'submitUserName' | 'riskLevelType' | 'canModify' | 'testMethodName'>
    ), complianceRequire?: Maybe<Array<Maybe<(
      { __typename?: 'LawCatalogueBaseDetail' }
      & Pick<LawCatalogueBaseDetail, 'lawName' | 'lawCatalogueId' | 'dutyLawCatalogueName' | 'dutyLawClassify1' | 'description'>
    )>>>, caseTestProcess?: Maybe<Array<(
      { __typename?: 'CaseTestProcessRsp' }
      & Pick<CaseTestProcessRsp, 'result' | 'process' | 'stepName' | 'remark' | 'done'>
      & { data?: Maybe<Array<Maybe<(
        { __typename?: 'UploadData' }
        & Pick<UploadData, 'fileUrl' | 'fileUUID' | 'fileName' | 'size'>
      )>>> }
    )>> }
  )> }
);

export type InterfaceSecurityFragment = (
  { __typename?: 'InterfaceSecurity' }
  & Pick<InterfaceSecurity, 'name' | 'ip' | 'port' | 'inode'>
);

export type ProcSecurityFragment = (
  { __typename?: 'ProcSecurity' }
  & Pick<ProcSecurity, 'name' | 'pid' | 'attackVector' | 'security' | 'importance' | 'score'>
  & { connectRelation?: Maybe<(
    { __typename?: 'ConnectRelation' }
    & Pick<ConnectRelation, 'type' | 'port'>
    & { detailPosition?: Maybe<(
      { __typename?: 'Position' }
      & Pick<Position, 'url' | 'offset'>
    )> }
  )>, detailPosition?: Maybe<(
    { __typename?: 'Position' }
    & Pick<Position, 'url' | 'offset'>
  )>, baselinePosition?: Maybe<(
    { __typename?: 'Position' }
    & Pick<Position, 'url' | 'offset'>
  )> }
);

export type KernelFragment = (
  { __typename?: 'Kernel' }
  & Pick<Kernel, 'name' | 'release' | 'version' | 'cmdline' | 'procVersion'>
);

export type ThreatAlertFragment = (
  { __typename?: 'ThreatAlert' }
  & Pick<ThreatAlert, 'score'>
  & { interface: (
    { __typename?: 'InterfaceSecurity' }
    & InterfaceSecurityFragment
  ), procSecurity?: Maybe<Array<(
    { __typename?: 'ProcSecurity' }
    & ProcSecurityFragment
  )>>, kernel?: Maybe<(
    { __typename?: 'Kernel' }
    & KernelFragment
  )> }
);

export type ThreadAlertQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type ThreadAlertQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { threatAlert?: Maybe<(
        { __typename?: 'ThreatAlertConnection' }
        & Pick<ThreatAlertConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'ThreatAlert' }
          & ThreatAlertFragment
        )>> }
      )> }
    ) | { __typename?: 'ApkReport' } }
  )> }
);

export type ProjectThreadAlertQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
}>;


export type ProjectThreadAlertQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { threatAlert?: Maybe<(
        { __typename?: 'ThreatAlertConnection' }
        & Pick<ThreatAlertConnection, 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'ThreatAlert' }
          & ThreatAlertFragment
        )>> }
      )> }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectSystemKernelQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type ProjectSystemKernelQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { kernel: (
          { __typename?: 'Kernel' }
          & Pick<Kernel, 'name' | 'release' | 'version' | 'cmdline' | 'procVersion'>
        ) }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectSystemQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  field: Scalars['String'];
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type ProjectSystemQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { buddyInfo?: Maybe<(
          { __typename?: 'BuddyInfoConnection' }
          & Pick<BuddyInfoConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'BuddyInfo' }
            & Pick<BuddyInfo, 'errDescription' | 'node' | 'zone' | 'freePageBlock'>
          )>> }
        )>, crypto?: Maybe<(
          { __typename?: 'CryptoConnection' }
          & Pick<CryptoConnection, 'totalCount' | 'fieldValues'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'Crypto' }
            & Pick<Crypto, 'errDescription' | 'driver' | 'module' | 'priority' | 'refCnt' | 'selfTest' | 'internal' | 'type'>
          )>> }
        )>, supportedfs?: Maybe<(
          { __typename?: 'SupportedfsConnection' }
          & Pick<SupportedfsConnection, 'totalCount' | 'fieldValues'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'Supportedfs' }
            & Pick<Supportedfs, 'errDescription' | 'dev' | 'type'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectUserQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  field: Scalars['String'];
  orderBy?: Maybe<OrderByInput>;
}>;


export type ProjectUserQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { user?: Maybe<(
          { __typename?: 'SystemUserConnection' }
          & Pick<SystemUserConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'SystemUser' }
            & Pick<SystemUser, 'errDescription' | 'uid' | 'userName' | 'gid' | 'shell' | 'passwordHash'>
          )>> }
        )>, group?: Maybe<(
          { __typename?: 'GroupConnection' }
          & Pick<GroupConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'Group' }
            & Pick<Group, 'errDescription' | 'gid' | 'groupName' | 'groupPassword' | 'userList'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectNetworkQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  field: Scalars['String'];
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type ProjectNetworkQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { hosts?: Maybe<(
          { __typename?: 'HostConnection' }
          & Pick<HostConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'Host' }
            & Pick<Host, 'errDescription' | 'address' | 'hostname'>
          )>> }
        )>, network?: Maybe<(
          { __typename?: 'Network' }
          & { interface?: Maybe<(
            { __typename?: 'InterfaceConnection' }
            & Pick<InterfaceConnection, 'totalCount'>
            & { nodes?: Maybe<Array<(
              { __typename?: 'Interface' }
              & Pick<Interface, 'errDescription' | 'name' | 'ipv4Address' | 'ipv6Address' | 'phyAddress'>
            )>> }
          )>, routing?: Maybe<(
            { __typename?: 'RoutingConnection' }
            & Pick<RoutingConnection, 'totalCount' | 'fieldValues'>
            & { nodes?: Maybe<Array<(
              { __typename?: 'Routing' }
              & Pick<Routing, 'errDescription' | 'table' | 'destination' | 'mask' | 'gateway' | 'interfaceName'>
            )>> }
          )>, unixSocket?: Maybe<(
            { __typename?: 'UnixSocketConnection' }
            & Pick<UnixSocketConnection, 'totalCount'>
            & { nodes?: Maybe<Array<(
              { __typename?: 'UnixSocket' }
              & Pick<UnixSocket, 'errDescription' | 'inode' | 'path' | 'processName' | 'pid'>
            )>> }
          )>, listeningSocket?: Maybe<(
            { __typename?: 'SocketConnection' }
            & Pick<SocketConnection, 'totalCount' | 'fieldValues'>
            & { nodes?: Maybe<Array<(
              { __typename?: 'Socket' }
              & Pick<Socket, 'errDescription' | 'localAddress' | 'localPort' | 'inode' | 'processName' | 'type' | 'pid'>
            )>> }
          )>, connectingSocket?: Maybe<(
            { __typename?: 'SocketConnection' }
            & Pick<SocketConnection, 'totalCount' | 'fieldValues'>
            & { nodes?: Maybe<Array<(
              { __typename?: 'Socket' }
              & Pick<Socket, 'errDescription' | 'localAddress' | 'localPort' | 'remoteAddress' | 'remotePort' | 'inode' | 'processName' | 'type' | 'pid'>
            )>> }
          )> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectStorageQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  field: Scalars['String'];
}>;


export type ProjectStorageQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { storageUsage?: Maybe<(
          { __typename?: 'StorageUsageConnection' }
          & Pick<StorageUsageConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'StorageUsage' }
            & Pick<StorageUsage, 'errDescription' | 'filesystem' | 'total' | 'used' | 'available' | 'usePercent' | 'mountOn'>
          )>> }
        )>, storagePartition?: Maybe<(
          { __typename?: 'StoragePartitionConnection' }
          & Pick<StoragePartitionConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'StoragePartition' }
            & Pick<StoragePartition, 'errDescription' | 'name' | 'size' | 'node'>
          )>> }
        )>, storageMount?: Maybe<(
          { __typename?: 'StorageMountConnection' }
          & Pick<StorageMountConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'StorageMount' }
            & Pick<StorageMount, 'errDescription' | 'device' | 'mountPoint' | 'fsType' | 'option'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type FileWithContentFragment = (
  { __typename?: 'File' }
  & Pick<File, 'content'>
  & FileFragment
);

export type FileFragment = (
  { __typename?: 'File' }
  & Pick<File, 'id' | 'errDescription' | 'name' | 'type' | 'perm' | 'ownerUser' | 'ownerGroup' | 'size' | 'nodes' | 'aclEnabled' | 'linkCount' | 'linkFile' | 'date' | 'contentType' | 'arch'>
  & { operation: File['id'] }
);

export type ProjectFileContentQueryVariables = Exact<{
  id: Scalars['ID'];
  fileId?: Maybe<Scalars['ID']>;
}>;


export type ProjectFileContentQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { file?: Maybe<(
          { __typename?: 'FileConnection' }
          & Pick<FileConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'File' }
            & FileWithContentFragment
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectFileTreeQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  path?: Maybe<Scalars['String']>;
  fileId?: Maybe<Scalars['ID']>;
}>;


export type ProjectFileTreeQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { file?: Maybe<(
          { __typename?: 'FileConnection' }
          & Pick<FileConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'File' }
            & Pick<File, 'id' | 'name' | 'type' | 'perm' | 'virtual'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectFileQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  filterFields?: Maybe<Scalars['Map']>;
  searchField?: Maybe<Scalars['String']>;
}>;


export type ProjectFileQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { file?: Maybe<(
          { __typename?: 'FileConnection' }
          & Pick<FileConnection, 'totalCount' | 'fieldValues'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'File' }
            & FileFragment
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectProcessQueryVariables = Exact<{
  id: Scalars['ID'];
  pid?: Maybe<Scalars['ID']>;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  searchField?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
}>;


export type ProjectProcessQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { process?: Maybe<(
          { __typename?: 'ProcessConnection' }
          & Pick<ProcessConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'Process' }
            & Pick<Process, 'errDescription' | 'id' | 'cmd' | 'cwd' | 'pid' | 'uid' | 'gid' | 'inodes' | 'fileHandles' | 'name' | 'loginUID' | 'rootDir' | 'apk' | 'memmap'>
            & { status: (
              { __typename?: 'ProcessStatus' }
              & Pick<ProcessStatus, 'name' | 'seccomp'>
            ), sharelibs?: Maybe<Array<(
              { __typename?: 'Sharelib' }
              & Pick<Sharelib, 'name'>
            )>> }
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectProcessBriefQueryVariables = Exact<{
  id: Scalars['ID'];
  search?: Maybe<Scalars['String']>;
  searchField?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
}>;


export type ProjectProcessBriefQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { process?: Maybe<(
          { __typename?: 'ProcessConnection' }
          & Pick<ProcessConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'Process' }
            & Pick<Process, 'errDescription' | 'id' | 'cmd' | 'cwd' | 'pid' | 'name'>
            & { status: (
              { __typename?: 'ProcessStatus' }
              & Pick<ProcessStatus, 'ppid'>
            ) }
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectCheckSecQueryVariables = Exact<{
  id: Scalars['ID'];
  pid?: Maybe<Scalars['Int']>;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type ProjectCheckSecQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { checkSec?: Maybe<(
          { __typename?: 'CheckSecConnection' }
          & Pick<CheckSecConnection, 'totalCount' | 'fieldValues'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'CheckSec' }
            & Pick<CheckSec, 'errDescription' | 'name' | 'canary' | 'nx' | 'pie' | 'relro' | 'rpath' | 'runpath' | 'symbols'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectLibCveSecQueryVariables = Exact<{
  id: Scalars['ID'];
  pid?: Maybe<Scalars['Int']>;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
  withCVE?: Maybe<Scalars['Boolean']>;
}>;


export type ProjectLibCveSecQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { libCveSec?: Maybe<(
          { __typename?: 'CVESecConnection' }
          & Pick<CveSecConnection, 'fieldValues' | 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'CVESec' }
            & Pick<CveSec, 'errDescription'>
            & CveSecFragment
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectKernelCveSecQueryVariables = Exact<{
  id: Scalars['ID'];
  pid?: Maybe<Scalars['Int']>;
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
  withCVE?: Maybe<Scalars['Boolean']>;
}>;


export type ProjectKernelCveSecQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { kernelCveSec?: Maybe<(
          { __typename?: 'CVESecConnection' }
          & Pick<CveSecConnection, 'fieldValues' | 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'CVESec' }
            & Pick<CveSec, 'errDescription'>
            & CveSecFragment
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectLicenseQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  filterFields?: Maybe<Scalars['Map']>;
  withContent?: Maybe<Scalars['Boolean']>;
  withFile?: Maybe<Scalars['Boolean']>;
}>;


export type ProjectLicenseQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { license?: Maybe<(
        { __typename?: 'LicenseConnection' }
        & Pick<LicenseConnection, 'totalCount' | 'fieldValues' | 'fieldValuesWithCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'License' }
          & LicenseFragment
        )>> }
      )> }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type SysReportPotentialRiskQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  orderBy?: Maybe<OrderByInput>;
  field: Scalars['String'];
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type SysReportPotentialRiskQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { androidRisk: (
        { __typename?: 'AndroidRisk' }
        & { selinux?: Maybe<(
          { __typename?: 'SELinuxRiskConnection' }
          & Pick<SeLinuxRiskConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'SELinuxRisk' }
            & Pick<SeLinuxRisk, 'revise' | 'action' | 'role' | 'context' | 'class' | 'detail'>
          )>> }
        )> }
      ), procRisk: (
        { __typename?: 'ProcRisk' }
        & { procSec?: Maybe<(
          { __typename?: 'ProcSecConnection' }
          & Pick<ProcSecConnection, 'fieldValues' | 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'ProcSec' }
            & Pick<ProcSec, 'pid' | 'processName' | 'cmd' | 'root' | 'checkSec' | 'cveSec' | 'effectiveUID' | 'risk'>
          )>> }
        )>, exposedService?: Maybe<(
          { __typename?: 'ExposedServiceConnection' }
          & Pick<ExposedServiceConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'ExposedService' }
            & Pick<ExposedService, 'pid' | 'processName' | 'localAddress' | 'localPort' | 'remoteAddress' | 'remotePort' | 'type' | 'effectiveUID'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectCommandQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  field: Scalars['String'];
  commandId?: Maybe<Scalars['ID']>;
  withResult: Scalars['Boolean'];
}>;


export type ProjectCommandQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { command?: Maybe<(
          { __typename?: 'CommandConnection' }
          & Pick<CommandConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'Command' }
            & MakeOptional<Pick<Command, 'errDescription' | 'id' | 'command' | 'result' | 'returnStatus'>, 'result'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectPeripheralQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  field: Scalars['String'];
}>;


export type ProjectPeripheralQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { usb?: Maybe<(
          { __typename?: 'USBConnection' }
          & Pick<UsbConnection, 'totalCount'>
          & { nodes?: Maybe<Array<(
            { __typename?: 'USB' }
            & Pick<Usb, 'errDescription' | 'busID' | 'deviceID' | 'idVendor' | 'idProduct' | 'description'>
          )>> }
        )> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ReportOverviewQueryVariables = Exact<{
  id: Scalars['ID'];
  baseline: Scalars['Boolean'];
  cve: Scalars['Boolean'];
  license: Scalars['Boolean'];
  custom: Scalars['Boolean'];
  detail: Scalars['Boolean'];
}>;


export type ReportOverviewQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { system: (
        { __typename?: 'System' }
        & { kernel?: Maybe<(
          { __typename?: 'Kernel' }
          & Pick<Kernel, 'name' | 'release' | 'version'>
        )> }
      ), overview: (
        { __typename?: 'ReportOverview' }
        & MakeOptional<Pick<ReportOverview, 'baselineSecureScore'>, 'baselineSecureScore'>
        & { baseline?: Maybe<Array<(
          { __typename?: 'CheckRiskStatistics' }
          & Pick<CheckRiskStatistics, 'risk' | 'count'>
        )>>, cve?: Maybe<Array<(
          { __typename?: 'CvssRankStatistics' }
          & Pick<CvssRankStatistics, 'risk' | 'count'>
        )>>, license?: Maybe<Array<(
          { __typename?: 'LicenseRiskStatistics' }
          & Pick<LicenseRiskStatistics, 'risk' | 'count'>
        )>>, custom?: Maybe<Array<(
          { __typename?: 'CheckRiskStatistics' }
          & Pick<CheckRiskStatistics, 'risk' | 'count'>
        )>> }
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
);

export type DetailConnectionFragment = (
  { __typename?: 'DetailConnection' }
  & Pick<DetailConnection, 'nodes' | 'totalCount'>
  & { column: Array<(
    { __typename?: 'Column' }
    & Pick<Column, 'key' | 'title' | 'type'>
    & { append?: Maybe<Array<(
      { __typename?: 'ColumnAppend' }
      & Pick<ColumnAppend, 'key' | 'type'>
    )>> }
  )> }
);

export type CheckRuleFragment = (
  { __typename?: 'Rule' }
  & Pick<Rule, 'id' | 'riskLevel' | 'ruleName' | 'catalog' | 'riskContent' | 'riskReason' | 'description' | 'remediation'>
  & { detail?: Maybe<(
    { __typename?: 'DetailConnection' }
    & Pick<DetailConnection, 'totalCount'>
  )> }
);

export type CheckFragment = (
  { __typename?: 'Check' }
  & { rule?: Maybe<Array<(
    { __typename?: 'Rule' }
    & CheckRuleFragment
  )>>, risk: Array<(
    { __typename?: 'CheckRiskStatistics' }
    & Pick<CheckRiskStatistics, 'risk' | 'count'>
  )> }
);

export type SysReportRuleDetailQueryVariables = Exact<{
  id: Scalars['ID'];
  ruleId: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
}>;


export type SysReportRuleDetailQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { ruleByID?: Maybe<(
        { __typename?: 'Rule' }
        & Pick<Rule, 'id' | 'ruleName'>
        & { detail?: Maybe<(
          { __typename?: 'DetailConnection' }
          & DetailConnectionFragment
        )> }
      )> }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type SysReportGenericQueryVariables = Exact<{
  id: Scalars['ID'];
  classType: Scalars['String'];
  language: Language;
  auditType: AuditType;
}>;


export type SysReportGenericQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & Pick<SysReport, 'id'>
      & { auditReport: (
        { __typename?: 'Check' }
        & CheckFragment
      ) }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type SysReportBaselineQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  risk?: Maybe<Array<CheckRisk> | CheckRisk>;
  language: Language;
  auditType: AuditType;
  filterFields?: Maybe<Scalars['Map']>;
}>;


export type SysReportBaselineQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & Pick<SysReport, 'id'>
      & { audit?: Maybe<(
        { __typename?: 'RuleConnection' }
        & Pick<RuleConnection, 'fieldValues' | 'totalCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'Rule' }
          & Pick<Rule, 'id' | 'classKey' | 'class' | 'catalogKey' | 'catalog' | 'ruleName' | 'description' | 'riskLevel'>
          & { wp29?: Maybe<Array<(
            { __typename?: 'WP29' }
            & Pick<Wp29, 'rule' | 'class' | 'detail' | 'example'>
          )>> }
        )>> }
      )> }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type SensitiveInfoQueryVariables = Exact<{
  id: Scalars['ID'];
  offset?: Maybe<OffsetConnectionInput>;
  search?: Maybe<Scalars['String']>;
  type: SensitiveType;
  domain?: Maybe<Scalars['String']>;
  ip?: Maybe<Scalars['String']>;
  withDetail?: Scalars['Boolean'];
  filterFields?: Maybe<Scalars['Map']>;
  orderBy?: Maybe<OrderByInput>;
}>;


export type SensitiveInfoQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & { sensitiveInfo?: Maybe<(
        { __typename?: 'SensitiveInfoConnection' }
        & MakeOptional<Pick<SensitiveInfoConnection, 'totalCount' | 'fieldValues' | 'fieldValuesWithCount'>, 'fieldValuesWithCount'>
        & { nodes?: Maybe<Array<(
          { __typename?: 'SensitiveContent' }
          & SensitiveContentFragment
        ) | (
          { __typename?: 'SensitiveIP' }
          & SensitiveIpFragment
        ) | (
          { __typename?: 'SensitiveDomain' }
          & SensitiveDomainFragment
        )>> }
      )> }
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type SysPositionQueryVariables = Exact<{
  id: Scalars['ID'];
  page: SysReportPage;
  field: Scalars['Map'];
}>;


export type SysPositionQuery = (
  { __typename?: 'Query' }
  & { analysis?: Maybe<{ __typename?: 'Project' } | { __typename?: 'Team' } | (
    { __typename?: 'Analysis' }
    & Pick<Analysis, 'id'>
    & { report: (
      { __typename?: 'SysReport' }
      & Pick<SysReport, 'position'>
    ) | { __typename?: 'ApkReport' } }
  )> }
  & ViewerFragment
);

export type ProjectHomeFragment = (
  { __typename?: 'Project' }
  & Pick<Project, 'id' | 'name' | 'description'>
);

export type CheckItemFragment = (
  { __typename?: 'CheckList' }
  & Pick<CheckList, 'key' | 'class'>
  & { list?: Maybe<Array<(
    { __typename?: 'CheckType' }
    & Pick<CheckType, 'key' | 'value'>
  )>> }
);

export type SysReportAnalysisFragment = (
  { __typename?: 'Analysis' }
  & Pick<Analysis, 'id' | 'analysisType' | 'status'>
  & { report: (
    { __typename?: 'SysReport' }
    & Pick<SysReport, 'id'>
    & { baselineAudit?: Maybe<Array<(
      { __typename?: 'CheckList' }
      & CheckItemFragment
    )>>, customizedAudit?: Maybe<Array<(
      { __typename?: 'CheckList' }
      & CheckItemFragment
    )>> }
  ) | { __typename?: 'ApkReport' } }
);

export const ApkRuleFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ApkRule"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"catalogKey"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}},{"kind":"Field","name":{"kind":"Name","value":"riskReason"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"extra"}}]}}]} as unknown as DocumentNode;
export const ApkCheckFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ApkCheck"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Check"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rule"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ApkRule"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ApkRule"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"catalogKey"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}},{"kind":"Field","name":{"kind":"Name","value":"riskReason"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"extra"}}]}}]} as unknown as DocumentNode;
export const CheckItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CheckItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckList"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]} as unknown as DocumentNode;
export const ApkReportAnalysisFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ApkReportAnalysis"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"audit"},"name":{"kind":"Name","value":"listAudit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckItem"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CheckItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckList"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]} as unknown as DocumentNode;
export const SensitiveFileFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveFile"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}}]} as unknown as DocumentNode;
export const SensitiveIpFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveIP"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveIP"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ip"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"files"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveFile"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveFile"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}}]} as unknown as DocumentNode;
export const SensitiveDomainFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveDomain"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveDomain"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"domain"}},{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"detail"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"files"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveFile"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveFile"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}}]} as unknown as DocumentNode;
export const SensitiveContentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveContent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveContent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}}]} as unknown as DocumentNode;
export const CvssRankStatisticsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CvssRankStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CvssRankStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]} as unknown as DocumentNode;
export const CveFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVE"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVE"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"cvssRank"}},{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"poc"}},{"kind":"Field","name":{"kind":"Name","value":"patch"}},{"kind":"Field","name":{"kind":"Name","value":"exp"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"cvss3Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"attackComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"privilegesRequired"}},{"kind":"Field","name":{"kind":"Name","value":"userInteraction"}},{"kind":"Field","name":{"kind":"Name","value":"scope"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cvss2Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"accessVector"}},{"kind":"Field","name":{"kind":"Name","value":"accessComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"authentication"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"}}]}}]} as unknown as DocumentNode;
export const CveSecFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVESec"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVESec"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"path"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CvssRankStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withCVE"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CVE"}}]}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CvssRankStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CvssRankStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVE"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVE"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"cvssRank"}},{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"poc"}},{"kind":"Field","name":{"kind":"Name","value":"patch"}},{"kind":"Field","name":{"kind":"Name","value":"exp"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"cvss3Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"attackComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"privilegesRequired"}},{"kind":"Field","name":{"kind":"Name","value":"userInteraction"}},{"kind":"Field","name":{"kind":"Name","value":"scope"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cvss2Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"accessVector"}},{"kind":"Field","name":{"kind":"Name","value":"accessComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"authentication"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"}}]}}]} as unknown as DocumentNode;
export const LicenseTagFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"LicenseTag"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LicenseTag"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;
export const LicenseFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"License"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"License"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"source"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"required"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"forbidden"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"permitted"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"risk"},"name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withFile"}}}]}]}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"LicenseTag"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LicenseTag"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;
export const FeatureConfigFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FeatureConfig"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FeatureConfig"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"systemLinux"}},{"kind":"Field","name":{"kind":"Name","value":"systemAndroid"}},{"kind":"Field","name":{"kind":"Name","value":"systemOther"}},{"kind":"Field","name":{"kind":"Name","value":"artifactAPK"}},{"kind":"Field","name":{"kind":"Name","value":"artifactRTOS"}},{"kind":"Field","name":{"kind":"Name","value":"artifactPackage"}},{"kind":"Field","name":{"kind":"Name","value":"uploadPackage"}},{"kind":"Field","name":{"kind":"Name","value":"uploadRTOSFirmware"}},{"kind":"Field","name":{"kind":"Name","value":"uploadImage"}},{"kind":"Field","name":{"kind":"Name","value":"uploadCDat"}},{"kind":"Field","name":{"kind":"Name","value":"uploadAPK"}},{"kind":"Field","name":{"kind":"Name","value":"plugin"}},{"kind":"Field","name":{"kind":"Name","value":"collector"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimitEnabled"}}]}}]} as unknown as DocumentNode;
export const ReportFeatureConfigFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ReportFeatureConfig"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ReportFeatureConfig"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"}},{"kind":"Field","name":{"kind":"Name","value":"custom"}},{"kind":"Field","name":{"kind":"Name","value":"cveSec"}},{"kind":"Field","name":{"kind":"Name","value":"cveKernel"}},{"kind":"Field","name":{"kind":"Name","value":"license"}},{"kind":"Field","name":{"kind":"Name","value":"detail"}},{"kind":"Field","name":{"kind":"Name","value":"sensitive"}},{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}}]} as unknown as DocumentNode;
export const ViewerFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;
export const TeamUserItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamUserItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"teamRole"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export const AllRiskStatisticsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;
export const TeamOverviewRecentItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamOverviewRecentItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;
export const ProjectListItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;
export const LimitFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Limit"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Limit"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}},{"kind":"Field","name":{"kind":"Name","value":"allocated"}},{"kind":"Field","name":{"kind":"Name","value":"unallocated"}}]}}]} as unknown as DocumentNode;
export const TeamStatisticsFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TeamStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"project"}},{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Limit"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Limit"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Limit"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}},{"kind":"Field","name":{"kind":"Name","value":"allocated"}},{"kind":"Field","name":{"kind":"Name","value":"unallocated"}}]}}]} as unknown as DocumentNode;
export const OverviewRecentItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OverviewRecentItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;
export const TokenItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TokenItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Token"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;
export const AnalysisListFileItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}}]} as unknown as DocumentNode;
export const AnalysisSettingFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export const AnalysisListItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export const CustomizedAuditFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CustomizedAudit"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}}]} as unknown as DocumentNode;
export const CollectorItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;
export const DiskStatusFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DiskStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DiskStatus"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalSpace"}},{"kind":"Field","name":{"kind":"Name","value":"freeSpace"}},{"kind":"Field","name":{"kind":"Name","value":"occupiedSpace"}}]}}]} as unknown as DocumentNode;
export const PostgresStatusFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"PostgresStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"PostgresStatus"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalSessionCount"}},{"kind":"Field","name":{"kind":"Name","value":"activeSessionCount"}},{"kind":"Field","name":{"kind":"Name","value":"idleSessionCount"}}]}}]} as unknown as DocumentNode;
export const TeamListItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}}]}}]}}]} as unknown as DocumentNode;
export const UserListItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lastLoginTime"}}]}}]} as unknown as DocumentNode;
export const SystemLicenseFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SystemLicense"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SystemLicense"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"expireTime"}},{"kind":"Field","name":{"kind":"Name","value":"customerCompany"}}]}}]} as unknown as DocumentNode;
export const MgrProjectListItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;
export const MgrAnalysisListItemFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrAnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;
export const AgentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Agent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Agent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"error"}},{"kind":"Field","name":{"kind":"Name","value":"version"}}]}}]} as unknown as DocumentNode;
export const TaskFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Task"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Task"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analysis"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"agent"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userName"}},{"kind":"Field","name":{"kind":"Name","value":"teamName"}}]}}]} as unknown as DocumentNode;
export const SystemSettingFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SystemSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SystemSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"singleUpload"}},{"kind":"Field","name":{"kind":"Name","value":"maxSingleUpload"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"sessionExpTime"}},{"kind":"Field","name":{"kind":"Name","value":"logLevel"}}]}}]} as unknown as DocumentNode;
export const SamlSettingFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SAMLSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SAMLSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"enabled"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"metaData"}},{"kind":"Field","name":{"kind":"Name","value":"autoCreateUser"}},{"kind":"Field","name":{"kind":"Name","value":"autoJoinTeam"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"autoJoinTeamRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export const ProjectOptionFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectOption"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"NewTaskAttributeRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode;
export const TestResultObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"testResultObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}},{"kind":"Field","name":{"kind":"Name","value":"testingNumber"}}]}}]} as unknown as DocumentNode;
export const ProjectListObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectInfo"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"lawStandard"}},{"kind":"Field","name":{"kind":"Name","value":"carModel"}},{"kind":"Field","name":{"kind":"Name","value":"module"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"testResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"testResultObject"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"testResultObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}},{"kind":"Field","name":{"kind":"Name","value":"testingNumber"}}]}}]} as unknown as DocumentNode;
export const CarInfoObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"carInfoObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CarInfoStatisFuse"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"checkStatueMsg"}}]}}]} as unknown as DocumentNode;
export const ModuleInfoObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"moduleInfoObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ModuleInfoStatis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"number"}}]}}]} as unknown as DocumentNode;
export const TeamOverviewRspObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamOverviewRspObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TeamOverviewRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectNumber"}},{"kind":"Field","name":{"kind":"Name","value":"checkingNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passingRate"}},{"kind":"Field","name":{"kind":"Name","value":"unCheckedNumber"}},{"kind":"Field","name":{"kind":"Name","value":"carInfoList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"carInfoObject"}}]}},{"kind":"Field","name":{"kind":"Name","value":"moduleInfoList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"moduleInfoObject"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"carInfoObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CarInfoStatisFuse"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"checkStatueMsg"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"moduleInfoObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ModuleInfoStatis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"number"}}]}}]} as unknown as DocumentNode;
export const ProjectDetailsObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"projectDetailsObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectInfo"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"carModel"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUserId"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"lawStandard"}},{"kind":"Field","name":{"kind":"Name","value":"module"}},{"kind":"Field","name":{"kind":"Name","value":"messages"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}}]}}]} as unknown as DocumentNode;
export const _TestResultObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"_testResultObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passRate"}},{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"testingNumber"}}]}}]} as unknown as DocumentNode;
export const ToolResultObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"toolResultObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ToolItemRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"projectId"}},{"kind":"Field","name":{"kind":"Name","value":"projectName"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}}]}}]} as unknown as DocumentNode;
export const _ToolResultObjectFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"_toolResultObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}}]}}]} as unknown as DocumentNode;
export const _ComplianceResultFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"_complianceResult"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CatalogueTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}},{"kind":"Field","name":{"kind":"Name","value":"catalogueNumber"}}]}}]} as unknown as DocumentNode;
export const CaseClassifyResultRepObjFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CaseClassifyResultRepObj"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CaseClassifyResultRep"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"caseSerialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"checkTool"}},{"kind":"Field","name":{"kind":"Name","value":"hanlder"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}}]}}]} as unknown as DocumentNode;
export const LawCatalogueCheckDetailpObjFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"lawCatalogueCheckDetailpObj"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LawCatalogueCheckDetailRep"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawName"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawCatalogueName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify2"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify3"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify4"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify5"}},{"kind":"Field","name":{"kind":"Name","value":"checkResultCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkPassResultCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkUnPassNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkIgnoreNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkUnTestNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"passStatus"}},{"kind":"Field","name":{"kind":"Name","value":"caseClassifyResultRep"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CaseClassifyResultRepObj"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CaseClassifyResultRepObj"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CaseClassifyResultRep"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"caseSerialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"checkTool"}},{"kind":"Field","name":{"kind":"Name","value":"hanlder"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}}]}}]} as unknown as DocumentNode;
export const InterfaceSecurityFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"InterfaceSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"InterfaceSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"ip"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"inode"}}]}}]} as unknown as DocumentNode;
export const ProcSecurityFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProcSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProcSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"security"}},{"kind":"Field","name":{"kind":"Name","value":"importance"}},{"kind":"Field","name":{"kind":"Name","value":"score"}},{"kind":"Field","name":{"kind":"Name","value":"connectRelation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}},{"kind":"Field","name":{"kind":"Name","value":"baselinePosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}}]} as unknown as DocumentNode;
export const KernelFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Kernel"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Kernel"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"release"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"cmdline"}},{"kind":"Field","name":{"kind":"Name","value":"procVersion"}}]}}]} as unknown as DocumentNode;
export const ThreatAlertFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThreatAlert"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThreatAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"interface"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"InterfaceSecurity"}}]}},{"kind":"Field","name":{"kind":"Name","value":"procSecurity"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProcSecurity"}}]}},{"kind":"Field","name":{"kind":"Name","value":"kernel"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Kernel"}}]}},{"kind":"Field","name":{"kind":"Name","value":"score"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"InterfaceSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"InterfaceSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"ip"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"inode"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProcSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProcSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"security"}},{"kind":"Field","name":{"kind":"Name","value":"importance"}},{"kind":"Field","name":{"kind":"Name","value":"score"}},{"kind":"Field","name":{"kind":"Name","value":"connectRelation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}},{"kind":"Field","name":{"kind":"Name","value":"baselinePosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Kernel"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Kernel"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"release"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"cmdline"}},{"kind":"Field","name":{"kind":"Name","value":"procVersion"}}]}}]} as unknown as DocumentNode;
export const FileFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"File"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"operation"},"name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"ownerUser"}},{"kind":"Field","name":{"kind":"Name","value":"ownerGroup"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"aclEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"linkCount"}},{"kind":"Field","name":{"kind":"Name","value":"linkFile"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"contentType"}},{"kind":"Field","name":{"kind":"Name","value":"arch"}}]}}]} as unknown as DocumentNode;
export const FileWithContentFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FileWithContent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"File"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"File"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"operation"},"name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"ownerUser"}},{"kind":"Field","name":{"kind":"Name","value":"ownerGroup"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"aclEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"linkCount"}},{"kind":"Field","name":{"kind":"Name","value":"linkFile"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"contentType"}},{"kind":"Field","name":{"kind":"Name","value":"arch"}}]}}]} as unknown as DocumentNode;
export const DetailConnectionFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DetailConnection"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DetailConnection"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"column"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"append"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]} as unknown as DocumentNode;
export const CheckRuleFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CheckRule"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}},{"kind":"Field","name":{"kind":"Name","value":"riskReason"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"detail"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]} as unknown as DocumentNode;
export const CheckFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Check"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Check"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rule"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckRule"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CheckRule"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}},{"kind":"Field","name":{"kind":"Name","value":"riskReason"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"detail"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]} as unknown as DocumentNode;
export const ProjectHomeFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectHome"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;
export const SysReportAnalysisFragmentDoc = {"kind":"Document","definitions":[{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SysReportAnalysis"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"baselineAudit"},"name":{"kind":"Name","value":"listAudit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"auditType"},"value":{"kind":"EnumValue","value":"Baseline"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckItem"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"customizedAudit"},"name":{"kind":"Name","value":"listAudit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"auditType"},"value":{"kind":"EnumValue","value":"Custom"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckItem"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CheckItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckList"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}}]} as unknown as DocumentNode;
export const ApkReportGenericDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkReportGeneric"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"classType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"language"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Language"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"auditReport"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"classType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"classType"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ApkCheck"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ApkRule"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"catalogKey"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}},{"kind":"Field","name":{"kind":"Name","value":"riskReason"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"extra"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ApkCheck"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Check"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rule"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ApkRule"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkReportGenericQuery__
 *
 * To run a query within a React component, call `useApkReportGenericQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkReportGenericQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkReportGenericQuery({
 *   variables: {
 *      id: // value for 'id'
 *      classType: // value for 'classType'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useApkReportGenericQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkReportGenericQuery, ApkReportGenericQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkReportGenericQuery, ApkReportGenericQueryVariables>(ApkReportGenericDocument, options);
      }
export function useApkReportGenericLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkReportGenericQuery, ApkReportGenericQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkReportGenericQuery, ApkReportGenericQueryVariables>(ApkReportGenericDocument, options);
        }
export type ApkReportGenericQueryHookResult = ReturnType<typeof useApkReportGenericQuery>;
export type ApkReportGenericLazyQueryHookResult = ReturnType<typeof useApkReportGenericLazyQuery>;
export type ApkReportGenericQueryResult = ApolloReactCommon.QueryResult<ApkReportGenericQuery, ApkReportGenericQueryVariables>;
export const ApkReportBaselineDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkReportBaseline"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"risk"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CheckRisk"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"language"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Language"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"audit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"risk"},"value":{"kind":"Variable","name":{"kind":"Name","value":"risk"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"classKey"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"catalogKey"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkReportBaselineQuery__
 *
 * To run a query within a React component, call `useApkReportBaselineQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkReportBaselineQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkReportBaselineQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      risk: // value for 'risk'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useApkReportBaselineQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkReportBaselineQuery, ApkReportBaselineQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkReportBaselineQuery, ApkReportBaselineQueryVariables>(ApkReportBaselineDocument, options);
      }
export function useApkReportBaselineLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkReportBaselineQuery, ApkReportBaselineQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkReportBaselineQuery, ApkReportBaselineQueryVariables>(ApkReportBaselineDocument, options);
        }
export type ApkReportBaselineQueryHookResult = ReturnType<typeof useApkReportBaselineQuery>;
export type ApkReportBaselineLazyQueryHookResult = ReturnType<typeof useApkReportBaselineLazyQuery>;
export type ApkReportBaselineQueryResult = ApolloReactCommon.QueryResult<ApkReportBaselineQuery, ApkReportBaselineQueryVariables>;
export const ApkOverviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkOverview"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"manifest"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"packageName"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"md5"}},{"kind":"Field","name":{"kind":"Name","value":"beginTime"}},{"kind":"Field","name":{"kind":"Name","value":"allowBackup"}},{"kind":"Field","name":{"kind":"Name","value":"debuggable"}}]}},{"kind":"Field","name":{"kind":"Name","value":"overview"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkOverviewQuery__
 *
 * To run a query within a React component, call `useApkOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkOverviewQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useApkOverviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkOverviewQuery, ApkOverviewQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkOverviewQuery, ApkOverviewQueryVariables>(ApkOverviewDocument, options);
      }
export function useApkOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkOverviewQuery, ApkOverviewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkOverviewQuery, ApkOverviewQueryVariables>(ApkOverviewDocument, options);
        }
export type ApkOverviewQueryHookResult = ReturnType<typeof useApkOverviewQuery>;
export type ApkOverviewLazyQueryHookResult = ReturnType<typeof useApkOverviewLazyQuery>;
export type ApkOverviewQueryResult = ApolloReactCommon.QueryResult<ApkOverviewQuery, ApkOverviewQueryVariables>;
export const ApkDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"signature"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"from"}},{"kind":"Field","name":{"kind":"Name","value":"to"}},{"kind":"Field","name":{"kind":"Name","value":"oid"}},{"kind":"Field","name":{"kind":"Name","value":"subject"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"algorithm"}}]}},{"kind":"Field","name":{"kind":"Name","value":"components"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activities"}},{"kind":"Field","name":{"kind":"Name","value":"services"}},{"kind":"Field","name":{"kind":"Name","value":"receivers"}},{"kind":"Field","name":{"kind":"Name","value":"providers"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkDetailQuery__
 *
 * To run a query within a React component, call `useApkDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useApkDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkDetailQuery, ApkDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkDetailQuery, ApkDetailQueryVariables>(ApkDetailDocument, options);
      }
export function useApkDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkDetailQuery, ApkDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkDetailQuery, ApkDetailQueryVariables>(ApkDetailDocument, options);
        }
export type ApkDetailQueryHookResult = ReturnType<typeof useApkDetailQuery>;
export type ApkDetailLazyQueryHookResult = ReturnType<typeof useApkDetailLazyQuery>;
export type ApkDetailQueryResult = ApolloReactCommon.QueryResult<ApkDetailQuery, ApkDetailQueryVariables>;
export const PublicComponentsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"PublicComponents"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"components"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activities"}},{"kind":"Field","name":{"kind":"Name","value":"services"}},{"kind":"Field","name":{"kind":"Name","value":"receivers"}},{"kind":"Field","name":{"kind":"Name","value":"providers"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __usePublicComponentsQuery__
 *
 * To run a query within a React component, call `usePublicComponentsQuery` and pass it any options that fit your needs.
 * When your component renders, `usePublicComponentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePublicComponentsQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePublicComponentsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<PublicComponentsQuery, PublicComponentsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<PublicComponentsQuery, PublicComponentsQueryVariables>(PublicComponentsDocument, options);
      }
export function usePublicComponentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PublicComponentsQuery, PublicComponentsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<PublicComponentsQuery, PublicComponentsQueryVariables>(PublicComponentsDocument, options);
        }
export type PublicComponentsQueryHookResult = ReturnType<typeof usePublicComponentsQuery>;
export type PublicComponentsLazyQueryHookResult = ReturnType<typeof usePublicComponentsLazyQuery>;
export type PublicComponentsQueryResult = ApolloReactCommon.QueryResult<PublicComponentsQuery, PublicComponentsQueryVariables>;
export const ApkDetailPermissionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkDetailPermission"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"permission"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkDetailPermissionQuery__
 *
 * To run a query within a React component, call `useApkDetailPermissionQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkDetailPermissionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkDetailPermissionQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useApkDetailPermissionQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkDetailPermissionQuery, ApkDetailPermissionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkDetailPermissionQuery, ApkDetailPermissionQueryVariables>(ApkDetailPermissionDocument, options);
      }
export function useApkDetailPermissionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkDetailPermissionQuery, ApkDetailPermissionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkDetailPermissionQuery, ApkDetailPermissionQueryVariables>(ApkDetailPermissionDocument, options);
        }
export type ApkDetailPermissionQueryHookResult = ReturnType<typeof useApkDetailPermissionQuery>;
export type ApkDetailPermissionLazyQueryHookResult = ReturnType<typeof useApkDetailPermissionLazyQuery>;
export type ApkDetailPermissionQueryResult = ApolloReactCommon.QueryResult<ApkDetailPermissionQuery, ApkDetailPermissionQueryVariables>;
export const ApkDetailSdkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkDetailSDK"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sdk"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkDetailSdkQuery__
 *
 * To run a query within a React component, call `useApkDetailSdkQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkDetailSdkQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkDetailSdkQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useApkDetailSdkQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkDetailSdkQuery, ApkDetailSdkQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkDetailSdkQuery, ApkDetailSdkQueryVariables>(ApkDetailSdkDocument, options);
      }
export function useApkDetailSdkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkDetailSdkQuery, ApkDetailSdkQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkDetailSdkQuery, ApkDetailSdkQueryVariables>(ApkDetailSdkDocument, options);
        }
export type ApkDetailSdkQueryHookResult = ReturnType<typeof useApkDetailSdkQuery>;
export type ApkDetailSdkLazyQueryHookResult = ReturnType<typeof useApkDetailSdkLazyQuery>;
export type ApkDetailSdkQueryResult = ApolloReactCommon.QueryResult<ApkDetailSdkQuery, ApkDetailSdkQueryVariables>;
export const ApkSensitiveInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkSensitiveInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"type"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveType"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"domain"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ip"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}},"defaultValue":{"kind":"BooleanValue","value":false}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sensitiveInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"type"},"value":{"kind":"Variable","name":{"kind":"Name","value":"type"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}},{"kind":"Argument","name":{"kind":"Name","value":"domain"},"value":{"kind":"Variable","name":{"kind":"Name","value":"domain"}}},{"kind":"Argument","name":{"kind":"Name","value":"ip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ip"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveDomain"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveIP"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"type","block":false},{"kind":"StringValue","value":"scheme","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"fieldValuesWithCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"domain","block":false}]}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"skip"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}]}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveFile"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveIP"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveIP"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ip"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"files"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveFile"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveDomain"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveDomain"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"domain"}},{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"detail"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"files"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveFile"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveContent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveContent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkSensitiveInfoQuery__
 *
 * To run a query within a React component, call `useApkSensitiveInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkSensitiveInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkSensitiveInfoQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      type: // value for 'type'
 *      domain: // value for 'domain'
 *      ip: // value for 'ip'
 *      withDetail: // value for 'withDetail'
 *      filterFields: // value for 'filterFields'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useApkSensitiveInfoQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkSensitiveInfoQuery, ApkSensitiveInfoQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkSensitiveInfoQuery, ApkSensitiveInfoQueryVariables>(ApkSensitiveInfoDocument, options);
      }
export function useApkSensitiveInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkSensitiveInfoQuery, ApkSensitiveInfoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkSensitiveInfoQuery, ApkSensitiveInfoQueryVariables>(ApkSensitiveInfoDocument, options);
        }
export type ApkSensitiveInfoQueryHookResult = ReturnType<typeof useApkSensitiveInfoQuery>;
export type ApkSensitiveInfoLazyQueryHookResult = ReturnType<typeof useApkSensitiveInfoLazyQuery>;
export type ApkSensitiveInfoQueryResult = ApolloReactCommon.QueryResult<ApkSensitiveInfoQuery, ApkSensitiveInfoQueryVariables>;
export const ApkProjectFileContentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkProjectFileContent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"FileWithContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FileWithContent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"File"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"File"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"operation"},"name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"ownerUser"}},{"kind":"Field","name":{"kind":"Name","value":"ownerGroup"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"aclEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"linkCount"}},{"kind":"Field","name":{"kind":"Name","value":"linkFile"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"contentType"}},{"kind":"Field","name":{"kind":"Name","value":"arch"}}]}}]} as unknown as DocumentNode;

/**
 * __useApkProjectFileContentQuery__
 *
 * To run a query within a React component, call `useApkProjectFileContentQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkProjectFileContentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkProjectFileContentQuery({
 *   variables: {
 *      id: // value for 'id'
 *      fileId: // value for 'fileId'
 *   },
 * });
 */
export function useApkProjectFileContentQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkProjectFileContentQuery, ApkProjectFileContentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkProjectFileContentQuery, ApkProjectFileContentQueryVariables>(ApkProjectFileContentDocument, options);
      }
export function useApkProjectFileContentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkProjectFileContentQuery, ApkProjectFileContentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkProjectFileContentQuery, ApkProjectFileContentQueryVariables>(ApkProjectFileContentDocument, options);
        }
export type ApkProjectFileContentQueryHookResult = ReturnType<typeof useApkProjectFileContentQuery>;
export type ApkProjectFileContentLazyQueryHookResult = ReturnType<typeof useApkProjectFileContentLazyQuery>;
export type ApkProjectFileContentQueryResult = ApolloReactCommon.QueryResult<ApkProjectFileContentQuery, ApkProjectFileContentQueryVariables>;
export const ApkProjectFileTreeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkProjectFileTree"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"virtual"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkProjectFileTreeQuery__
 *
 * To run a query within a React component, call `useApkProjectFileTreeQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkProjectFileTreeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkProjectFileTreeQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      path: // value for 'path'
 *      fileId: // value for 'fileId'
 *   },
 * });
 */
export function useApkProjectFileTreeQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkProjectFileTreeQuery, ApkProjectFileTreeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkProjectFileTreeQuery, ApkProjectFileTreeQueryVariables>(ApkProjectFileTreeDocument, options);
      }
export function useApkProjectFileTreeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkProjectFileTreeQuery, ApkProjectFileTreeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkProjectFileTreeQuery, ApkProjectFileTreeQueryVariables>(ApkProjectFileTreeDocument, options);
        }
export type ApkProjectFileTreeQueryHookResult = ReturnType<typeof useApkProjectFileTreeQuery>;
export type ApkProjectFileTreeLazyQueryHookResult = ReturnType<typeof useApkProjectFileTreeLazyQuery>;
export type ApkProjectFileTreeQueryResult = ApolloReactCommon.QueryResult<ApkProjectFileTreeQuery, ApkProjectFileTreeQueryVariables>;
export const ApkProjectFileDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkProjectFile"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"noneVirtual"},"value":{"kind":"BooleanValue","value":true}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}},{"kind":"Argument","name":{"kind":"Name","value":"searchField"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"File"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"type","block":false},{"kind":"StringValue","value":"ownerUser","block":false},{"kind":"StringValue","value":"ownerGroup","block":false}]}}]}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"File"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"operation"},"name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"ownerUser"}},{"kind":"Field","name":{"kind":"Name","value":"ownerGroup"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"aclEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"linkCount"}},{"kind":"Field","name":{"kind":"Name","value":"linkFile"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"contentType"}},{"kind":"Field","name":{"kind":"Name","value":"arch"}}]}}]} as unknown as DocumentNode;

/**
 * __useApkProjectFileQuery__
 *
 * To run a query within a React component, call `useApkProjectFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkProjectFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkProjectFileQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      path: // value for 'path'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *      searchField: // value for 'searchField'
 *   },
 * });
 */
export function useApkProjectFileQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkProjectFileQuery, ApkProjectFileQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkProjectFileQuery, ApkProjectFileQueryVariables>(ApkProjectFileDocument, options);
      }
export function useApkProjectFileLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkProjectFileQuery, ApkProjectFileQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkProjectFileQuery, ApkProjectFileQueryVariables>(ApkProjectFileDocument, options);
        }
export type ApkProjectFileQueryHookResult = ReturnType<typeof useApkProjectFileQuery>;
export type ApkProjectFileLazyQueryHookResult = ReturnType<typeof useApkProjectFileLazyQuery>;
export type ApkProjectFileQueryResult = ApolloReactCommon.QueryResult<ApkProjectFileQuery, ApkProjectFileQueryVariables>;
export const ApkProjectCveSecDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkProjectCVESec"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pid"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"component"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"version"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withCVE"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"libCveSec"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pid"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"component"},"value":{"kind":"Variable","name":{"kind":"Name","value":"component"}}},{"kind":"Argument","name":{"kind":"Name","value":"version"},"value":{"kind":"Variable","name":{"kind":"Name","value":"version"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"CVESec"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"time","block":false},{"kind":"StringValue","value":"cvssRank","block":false},{"kind":"StringValue","value":"status","block":false},{"kind":"StringValue","value":"detail","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CvssRankStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CvssRankStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVE"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVE"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"cvssRank"}},{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"poc"}},{"kind":"Field","name":{"kind":"Name","value":"patch"}},{"kind":"Field","name":{"kind":"Name","value":"exp"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"cvss3Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"attackComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"privilegesRequired"}},{"kind":"Field","name":{"kind":"Name","value":"userInteraction"}},{"kind":"Field","name":{"kind":"Name","value":"scope"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cvss2Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"accessVector"}},{"kind":"Field","name":{"kind":"Name","value":"accessComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"authentication"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVESec"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVESec"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"path"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CvssRankStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withCVE"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CVE"}}]}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkProjectCveSecQuery__
 *
 * To run a query within a React component, call `useApkProjectCveSecQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkProjectCveSecQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkProjectCveSecQuery({
 *   variables: {
 *      id: // value for 'id'
 *      pid: // value for 'pid'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      component: // value for 'component'
 *      version: // value for 'version'
 *      filterFields: // value for 'filterFields'
 *      withCVE: // value for 'withCVE'
 *   },
 * });
 */
export function useApkProjectCveSecQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkProjectCveSecQuery, ApkProjectCveSecQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkProjectCveSecQuery, ApkProjectCveSecQueryVariables>(ApkProjectCveSecDocument, options);
      }
export function useApkProjectCveSecLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkProjectCveSecQuery, ApkProjectCveSecQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkProjectCveSecQuery, ApkProjectCveSecQueryVariables>(ApkProjectCveSecDocument, options);
        }
export type ApkProjectCveSecQueryHookResult = ReturnType<typeof useApkProjectCveSecQuery>;
export type ApkProjectCveSecLazyQueryHookResult = ReturnType<typeof useApkProjectCveSecLazyQuery>;
export type ApkProjectCveSecQueryResult = ApolloReactCommon.QueryResult<ApkProjectCveSecQuery, ApkProjectCveSecQueryVariables>;
export const ApkProjectLicenseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkProjectLicense"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"component"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withFile"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"license"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"component"},"value":{"kind":"Variable","name":{"kind":"Name","value":"component"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"License"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"risk","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"fieldValuesWithCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"license","block":false}]}}]}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"LicenseTag"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LicenseTag"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"License"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"License"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"source"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"required"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"forbidden"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"permitted"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"risk"},"name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withFile"}}}]}]}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkProjectLicenseQuery__
 *
 * To run a query within a React component, call `useApkProjectLicenseQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkProjectLicenseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkProjectLicenseQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      component: // value for 'component'
 *      filterFields: // value for 'filterFields'
 *      withContent: // value for 'withContent'
 *      withFile: // value for 'withFile'
 *   },
 * });
 */
export function useApkProjectLicenseQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkProjectLicenseQuery, ApkProjectLicenseQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkProjectLicenseQuery, ApkProjectLicenseQueryVariables>(ApkProjectLicenseDocument, options);
      }
export function useApkProjectLicenseLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkProjectLicenseQuery, ApkProjectLicenseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkProjectLicenseQuery, ApkProjectLicenseQueryVariables>(ApkProjectLicenseDocument, options);
        }
export type ApkProjectLicenseQueryHookResult = ReturnType<typeof useApkProjectLicenseQuery>;
export type ApkProjectLicenseLazyQueryHookResult = ReturnType<typeof useApkProjectLicenseLazyQuery>;
export type ApkProjectLicenseQueryResult = ApolloReactCommon.QueryResult<ApkProjectLicenseQuery, ApkProjectLicenseQueryVariables>;
export const ApkPositionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ApkPosition"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"position"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useApkPositionQuery__
 *
 * To run a query within a React component, call `useApkPositionQuery` and pass it any options that fit your needs.
 * When your component renders, `useApkPositionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useApkPositionQuery({
 *   variables: {
 *      id: // value for 'id'
 *      field: // value for 'field'
 *   },
 * });
 */
export function useApkPositionQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ApkPositionQuery, ApkPositionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ApkPositionQuery, ApkPositionQueryVariables>(ApkPositionDocument, options);
      }
export function useApkPositionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ApkPositionQuery, ApkPositionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ApkPositionQuery, ApkPositionQueryVariables>(ApkPositionDocument, options);
        }
export type ApkPositionQueryHookResult = ReturnType<typeof useApkPositionQuery>;
export type ApkPositionLazyQueryHookResult = ReturnType<typeof useApkPositionLazyQuery>;
export type ApkPositionQueryResult = ApolloReactCommon.QueryResult<ApkPositionQuery, ApkPositionQueryVariables>;
export const RealtimeLogDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"RealtimeLog"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"log"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useRealtimeLogSubscription__
 *
 * To run a query within a React component, call `useRealtimeLogSubscription` and pass it any options that fit your needs.
 * When your component renders, `useRealtimeLogSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRealtimeLogSubscription({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useRealtimeLogSubscription(baseOptions: ApolloReactHooks.SubscriptionHookOptions<RealtimeLogSubscription, RealtimeLogSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useSubscription<RealtimeLogSubscription, RealtimeLogSubscriptionVariables>(RealtimeLogDocument, options);
      }
export type RealtimeLogSubscriptionHookResult = ReturnType<typeof useRealtimeLogSubscription>;
export type RealtimeLogSubscriptionResult = ApolloReactCommon.SubscriptionResult<RealtimeLogSubscription>;
export const EditPasswordDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"EditPassword"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cur"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"newPwd"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editPassword"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"currentPassword"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cur"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"newPassword"},"value":{"kind":"Variable","name":{"kind":"Name","value":"newPwd"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export type EditPasswordMutationFn = ApolloReactCommon.MutationFunction<EditPasswordMutation, EditPasswordMutationVariables>;

/**
 * __useEditPasswordMutation__
 *
 * To run a mutation, you first call `useEditPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editPasswordMutation, { data, loading, error }] = useEditPasswordMutation({
 *   variables: {
 *      cur: // value for 'cur'
 *      newPwd: // value for 'newPwd'
 *   },
 * });
 */
export function useEditPasswordMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditPasswordMutation, EditPasswordMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<EditPasswordMutation, EditPasswordMutationVariables>(EditPasswordDocument, options);
      }
export type EditPasswordMutationHookResult = ReturnType<typeof useEditPasswordMutation>;
export type EditPasswordMutationResult = ApolloReactCommon.MutationResult<EditPasswordMutation>;
export type EditPasswordMutationOptions = ApolloReactCommon.BaseMutationOptions<EditPasswordMutation, EditPasswordMutationVariables>;
export const ExpiredLicenseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ExpiredLicense"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"expiredLicense"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"expireTime"}},{"kind":"Field","name":{"kind":"Name","value":"customerCompany"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useExpiredLicenseQuery__
 *
 * To run a query within a React component, call `useExpiredLicenseQuery` and pass it any options that fit your needs.
 * When your component renders, `useExpiredLicenseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useExpiredLicenseQuery({
 *   variables: {
 *   },
 * });
 */
export function useExpiredLicenseQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ExpiredLicenseQuery, ExpiredLicenseQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ExpiredLicenseQuery, ExpiredLicenseQueryVariables>(ExpiredLicenseDocument, options);
      }
export function useExpiredLicenseLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ExpiredLicenseQuery, ExpiredLicenseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ExpiredLicenseQuery, ExpiredLicenseQueryVariables>(ExpiredLicenseDocument, options);
        }
export type ExpiredLicenseQueryHookResult = ReturnType<typeof useExpiredLicenseQuery>;
export type ExpiredLicenseLazyQueryHookResult = ReturnType<typeof useExpiredLicenseLazyQuery>;
export type ExpiredLicenseQueryResult = ApolloReactCommon.QueryResult<ExpiredLicenseQuery, ExpiredLicenseQueryVariables>;
export const FeatureConfigDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"FeatureConfig"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"feature"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"FeatureConfig"}}]}},{"kind":"Field","name":{"kind":"Name","value":"reportFeature"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ReportFeatureConfig"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FeatureConfig"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"FeatureConfig"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"systemLinux"}},{"kind":"Field","name":{"kind":"Name","value":"systemAndroid"}},{"kind":"Field","name":{"kind":"Name","value":"systemOther"}},{"kind":"Field","name":{"kind":"Name","value":"artifactAPK"}},{"kind":"Field","name":{"kind":"Name","value":"artifactRTOS"}},{"kind":"Field","name":{"kind":"Name","value":"artifactPackage"}},{"kind":"Field","name":{"kind":"Name","value":"uploadPackage"}},{"kind":"Field","name":{"kind":"Name","value":"uploadRTOSFirmware"}},{"kind":"Field","name":{"kind":"Name","value":"uploadImage"}},{"kind":"Field","name":{"kind":"Name","value":"uploadCDat"}},{"kind":"Field","name":{"kind":"Name","value":"uploadAPK"}},{"kind":"Field","name":{"kind":"Name","value":"plugin"}},{"kind":"Field","name":{"kind":"Name","value":"collector"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimitEnabled"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ReportFeatureConfig"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ReportFeatureConfig"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"}},{"kind":"Field","name":{"kind":"Name","value":"custom"}},{"kind":"Field","name":{"kind":"Name","value":"cveSec"}},{"kind":"Field","name":{"kind":"Name","value":"cveKernel"}},{"kind":"Field","name":{"kind":"Name","value":"license"}},{"kind":"Field","name":{"kind":"Name","value":"detail"}},{"kind":"Field","name":{"kind":"Name","value":"sensitive"}},{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}}]} as unknown as DocumentNode;

/**
 * __useFeatureConfigQuery__
 *
 * To run a query within a React component, call `useFeatureConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useFeatureConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFeatureConfigQuery({
 *   variables: {
 *   },
 * });
 */
export function useFeatureConfigQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FeatureConfigQuery, FeatureConfigQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<FeatureConfigQuery, FeatureConfigQueryVariables>(FeatureConfigDocument, options);
      }
export function useFeatureConfigLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FeatureConfigQuery, FeatureConfigQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<FeatureConfigQuery, FeatureConfigQueryVariables>(FeatureConfigDocument, options);
        }
export type FeatureConfigQueryHookResult = ReturnType<typeof useFeatureConfigQuery>;
export type FeatureConfigLazyQueryHookResult = ReturnType<typeof useFeatureConfigLazyQuery>;
export type FeatureConfigQueryResult = ApolloReactCommon.QueryResult<FeatureConfigQuery, FeatureConfigQueryVariables>;
export const ViewerDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useViewerQuery__
 *
 * To run a query within a React component, call `useViewerQuery` and pass it any options that fit your needs.
 * When your component renders, `useViewerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerQuery({
 *   variables: {
 *   },
 * });
 */
export function useViewerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
      }
export function useViewerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ViewerQuery, ViewerQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ViewerQuery, ViewerQueryVariables>(ViewerDocument, options);
        }
export type ViewerQueryHookResult = ReturnType<typeof useViewerQuery>;
export type ViewerLazyQueryHookResult = ReturnType<typeof useViewerLazyQuery>;
export type ViewerQueryResult = ApolloReactCommon.QueryResult<ViewerQuery, ViewerQueryVariables>;
export const ReportDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Report"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"analysisName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"language"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Language"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"teamByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamName"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"project"},"name":{"kind":"Name","value":"projectByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectName"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectHome"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"analysisByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"analysisName"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SysReportAnalysis"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"ApkReportAnalysis"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ApkReportAnalysis"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ApkReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"audit"},"name":{"kind":"Name","value":"listAudit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckItem"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectHome"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CheckItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CheckList"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"list"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"value"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SysReportAnalysis"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"baselineAudit"},"name":{"kind":"Name","value":"listAudit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"auditType"},"value":{"kind":"EnumValue","value":"Baseline"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckItem"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"customizedAudit"},"name":{"kind":"Name","value":"listAudit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"auditType"},"value":{"kind":"EnumValue","value":"Custom"}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckItem"}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useReportQuery__
 *
 * To run a query within a React component, call `useReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReportQuery({
 *   variables: {
 *      teamName: // value for 'teamName'
 *      projectName: // value for 'projectName'
 *      analysisName: // value for 'analysisName'
 *      language: // value for 'language'
 *   },
 * });
 */
export function useReportQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ReportQuery, ReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ReportQuery, ReportQueryVariables>(ReportDocument, options);
      }
export function useReportLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportQuery, ReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ReportQuery, ReportQueryVariables>(ReportDocument, options);
        }
export type ReportQueryHookResult = ReturnType<typeof useReportQuery>;
export type ReportLazyQueryHookResult = ReturnType<typeof useReportLazyQuery>;
export type ReportQueryResult = ApolloReactCommon.QueryResult<ReportQuery, ReportQueryVariables>;
export const LoginDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Login"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"username"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"password"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"loginByPassword"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"username"},"value":{"kind":"Variable","name":{"kind":"Name","value":"username"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"password"},"value":{"kind":"Variable","name":{"kind":"Name","value":"password"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"token"}}]}}]}}]} as unknown as DocumentNode;
export type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      username: // value for 'username'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;
export type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const TeamRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamRoleQuery__
 *
 * To run a query within a React component, call `useTeamRoleQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamRoleQuery({
 *   variables: {
 *   },
 * });
 */
export function useTeamRoleQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeamRoleQuery, TeamRoleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamRoleQuery, TeamRoleQueryVariables>(TeamRoleDocument, options);
      }
export function useTeamRoleLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamRoleQuery, TeamRoleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamRoleQuery, TeamRoleQueryVariables>(TeamRoleDocument, options);
        }
export type TeamRoleQueryHookResult = ReturnType<typeof useTeamRoleQuery>;
export type TeamRoleLazyQueryHookResult = ReturnType<typeof useTeamRoleLazyQuery>;
export type TeamRoleQueryResult = ApolloReactCommon.QueryResult<TeamRoleQuery, TeamRoleQueryVariables>;
export const TeamUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"manager"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamUserItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamUserItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"teamRole"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamUserQuery__
 *
 * To run a query within a React component, call `useTeamUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamUserQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useTeamUserQuery(baseOptions: ApolloReactHooks.QueryHookOptions<TeamUserQuery, TeamUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamUserQuery, TeamUserQueryVariables>(TeamUserDocument, options);
      }
export function useTeamUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamUserQuery, TeamUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamUserQuery, TeamUserQueryVariables>(TeamUserDocument, options);
        }
export type TeamUserQueryHookResult = ReturnType<typeof useTeamUserQuery>;
export type TeamUserLazyQueryHookResult = ReturnType<typeof useTeamUserLazyQuery>;
export type TeamUserQueryResult = ApolloReactCommon.QueryResult<TeamUserQuery, TeamUserQueryVariables>;
export const TeamTaskDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamTask"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"manager"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"task"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Task"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"projectName","block":false},{"kind":"StringValue","value":"status","block":false},{"kind":"StringValue","value":"command","block":false},{"kind":"StringValue","value":"userName","block":false}]}}]}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Task"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Task"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analysis"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"agent"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userName"}},{"kind":"Field","name":{"kind":"Name","value":"teamName"}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamTaskQuery__
 *
 * To run a query within a React component, call `useTeamTaskQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamTaskQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamTaskQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useTeamTaskQuery(baseOptions: ApolloReactHooks.QueryHookOptions<TeamTaskQuery, TeamTaskQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamTaskQuery, TeamTaskQueryVariables>(TeamTaskDocument, options);
      }
export function useTeamTaskLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamTaskQuery, TeamTaskQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamTaskQuery, TeamTaskQueryVariables>(TeamTaskDocument, options);
        }
export type TeamTaskQueryHookResult = ReturnType<typeof useTeamTaskQuery>;
export type TeamTaskLazyQueryHookResult = ReturnType<typeof useTeamTaskLazyQuery>;
export type TeamTaskQueryResult = ApolloReactCommon.QueryResult<TeamTaskQuery, TeamTaskQueryVariables>;
export const TeamAddUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TeamAddUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"TeamUserInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamUserItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamUserItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"teamRole"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type TeamAddUserMutationFn = ApolloReactCommon.MutationFunction<TeamAddUserMutation, TeamAddUserMutationVariables>;

/**
 * __useTeamAddUserMutation__
 *
 * To run a mutation, you first call `useTeamAddUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTeamAddUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [teamAddUserMutation, { data, loading, error }] = useTeamAddUserMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTeamAddUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TeamAddUserMutation, TeamAddUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TeamAddUserMutation, TeamAddUserMutationVariables>(TeamAddUserDocument, options);
      }
export type TeamAddUserMutationHookResult = ReturnType<typeof useTeamAddUserMutation>;
export type TeamAddUserMutationResult = ApolloReactCommon.MutationResult<TeamAddUserMutation>;
export type TeamAddUserMutationOptions = ApolloReactCommon.BaseMutationOptions<TeamAddUserMutation, TeamAddUserMutationVariables>;
export const TeamEditUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TeamEditUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"TeamUserInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamUserItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamUserItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"teamRole"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type TeamEditUserMutationFn = ApolloReactCommon.MutationFunction<TeamEditUserMutation, TeamEditUserMutationVariables>;

/**
 * __useTeamEditUserMutation__
 *
 * To run a mutation, you first call `useTeamEditUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTeamEditUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [teamEditUserMutation, { data, loading, error }] = useTeamEditUserMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTeamEditUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TeamEditUserMutation, TeamEditUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TeamEditUserMutation, TeamEditUserMutationVariables>(TeamEditUserDocument, options);
      }
export type TeamEditUserMutationHookResult = ReturnType<typeof useTeamEditUserMutation>;
export type TeamEditUserMutationResult = ApolloReactCommon.MutationResult<TeamEditUserMutation>;
export type TeamEditUserMutationOptions = ApolloReactCommon.BaseMutationOptions<TeamEditUserMutation, TeamEditUserMutationVariables>;
export const TeamRemoveUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TeamRemoveUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"removeUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamUserItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamUserItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"teamRole"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type TeamRemoveUserMutationFn = ApolloReactCommon.MutationFunction<TeamRemoveUserMutation, TeamRemoveUserMutationVariables>;

/**
 * __useTeamRemoveUserMutation__
 *
 * To run a mutation, you first call `useTeamRemoveUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTeamRemoveUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [teamRemoveUserMutation, { data, loading, error }] = useTeamRemoveUserMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useTeamRemoveUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TeamRemoveUserMutation, TeamRemoveUserMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TeamRemoveUserMutation, TeamRemoveUserMutationVariables>(TeamRemoveUserDocument, options);
      }
export type TeamRemoveUserMutationHookResult = ReturnType<typeof useTeamRemoveUserMutation>;
export type TeamRemoveUserMutationResult = ApolloReactCommon.MutationResult<TeamRemoveUserMutation>;
export type TeamRemoveUserMutationOptions = ApolloReactCommon.BaseMutationOptions<TeamRemoveUserMutation, TeamRemoveUserMutationVariables>;
export const TeamIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamID"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamIdQuery__
 *
 * To run a query within a React component, call `useTeamIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamIdQuery({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function useTeamIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<TeamIdQuery, TeamIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamIdQuery, TeamIdQueryVariables>(TeamIdDocument, options);
      }
export function useTeamIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamIdQuery, TeamIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamIdQuery, TeamIdQueryVariables>(TeamIdDocument, options);
        }
export type TeamIdQueryHookResult = ReturnType<typeof useTeamIdQuery>;
export type TeamIdLazyQueryHookResult = ReturnType<typeof useTeamIdLazyQuery>;
export type TeamIdQueryResult = ApolloReactCommon.QueryResult<TeamIdQuery, TeamIdQueryVariables>;
export const TeamLimitDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamLimit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamLimitQuery__
 *
 * To run a query within a React component, call `useTeamLimitQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamLimitQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamLimitQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useTeamLimitQuery(baseOptions: ApolloReactHooks.QueryHookOptions<TeamLimitQuery, TeamLimitQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamLimitQuery, TeamLimitQueryVariables>(TeamLimitDocument, options);
      }
export function useTeamLimitLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamLimitQuery, TeamLimitQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamLimitQuery, TeamLimitQueryVariables>(TeamLimitDocument, options);
        }
export type TeamLimitQueryHookResult = ReturnType<typeof useTeamLimitQuery>;
export type TeamLimitLazyQueryHookResult = ReturnType<typeof useTeamLimitLazyQuery>;
export type TeamLimitQueryResult = ApolloReactCommon.QueryResult<TeamLimitQuery, TeamLimitQueryVariables>;
export const TeamOverviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamOverview"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}}]}},{"kind":"Field","name":{"kind":"Name","value":"overview"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"recentEvent"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamOverviewRecentItem"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"project"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offset"},"value":{"kind":"IntValue","value":"0"}},{"kind":"ObjectField","name":{"kind":"Name","value":"limit"},"value":{"kind":"IntValue","value":"0"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamOverviewRecentItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamOverviewQuery__
 *
 * To run a query within a React component, call `useTeamOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamOverviewQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useTeamOverviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<TeamOverviewQuery, TeamOverviewQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamOverviewQuery, TeamOverviewQueryVariables>(TeamOverviewDocument, options);
      }
export function useTeamOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamOverviewQuery, TeamOverviewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamOverviewQuery, TeamOverviewQueryVariables>(TeamOverviewDocument, options);
        }
export type TeamOverviewQueryHookResult = ReturnType<typeof useTeamOverviewQuery>;
export type TeamOverviewLazyQueryHookResult = ReturnType<typeof useTeamOverviewLazyQuery>;
export type TeamOverviewQueryResult = ApolloReactCommon.QueryResult<TeamOverviewQuery, TeamOverviewQueryVariables>;
export const ProjectListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectListItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"status","block":false}]}}]}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectListQuery__
 *
 * To run a query within a React component, call `useProjectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useProjectListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectListQuery, ProjectListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectListQuery, ProjectListQueryVariables>(ProjectListDocument, options);
      }
export function useProjectListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectListQuery, ProjectListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectListQuery, ProjectListQueryVariables>(ProjectListDocument, options);
        }
export type ProjectListQueryHookResult = ReturnType<typeof useProjectListQuery>;
export type ProjectListLazyQueryHookResult = ReturnType<typeof useProjectListLazyQuery>;
export type ProjectListQueryResult = ApolloReactCommon.QueryResult<ProjectListQuery, ProjectListQueryVariables>;
export const ProjectNewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ProjectNew"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateProjectInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]} as unknown as DocumentNode;
export type ProjectNewMutationFn = ApolloReactCommon.MutationFunction<ProjectNewMutation, ProjectNewMutationVariables>;

/**
 * __useProjectNewMutation__
 *
 * To run a mutation, you first call `useProjectNewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProjectNewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [projectNewMutation, { data, loading, error }] = useProjectNewMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useProjectNewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ProjectNewMutation, ProjectNewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ProjectNewMutation, ProjectNewMutationVariables>(ProjectNewDocument, options);
      }
export type ProjectNewMutationHookResult = ReturnType<typeof useProjectNewMutation>;
export type ProjectNewMutationResult = ApolloReactCommon.MutationResult<ProjectNewMutation>;
export type ProjectNewMutationOptions = ApolloReactCommon.BaseMutationOptions<ProjectNewMutation, ProjectNewMutationVariables>;
export const ProjectEditDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ProjectEdit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"description"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"description"},"value":{"kind":"Variable","name":{"kind":"Name","value":"description"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]} as unknown as DocumentNode;
export type ProjectEditMutationFn = ApolloReactCommon.MutationFunction<ProjectEditMutation, ProjectEditMutationVariables>;

/**
 * __useProjectEditMutation__
 *
 * To run a mutation, you first call `useProjectEditMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProjectEditMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [projectEditMutation, { data, loading, error }] = useProjectEditMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      description: // value for 'description'
 *   },
 * });
 */
export function useProjectEditMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ProjectEditMutation, ProjectEditMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ProjectEditMutation, ProjectEditMutationVariables>(ProjectEditDocument, options);
      }
export type ProjectEditMutationHookResult = ReturnType<typeof useProjectEditMutation>;
export type ProjectEditMutationResult = ApolloReactCommon.MutationResult<ProjectEditMutation>;
export type ProjectEditMutationOptions = ApolloReactCommon.BaseMutationOptions<ProjectEditMutation, ProjectEditMutationVariables>;
export const ProjectDeleteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ProjectDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]} as unknown as DocumentNode;
export type ProjectDeleteMutationFn = ApolloReactCommon.MutationFunction<ProjectDeleteMutation, ProjectDeleteMutationVariables>;

/**
 * __useProjectDeleteMutation__
 *
 * To run a mutation, you first call `useProjectDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProjectDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [projectDeleteMutation, { data, loading, error }] = useProjectDeleteMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useProjectDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ProjectDeleteMutation, ProjectDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ProjectDeleteMutation, ProjectDeleteMutationVariables>(ProjectDeleteDocument, options);
      }
export type ProjectDeleteMutationHookResult = ReturnType<typeof useProjectDeleteMutation>;
export type ProjectDeleteMutationResult = ApolloReactCommon.MutationResult<ProjectDeleteMutation>;
export type ProjectDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<ProjectDeleteMutation, ProjectDeleteMutationVariables>;
export const ProjectAnalyzeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ProjectAnalyze"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]} as unknown as DocumentNode;
export type ProjectAnalyzeMutationFn = ApolloReactCommon.MutationFunction<ProjectAnalyzeMutation, ProjectAnalyzeMutationVariables>;

/**
 * __useProjectAnalyzeMutation__
 *
 * To run a mutation, you first call `useProjectAnalyzeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProjectAnalyzeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [projectAnalyzeMutation, { data, loading, error }] = useProjectAnalyzeMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useProjectAnalyzeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ProjectAnalyzeMutation, ProjectAnalyzeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ProjectAnalyzeMutation, ProjectAnalyzeMutationVariables>(ProjectAnalyzeDocument, options);
      }
export type ProjectAnalyzeMutationHookResult = ReturnType<typeof useProjectAnalyzeMutation>;
export type ProjectAnalyzeMutationResult = ApolloReactCommon.MutationResult<ProjectAnalyzeMutation>;
export type ProjectAnalyzeMutationOptions = ApolloReactCommon.BaseMutationOptions<ProjectAnalyzeMutation, ProjectAnalyzeMutationVariables>;
export const OverviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Overview"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"overview"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offset"},"value":{"kind":"IntValue","value":"0"}},{"kind":"ObjectField","name":{"kind":"Name","value":"limit"},"value":{"kind":"IntValue","value":"5"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"recentEvent"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"OverviewRecentItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Limit"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Limit"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}},{"kind":"Field","name":{"kind":"Name","value":"allocated"}},{"kind":"Field","name":{"kind":"Name","value":"unallocated"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TeamStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"project"}},{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Limit"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"OverviewRecentItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useOverviewQuery__
 *
 * To run a query within a React component, call `useOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useOverviewQuery({
 *   variables: {
 *   },
 * });
 */
export function useOverviewQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<OverviewQuery, OverviewQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<OverviewQuery, OverviewQueryVariables>(OverviewDocument, options);
      }
export function useOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<OverviewQuery, OverviewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<OverviewQuery, OverviewQueryVariables>(OverviewDocument, options);
        }
export type OverviewQueryHookResult = ReturnType<typeof useOverviewQuery>;
export type OverviewLazyQueryHookResult = ReturnType<typeof useOverviewLazyQuery>;
export type OverviewQueryResult = ApolloReactCommon.QueryResult<OverviewQuery, OverviewQueryVariables>;
export const TokenListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TokenList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"token"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TokenItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TokenItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Token"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;

/**
 * __useTokenListQuery__
 *
 * To run a query within a React component, call `useTokenListQuery` and pass it any options that fit your needs.
 * When your component renders, `useTokenListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTokenListQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useTokenListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TokenListQuery, TokenListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TokenListQuery, TokenListQueryVariables>(TokenListDocument, options);
      }
export function useTokenListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TokenListQuery, TokenListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TokenListQuery, TokenListQueryVariables>(TokenListDocument, options);
        }
export type TokenListQueryHookResult = ReturnType<typeof useTokenListQuery>;
export type TokenListLazyQueryHookResult = ReturnType<typeof useTokenListLazyQuery>;
export type TokenListQueryResult = ApolloReactCommon.QueryResult<TokenListQuery, TokenListQueryVariables>;
export const TokenNewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TokenNew"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateTokenInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"token"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createToken"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TokenItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TokenItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Token"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;
export type TokenNewMutationFn = ApolloReactCommon.MutationFunction<TokenNewMutation, TokenNewMutationVariables>;

/**
 * __useTokenNewMutation__
 *
 * To run a mutation, you first call `useTokenNewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTokenNewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [tokenNewMutation, { data, loading, error }] = useTokenNewMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTokenNewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TokenNewMutation, TokenNewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TokenNewMutation, TokenNewMutationVariables>(TokenNewDocument, options);
      }
export type TokenNewMutationHookResult = ReturnType<typeof useTokenNewMutation>;
export type TokenNewMutationResult = ApolloReactCommon.MutationResult<TokenNewMutation>;
export type TokenNewMutationOptions = ApolloReactCommon.BaseMutationOptions<TokenNewMutation, TokenNewMutationVariables>;
export const TokenEditDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TokenEdit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EditTokenInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"token"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editToken"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TokenItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TokenItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Token"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;
export type TokenEditMutationFn = ApolloReactCommon.MutationFunction<TokenEditMutation, TokenEditMutationVariables>;

/**
 * __useTokenEditMutation__
 *
 * To run a mutation, you first call `useTokenEditMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTokenEditMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [tokenEditMutation, { data, loading, error }] = useTokenEditMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTokenEditMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TokenEditMutation, TokenEditMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TokenEditMutation, TokenEditMutationVariables>(TokenEditDocument, options);
      }
export type TokenEditMutationHookResult = ReturnType<typeof useTokenEditMutation>;
export type TokenEditMutationResult = ApolloReactCommon.MutationResult<TokenEditMutation>;
export type TokenEditMutationOptions = ApolloReactCommon.BaseMutationOptions<TokenEditMutation, TokenEditMutationVariables>;
export const TokenDeleteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TokenDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"token"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteToken"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TokenItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TokenItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Token"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]} as unknown as DocumentNode;
export type TokenDeleteMutationFn = ApolloReactCommon.MutationFunction<TokenDeleteMutation, TokenDeleteMutationVariables>;

/**
 * __useTokenDeleteMutation__
 *
 * To run a mutation, you first call `useTokenDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTokenDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [tokenDeleteMutation, { data, loading, error }] = useTokenDeleteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTokenDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TokenDeleteMutation, TokenDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TokenDeleteMutation, TokenDeleteMutationVariables>(TokenDeleteDocument, options);
      }
export type TokenDeleteMutationHookResult = ReturnType<typeof useTokenDeleteMutation>;
export type TokenDeleteMutationResult = ApolloReactCommon.MutationResult<TokenDeleteMutation>;
export type TokenDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<TokenDeleteMutation, TokenDeleteMutationVariables>;
export const ProfileTeamListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProfileTeamList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"viewerRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProfileTeamListQuery__
 *
 * To run a query within a React component, call `useProfileTeamListQuery` and pass it any options that fit your needs.
 * When your component renders, `useProfileTeamListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProfileTeamListQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useProfileTeamListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProfileTeamListQuery, ProfileTeamListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProfileTeamListQuery, ProfileTeamListQueryVariables>(ProfileTeamListDocument, options);
      }
export function useProfileTeamListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProfileTeamListQuery, ProfileTeamListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProfileTeamListQuery, ProfileTeamListQueryVariables>(ProfileTeamListDocument, options);
        }
export type ProfileTeamListQueryHookResult = ReturnType<typeof useProfileTeamListQuery>;
export type ProfileTeamListLazyQueryHookResult = ReturnType<typeof useProfileTeamListLazyQuery>;
export type ProfileTeamListQueryResult = ApolloReactCommon.QueryResult<ProfileTeamListQuery, ProfileTeamListQueryVariables>;
export const ProjectIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"teamByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamName"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"project"},"name":{"kind":"Name","value":"projectByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectName"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectIdQuery__
 *
 * To run a query within a React component, call `useProjectIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectIdQuery({
 *   variables: {
 *      teamName: // value for 'teamName'
 *      projectName: // value for 'projectName'
 *   },
 * });
 */
export function useProjectIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectIdQuery, ProjectIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectIdQuery, ProjectIdQueryVariables>(ProjectIdDocument, options);
      }
export function useProjectIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectIdQuery, ProjectIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectIdQuery, ProjectIdQueryVariables>(ProjectIdDocument, options);
        }
export type ProjectIdQueryHookResult = ReturnType<typeof useProjectIdQuery>;
export type ProjectIdLazyQueryHookResult = ReturnType<typeof useProjectIdLazyQuery>;
export type ProjectIdQueryResult = ApolloReactCommon.QueryResult<ProjectIdQuery, ProjectIdQueryVariables>;
export const ProjectChartDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectChart"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"recentDays"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"project"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"chart"},"name":{"kind":"Name","value":"analysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offset"},"value":{"kind":"IntValue","value":"0"}},{"kind":"ObjectField","name":{"kind":"Name","value":"limit"},"value":{"kind":"IntValue","value":"-1"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"field"},"value":{"kind":"StringValue","value":"time","block":false}},{"kind":"ObjectField","name":{"kind":"Name","value":"order"},"value":{"kind":"EnumValue","value":"ASC"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"recentDays"},"value":{"kind":"Variable","name":{"kind":"Name","value":"recentDays"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectChartQuery__
 *
 * To run a query within a React component, call `useProjectChartQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectChartQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectChartQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      recentDays: // value for 'recentDays'
 *   },
 * });
 */
export function useProjectChartQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectChartQuery, ProjectChartQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectChartQuery, ProjectChartQueryVariables>(ProjectChartDocument, options);
      }
export function useProjectChartLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectChartQuery, ProjectChartQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectChartQuery, ProjectChartQueryVariables>(ProjectChartDocument, options);
        }
export type ProjectChartQueryHookResult = ReturnType<typeof useProjectChartQuery>;
export type ProjectChartLazyQueryHookResult = ReturnType<typeof useProjectChartLazyQuery>;
export type ProjectChartQueryResult = ApolloReactCommon.QueryResult<ProjectChartQuery, ProjectChartQueryVariables>;
export const AnalysisListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AnalysisList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"project"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"analysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"systemType","block":false},{"kind":"StringValue","value":"status","block":false}]}}]}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;

/**
 * __useAnalysisListQuery__
 *
 * To run a query within a React component, call `useAnalysisListQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalysisListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalysisListQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useAnalysisListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<AnalysisListQuery, AnalysisListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<AnalysisListQuery, AnalysisListQueryVariables>(AnalysisListDocument, options);
      }
export function useAnalysisListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AnalysisListQuery, AnalysisListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<AnalysisListQuery, AnalysisListQueryVariables>(AnalysisListDocument, options);
        }
export type AnalysisListQueryHookResult = ReturnType<typeof useAnalysisListQuery>;
export type AnalysisListLazyQueryHookResult = ReturnType<typeof useAnalysisListLazyQuery>;
export type AnalysisListQueryResult = ApolloReactCommon.QueryResult<AnalysisListQuery, AnalysisListQueryVariables>;
export const AnalysisDetailByIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AnalysisDetailById"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"analysisId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"analysisId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;

/**
 * __useAnalysisDetailByIdQuery__
 *
 * To run a query within a React component, call `useAnalysisDetailByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalysisDetailByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalysisDetailByIdQuery({
 *   variables: {
 *      analysisId: // value for 'analysisId'
 *   },
 * });
 */
export function useAnalysisDetailByIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<AnalysisDetailByIdQuery, AnalysisDetailByIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<AnalysisDetailByIdQuery, AnalysisDetailByIdQueryVariables>(AnalysisDetailByIdDocument, options);
      }
export function useAnalysisDetailByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AnalysisDetailByIdQuery, AnalysisDetailByIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<AnalysisDetailByIdQuery, AnalysisDetailByIdQueryVariables>(AnalysisDetailByIdDocument, options);
        }
export type AnalysisDetailByIdQueryHookResult = ReturnType<typeof useAnalysisDetailByIdQuery>;
export type AnalysisDetailByIdLazyQueryHookResult = ReturnType<typeof useAnalysisDetailByIdLazyQuery>;
export type AnalysisDetailByIdQueryResult = ApolloReactCommon.QueryResult<AnalysisDetailByIdQuery, AnalysisDetailByIdQueryVariables>;
export const GetAnalysisStatusDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAnalysisStatus"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"analysisID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"analysisID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetAnalysisStatusQuery__
 *
 * To run a query within a React component, call `useGetAnalysisStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAnalysisStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAnalysisStatusQuery({
 *   variables: {
 *      analysisID: // value for 'analysisID'
 *   },
 * });
 */
export function useGetAnalysisStatusQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetAnalysisStatusQuery, GetAnalysisStatusQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetAnalysisStatusQuery, GetAnalysisStatusQueryVariables>(GetAnalysisStatusDocument, options);
      }
export function useGetAnalysisStatusLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAnalysisStatusQuery, GetAnalysisStatusQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetAnalysisStatusQuery, GetAnalysisStatusQueryVariables>(GetAnalysisStatusDocument, options);
        }
export type GetAnalysisStatusQueryHookResult = ReturnType<typeof useGetAnalysisStatusQuery>;
export type GetAnalysisStatusLazyQueryHookResult = ReturnType<typeof useGetAnalysisStatusLazyQuery>;
export type GetAnalysisStatusQueryResult = ApolloReactCommon.QueryResult<GetAnalysisStatusQuery, GetAnalysisStatusQueryVariables>;
export const AnalysisDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AnalysisDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"team"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"project"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"analysis"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"teamByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"team"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"project"},"name":{"kind":"Name","value":"projectByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"project"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"analysisByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"analysis"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;

/**
 * __useAnalysisDetailQuery__
 *
 * To run a query within a React component, call `useAnalysisDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalysisDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalysisDetailQuery({
 *   variables: {
 *      team: // value for 'team'
 *      project: // value for 'project'
 *      analysis: // value for 'analysis'
 *   },
 * });
 */
export function useAnalysisDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<AnalysisDetailQuery, AnalysisDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<AnalysisDetailQuery, AnalysisDetailQueryVariables>(AnalysisDetailDocument, options);
      }
export function useAnalysisDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AnalysisDetailQuery, AnalysisDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<AnalysisDetailQuery, AnalysisDetailQueryVariables>(AnalysisDetailDocument, options);
        }
export type AnalysisDetailQueryHookResult = ReturnType<typeof useAnalysisDetailQuery>;
export type AnalysisDetailLazyQueryHookResult = ReturnType<typeof useAnalysisDetailLazyQuery>;
export type AnalysisDetailQueryResult = ApolloReactCommon.QueryResult<AnalysisDetailQuery, AnalysisDetailQueryVariables>;
export const AnalysisCustomizedAuditDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AnalysisCustomizedAudit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"customAudit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CustomizedAudit"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CustomizedAudit"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}}]} as unknown as DocumentNode;

/**
 * __useAnalysisCustomizedAuditQuery__
 *
 * To run a query within a React component, call `useAnalysisCustomizedAuditQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalysisCustomizedAuditQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalysisCustomizedAuditQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useAnalysisCustomizedAuditQuery(baseOptions: ApolloReactHooks.QueryHookOptions<AnalysisCustomizedAuditQuery, AnalysisCustomizedAuditQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<AnalysisCustomizedAuditQuery, AnalysisCustomizedAuditQueryVariables>(AnalysisCustomizedAuditDocument, options);
      }
export function useAnalysisCustomizedAuditLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AnalysisCustomizedAuditQuery, AnalysisCustomizedAuditQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<AnalysisCustomizedAuditQuery, AnalysisCustomizedAuditQueryVariables>(AnalysisCustomizedAuditDocument, options);
        }
export type AnalysisCustomizedAuditQueryHookResult = ReturnType<typeof useAnalysisCustomizedAuditQuery>;
export type AnalysisCustomizedAuditLazyQueryHookResult = ReturnType<typeof useAnalysisCustomizedAuditLazyQuery>;
export type AnalysisCustomizedAuditQueryResult = ApolloReactCommon.QueryResult<AnalysisCustomizedAuditQuery, AnalysisCustomizedAuditQueryVariables>;
export const AnalysisCustomizedAuditUndoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisCustomizedAuditUndo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"undoAudit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CustomizedAudit"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CustomizedAudit"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}}]} as unknown as DocumentNode;
export type AnalysisCustomizedAuditUndoMutationFn = ApolloReactCommon.MutationFunction<AnalysisCustomizedAuditUndoMutation, AnalysisCustomizedAuditUndoMutationVariables>;

/**
 * __useAnalysisCustomizedAuditUndoMutation__
 *
 * To run a mutation, you first call `useAnalysisCustomizedAuditUndoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisCustomizedAuditUndoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisCustomizedAuditUndoMutation, { data, loading, error }] = useAnalysisCustomizedAuditUndoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAnalysisCustomizedAuditUndoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisCustomizedAuditUndoMutation, AnalysisCustomizedAuditUndoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisCustomizedAuditUndoMutation, AnalysisCustomizedAuditUndoMutationVariables>(AnalysisCustomizedAuditUndoDocument, options);
      }
export type AnalysisCustomizedAuditUndoMutationHookResult = ReturnType<typeof useAnalysisCustomizedAuditUndoMutation>;
export type AnalysisCustomizedAuditUndoMutationResult = ApolloReactCommon.MutationResult<AnalysisCustomizedAuditUndoMutation>;
export type AnalysisCustomizedAuditUndoMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisCustomizedAuditUndoMutation, AnalysisCustomizedAuditUndoMutationVariables>;
export const AnalysisNewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisNew"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateAnalysisInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createAnalysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export type AnalysisNewMutationFn = ApolloReactCommon.MutationFunction<AnalysisNewMutation, AnalysisNewMutationVariables>;

/**
 * __useAnalysisNewMutation__
 *
 * To run a mutation, you first call `useAnalysisNewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisNewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisNewMutation, { data, loading, error }] = useAnalysisNewMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAnalysisNewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisNewMutation, AnalysisNewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisNewMutation, AnalysisNewMutationVariables>(AnalysisNewDocument, options);
      }
export type AnalysisNewMutationHookResult = ReturnType<typeof useAnalysisNewMutation>;
export type AnalysisNewMutationResult = ApolloReactCommon.MutationResult<AnalysisNewMutation>;
export type AnalysisNewMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisNewMutation, AnalysisNewMutationVariables>;
export const AnalysisEditDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisEdit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EditAnalysisInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editAnalysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export type AnalysisEditMutationFn = ApolloReactCommon.MutationFunction<AnalysisEditMutation, AnalysisEditMutationVariables>;

/**
 * __useAnalysisEditMutation__
 *
 * To run a mutation, you first call `useAnalysisEditMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisEditMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisEditMutation, { data, loading, error }] = useAnalysisEditMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAnalysisEditMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisEditMutation, AnalysisEditMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisEditMutation, AnalysisEditMutationVariables>(AnalysisEditDocument, options);
      }
export type AnalysisEditMutationHookResult = ReturnType<typeof useAnalysisEditMutation>;
export type AnalysisEditMutationResult = ApolloReactCommon.MutationResult<AnalysisEditMutation>;
export type AnalysisEditMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisEditMutation, AnalysisEditMutationVariables>;
export const AnalysisEditFileDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisEditFile"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EditFileInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editFile"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export type AnalysisEditFileMutationFn = ApolloReactCommon.MutationFunction<AnalysisEditFileMutation, AnalysisEditFileMutationVariables>;

/**
 * __useAnalysisEditFileMutation__
 *
 * To run a mutation, you first call `useAnalysisEditFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisEditFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisEditFileMutation, { data, loading, error }] = useAnalysisEditFileMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useAnalysisEditFileMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisEditFileMutation, AnalysisEditFileMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisEditFileMutation, AnalysisEditFileMutationVariables>(AnalysisEditFileDocument, options);
      }
export type AnalysisEditFileMutationHookResult = ReturnType<typeof useAnalysisEditFileMutation>;
export type AnalysisEditFileMutationResult = ApolloReactCommon.MutationResult<AnalysisEditFileMutation>;
export type AnalysisEditFileMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisEditFileMutation, AnalysisEditFileMutationVariables>;
export const AnalysisDeleteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteAnalysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export type AnalysisDeleteMutationFn = ApolloReactCommon.MutationFunction<AnalysisDeleteMutation, AnalysisDeleteMutationVariables>;

/**
 * __useAnalysisDeleteMutation__
 *
 * To run a mutation, you first call `useAnalysisDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisDeleteMutation, { data, loading, error }] = useAnalysisDeleteMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAnalysisDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisDeleteMutation, AnalysisDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisDeleteMutation, AnalysisDeleteMutationVariables>(AnalysisDeleteDocument, options);
      }
export type AnalysisDeleteMutationHookResult = ReturnType<typeof useAnalysisDeleteMutation>;
export type AnalysisDeleteMutationResult = ApolloReactCommon.MutationResult<AnalysisDeleteMutation>;
export type AnalysisDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisDeleteMutation, AnalysisDeleteMutationVariables>;
export const AnalysisAnalyzeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisAnalyze"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeAnalysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export type AnalysisAnalyzeMutationFn = ApolloReactCommon.MutationFunction<AnalysisAnalyzeMutation, AnalysisAnalyzeMutationVariables>;

/**
 * __useAnalysisAnalyzeMutation__
 *
 * To run a mutation, you first call `useAnalysisAnalyzeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisAnalyzeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisAnalyzeMutation, { data, loading, error }] = useAnalysisAnalyzeMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAnalysisAnalyzeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisAnalyzeMutation, AnalysisAnalyzeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisAnalyzeMutation, AnalysisAnalyzeMutationVariables>(AnalysisAnalyzeDocument, options);
      }
export type AnalysisAnalyzeMutationHookResult = ReturnType<typeof useAnalysisAnalyzeMutation>;
export type AnalysisAnalyzeMutationResult = ApolloReactCommon.MutationResult<AnalysisAnalyzeMutation>;
export type AnalysisAnalyzeMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisAnalyzeMutation, AnalysisAnalyzeMutationVariables>;
export const AnalysisStopDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisStop"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stopAnalysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export type AnalysisStopMutationFn = ApolloReactCommon.MutationFunction<AnalysisStopMutation, AnalysisStopMutationVariables>;

/**
 * __useAnalysisStopMutation__
 *
 * To run a mutation, you first call `useAnalysisStopMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisStopMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisStopMutation, { data, loading, error }] = useAnalysisStopMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAnalysisStopMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisStopMutation, AnalysisStopMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisStopMutation, AnalysisStopMutationVariables>(AnalysisStopDocument, options);
      }
export type AnalysisStopMutationHookResult = ReturnType<typeof useAnalysisStopMutation>;
export type AnalysisStopMutationResult = ApolloReactCommon.MutationResult<AnalysisStopMutation>;
export type AnalysisStopMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisStopMutation, AnalysisStopMutationVariables>;
export const AnalysisStatusDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"AnalysisStatus"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analysisStatus"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"projectID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListItem"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListFileItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"UploadFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeParam"}},{"kind":"Field","name":{"kind":"Name","value":"time"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisListFileItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}},{"kind":"Field","name":{"kind":"Name","value":"setting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;

/**
 * __useAnalysisStatusSubscription__
 *
 * To run a query within a React component, call `useAnalysisStatusSubscription` and pass it any options that fit your needs.
 * When your component renders, `useAnalysisStatusSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalysisStatusSubscription({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useAnalysisStatusSubscription(baseOptions: ApolloReactHooks.SubscriptionHookOptions<AnalysisStatusSubscription, AnalysisStatusSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useSubscription<AnalysisStatusSubscription, AnalysisStatusSubscriptionVariables>(AnalysisStatusDocument, options);
      }
export type AnalysisStatusSubscriptionHookResult = ReturnType<typeof useAnalysisStatusSubscription>;
export type AnalysisStatusSubscriptionResult = ApolloReactCommon.SubscriptionResult<AnalysisStatusSubscription>;
export const AnalysisCollectorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"AnalysisCollector"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"collector"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;

/**
 * __useAnalysisCollectorQuery__
 *
 * To run a query within a React component, call `useAnalysisCollectorQuery` and pass it any options that fit your needs.
 * When your component renders, `useAnalysisCollectorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAnalysisCollectorQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useAnalysisCollectorQuery(baseOptions: ApolloReactHooks.QueryHookOptions<AnalysisCollectorQuery, AnalysisCollectorQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<AnalysisCollectorQuery, AnalysisCollectorQueryVariables>(AnalysisCollectorDocument, options);
      }
export function useAnalysisCollectorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AnalysisCollectorQuery, AnalysisCollectorQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<AnalysisCollectorQuery, AnalysisCollectorQueryVariables>(AnalysisCollectorDocument, options);
        }
export type AnalysisCollectorQueryHookResult = ReturnType<typeof useAnalysisCollectorQuery>;
export type AnalysisCollectorLazyQueryHookResult = ReturnType<typeof useAnalysisCollectorLazyQuery>;
export type AnalysisCollectorQueryResult = ApolloReactCommon.QueryResult<AnalysisCollectorQuery, AnalysisCollectorQueryVariables>;
export const CollectorAddDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CollectorAdd"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AddCollectorInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addCollector"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;
export type CollectorAddMutationFn = ApolloReactCommon.MutationFunction<CollectorAddMutation, CollectorAddMutationVariables>;

/**
 * __useCollectorAddMutation__
 *
 * To run a mutation, you first call `useCollectorAddMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCollectorAddMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [collectorAddMutation, { data, loading, error }] = useCollectorAddMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCollectorAddMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CollectorAddMutation, CollectorAddMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CollectorAddMutation, CollectorAddMutationVariables>(CollectorAddDocument, options);
      }
export type CollectorAddMutationHookResult = ReturnType<typeof useCollectorAddMutation>;
export type CollectorAddMutationResult = ApolloReactCommon.MutationResult<CollectorAddMutation>;
export type CollectorAddMutationOptions = ApolloReactCommon.BaseMutationOptions<CollectorAddMutation, CollectorAddMutationVariables>;
export const CollectorCollectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CollectorCollect"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"collectCollector"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;
export type CollectorCollectMutationFn = ApolloReactCommon.MutationFunction<CollectorCollectMutation, CollectorCollectMutationVariables>;

/**
 * __useCollectorCollectMutation__
 *
 * To run a mutation, you first call `useCollectorCollectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCollectorCollectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [collectorCollectMutation, { data, loading, error }] = useCollectorCollectMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCollectorCollectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CollectorCollectMutation, CollectorCollectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CollectorCollectMutation, CollectorCollectMutationVariables>(CollectorCollectDocument, options);
      }
export type CollectorCollectMutationHookResult = ReturnType<typeof useCollectorCollectMutation>;
export type CollectorCollectMutationResult = ApolloReactCommon.MutationResult<CollectorCollectMutation>;
export type CollectorCollectMutationOptions = ApolloReactCommon.BaseMutationOptions<CollectorCollectMutation, CollectorCollectMutationVariables>;
export const CollectorStopDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CollectorStop"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stopCollector"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;
export type CollectorStopMutationFn = ApolloReactCommon.MutationFunction<CollectorStopMutation, CollectorStopMutationVariables>;

/**
 * __useCollectorStopMutation__
 *
 * To run a mutation, you first call `useCollectorStopMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCollectorStopMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [collectorStopMutation, { data, loading, error }] = useCollectorStopMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCollectorStopMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CollectorStopMutation, CollectorStopMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CollectorStopMutation, CollectorStopMutationVariables>(CollectorStopDocument, options);
      }
export type CollectorStopMutationHookResult = ReturnType<typeof useCollectorStopMutation>;
export type CollectorStopMutationResult = ApolloReactCommon.MutationResult<CollectorStopMutation>;
export type CollectorStopMutationOptions = ApolloReactCommon.BaseMutationOptions<CollectorStopMutation, CollectorStopMutationVariables>;
export const CollectorDeleteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CollectorDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteCollector"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;
export type CollectorDeleteMutationFn = ApolloReactCommon.MutationFunction<CollectorDeleteMutation, CollectorDeleteMutationVariables>;

/**
 * __useCollectorDeleteMutation__
 *
 * To run a mutation, you first call `useCollectorDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCollectorDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [collectorDeleteMutation, { data, loading, error }] = useCollectorDeleteMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useCollectorDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CollectorDeleteMutation, CollectorDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CollectorDeleteMutation, CollectorDeleteMutationVariables>(CollectorDeleteDocument, options);
      }
export type CollectorDeleteMutationHookResult = ReturnType<typeof useCollectorDeleteMutation>;
export type CollectorDeleteMutationResult = ApolloReactCommon.MutationResult<CollectorDeleteMutation>;
export type CollectorDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<CollectorDeleteMutation, CollectorDeleteMutationVariables>;
export const CollectorConfigDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CollectorConfig"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ConfigCollectorInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"configCollector"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;
export type CollectorConfigMutationFn = ApolloReactCommon.MutationFunction<CollectorConfigMutation, CollectorConfigMutationVariables>;

/**
 * __useCollectorConfigMutation__
 *
 * To run a mutation, you first call `useCollectorConfigMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCollectorConfigMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [collectorConfigMutation, { data, loading, error }] = useCollectorConfigMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCollectorConfigMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CollectorConfigMutation, CollectorConfigMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CollectorConfigMutation, CollectorConfigMutationVariables>(CollectorConfigDocument, options);
      }
export type CollectorConfigMutationHookResult = ReturnType<typeof useCollectorConfigMutation>;
export type CollectorConfigMutationResult = ApolloReactCommon.MutationResult<CollectorConfigMutation>;
export type CollectorConfigMutationOptions = ApolloReactCommon.BaseMutationOptions<CollectorConfigMutation, CollectorConfigMutationVariables>;
export const CollectorDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CollectorDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"team"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"project"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"analysis"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"collector"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"teamByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"team"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"project"},"name":{"kind":"Name","value":"projectByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"project"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"analysisByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"analysis"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","alias":{"kind":"Name","value":"collector"},"name":{"kind":"Name","value":"collectorByName"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"collector"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;

/**
 * __useCollectorDetailQuery__
 *
 * To run a query within a React component, call `useCollectorDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useCollectorDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCollectorDetailQuery({
 *   variables: {
 *      team: // value for 'team'
 *      project: // value for 'project'
 *      analysis: // value for 'analysis'
 *      collector: // value for 'collector'
 *   },
 * });
 */
export function useCollectorDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CollectorDetailQuery, CollectorDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CollectorDetailQuery, CollectorDetailQueryVariables>(CollectorDetailDocument, options);
      }
export function useCollectorDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CollectorDetailQuery, CollectorDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CollectorDetailQuery, CollectorDetailQueryVariables>(CollectorDetailDocument, options);
        }
export type CollectorDetailQueryHookResult = ReturnType<typeof useCollectorDetailQuery>;
export type CollectorDetailLazyQueryHookResult = ReturnType<typeof useCollectorDetailLazyQuery>;
export type CollectorDetailQueryResult = ApolloReactCommon.QueryResult<CollectorDetailQuery, CollectorDetailQueryVariables>;
export const CollectorStatusDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"subscription","name":{"kind":"Name","value":"CollectorStatus"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"analysisID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"collectorStatus"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"analysisID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"analysisID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CollectorItem"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CollectorItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Collector"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"logSubID"}}]}}]} as unknown as DocumentNode;

/**
 * __useCollectorStatusSubscription__
 *
 * To run a query within a React component, call `useCollectorStatusSubscription` and pass it any options that fit your needs.
 * When your component renders, `useCollectorStatusSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCollectorStatusSubscription({
 *   variables: {
 *      analysisID: // value for 'analysisID'
 *   },
 * });
 */
export function useCollectorStatusSubscription(baseOptions: ApolloReactHooks.SubscriptionHookOptions<CollectorStatusSubscription, CollectorStatusSubscriptionVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useSubscription<CollectorStatusSubscription, CollectorStatusSubscriptionVariables>(CollectorStatusDocument, options);
      }
export type CollectorStatusSubscriptionHookResult = ReturnType<typeof useCollectorStatusSubscription>;
export type CollectorStatusSubscriptionResult = ApolloReactCommon.SubscriptionResult<CollectorStatusSubscription>;
export const TeamSelectListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamSelectList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamSelectListQuery__
 *
 * To run a query within a React component, call `useTeamSelectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamSelectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamSelectListQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useTeamSelectListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeamSelectListQuery, TeamSelectListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamSelectListQuery, TeamSelectListQueryVariables>(TeamSelectListDocument, options);
      }
export function useTeamSelectListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamSelectListQuery, TeamSelectListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamSelectListQuery, TeamSelectListQueryVariables>(TeamSelectListDocument, options);
        }
export type TeamSelectListQueryHookResult = ReturnType<typeof useTeamSelectListQuery>;
export type TeamSelectListLazyQueryHookResult = ReturnType<typeof useTeamSelectListLazyQuery>;
export type TeamSelectListQueryResult = ApolloReactCommon.QueryResult<TeamSelectListQuery, TeamSelectListQueryVariables>;
export const ManagementTeamSelectListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ManagementTeamSelectList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useManagementTeamSelectListQuery__
 *
 * To run a query within a React component, call `useManagementTeamSelectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useManagementTeamSelectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManagementTeamSelectListQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useManagementTeamSelectListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ManagementTeamSelectListQuery, ManagementTeamSelectListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ManagementTeamSelectListQuery, ManagementTeamSelectListQueryVariables>(ManagementTeamSelectListDocument, options);
      }
export function useManagementTeamSelectListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ManagementTeamSelectListQuery, ManagementTeamSelectListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ManagementTeamSelectListQuery, ManagementTeamSelectListQueryVariables>(ManagementTeamSelectListDocument, options);
        }
export type ManagementTeamSelectListQueryHookResult = ReturnType<typeof useManagementTeamSelectListQuery>;
export type ManagementTeamSelectListLazyQueryHookResult = ReturnType<typeof useManagementTeamSelectListLazyQuery>;
export type ManagementTeamSelectListQueryResult = ApolloReactCommon.QueryResult<ManagementTeamSelectListQuery, ManagementTeamSelectListQueryVariables>;
export const StatusDiskDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StatusDisk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"systemStatus"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"disk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DiskStatus"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DiskStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DiskStatus"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalSpace"}},{"kind":"Field","name":{"kind":"Name","value":"freeSpace"}},{"kind":"Field","name":{"kind":"Name","value":"occupiedSpace"}}]}}]} as unknown as DocumentNode;

/**
 * __useStatusDiskQuery__
 *
 * To run a query within a React component, call `useStatusDiskQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatusDiskQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatusDiskQuery({
 *   variables: {
 *   },
 * });
 */
export function useStatusDiskQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<StatusDiskQuery, StatusDiskQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<StatusDiskQuery, StatusDiskQueryVariables>(StatusDiskDocument, options);
      }
export function useStatusDiskLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<StatusDiskQuery, StatusDiskQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<StatusDiskQuery, StatusDiskQueryVariables>(StatusDiskDocument, options);
        }
export type StatusDiskQueryHookResult = ReturnType<typeof useStatusDiskQuery>;
export type StatusDiskLazyQueryHookResult = ReturnType<typeof useStatusDiskLazyQuery>;
export type StatusDiskQueryResult = ApolloReactCommon.QueryResult<StatusDiskQuery, StatusDiskQueryVariables>;
export const StatusPostgresDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"StatusPostgres"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"systemStatus"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"postgres"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"PostgresStatus"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"PostgresStatus"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"PostgresStatus"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalSessionCount"}},{"kind":"Field","name":{"kind":"Name","value":"activeSessionCount"}},{"kind":"Field","name":{"kind":"Name","value":"idleSessionCount"}}]}}]} as unknown as DocumentNode;

/**
 * __useStatusPostgresQuery__
 *
 * To run a query within a React component, call `useStatusPostgresQuery` and pass it any options that fit your needs.
 * When your component renders, `useStatusPostgresQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStatusPostgresQuery({
 *   variables: {
 *   },
 * });
 */
export function useStatusPostgresQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<StatusPostgresQuery, StatusPostgresQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<StatusPostgresQuery, StatusPostgresQueryVariables>(StatusPostgresDocument, options);
      }
export function useStatusPostgresLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<StatusPostgresQuery, StatusPostgresQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<StatusPostgresQuery, StatusPostgresQueryVariables>(StatusPostgresDocument, options);
        }
export type StatusPostgresQueryHookResult = ReturnType<typeof useStatusPostgresQuery>;
export type StatusPostgresLazyQueryHookResult = ReturnType<typeof useStatusPostgresLazyQuery>;
export type StatusPostgresQueryResult = ApolloReactCommon.QueryResult<StatusPostgresQuery, StatusPostgresQueryVariables>;
export const TeamListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"TeamList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamListItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamListQuery__
 *
 * To run a query within a React component, call `useTeamListQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamListQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useTeamListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeamListQuery, TeamListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamListQuery, TeamListQueryVariables>(TeamListDocument, options);
      }
export function useTeamListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamListQuery, TeamListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamListQuery, TeamListQueryVariables>(TeamListDocument, options);
        }
export type TeamListQueryHookResult = ReturnType<typeof useTeamListQuery>;
export type TeamListLazyQueryHookResult = ReturnType<typeof useTeamListLazyQuery>;
export type TeamListQueryResult = ApolloReactCommon.QueryResult<TeamListQuery, TeamListQueryVariables>;
export const TeamNewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TeamNew"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"timesLimit"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createTeam"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"timesLimit"},"value":{"kind":"Variable","name":{"kind":"Name","value":"timesLimit"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}}]}}]}}]} as unknown as DocumentNode;
export type TeamNewMutationFn = ApolloReactCommon.MutationFunction<TeamNewMutation, TeamNewMutationVariables>;

/**
 * __useTeamNewMutation__
 *
 * To run a mutation, you first call `useTeamNewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTeamNewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [teamNewMutation, { data, loading, error }] = useTeamNewMutation({
 *   variables: {
 *      name: // value for 'name'
 *      timesLimit: // value for 'timesLimit'
 *   },
 * });
 */
export function useTeamNewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TeamNewMutation, TeamNewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TeamNewMutation, TeamNewMutationVariables>(TeamNewDocument, options);
      }
export type TeamNewMutationHookResult = ReturnType<typeof useTeamNewMutation>;
export type TeamNewMutationResult = ApolloReactCommon.MutationResult<TeamNewMutation>;
export type TeamNewMutationOptions = ApolloReactCommon.BaseMutationOptions<TeamNewMutation, TeamNewMutationVariables>;
export const TeamEditDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TeamEdit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EditTeamInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editTeam"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}}]}}]}}]} as unknown as DocumentNode;
export type TeamEditMutationFn = ApolloReactCommon.MutationFunction<TeamEditMutation, TeamEditMutationVariables>;

/**
 * __useTeamEditMutation__
 *
 * To run a mutation, you first call `useTeamEditMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTeamEditMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [teamEditMutation, { data, loading, error }] = useTeamEditMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTeamEditMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TeamEditMutation, TeamEditMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TeamEditMutation, TeamEditMutationVariables>(TeamEditDocument, options);
      }
export type TeamEditMutationHookResult = ReturnType<typeof useTeamEditMutation>;
export type TeamEditMutationResult = ApolloReactCommon.MutationResult<TeamEditMutation>;
export type TeamEditMutationOptions = ApolloReactCommon.BaseMutationOptions<TeamEditMutation, TeamEditMutationVariables>;
export const TeamDeleteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"TeamDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ids"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteTeam"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ids"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}}]}}]}}]} as unknown as DocumentNode;
export type TeamDeleteMutationFn = ApolloReactCommon.MutationFunction<TeamDeleteMutation, TeamDeleteMutationVariables>;

/**
 * __useTeamDeleteMutation__
 *
 * To run a mutation, you first call `useTeamDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTeamDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [teamDeleteMutation, { data, loading, error }] = useTeamDeleteMutation({
 *   variables: {
 *      ids: // value for 'ids'
 *   },
 * });
 */
export function useTeamDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TeamDeleteMutation, TeamDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<TeamDeleteMutation, TeamDeleteMutationVariables>(TeamDeleteDocument, options);
      }
export type TeamDeleteMutationHookResult = ReturnType<typeof useTeamDeleteMutation>;
export type TeamDeleteMutationResult = ApolloReactCommon.MutationResult<TeamDeleteMutation>;
export type TeamDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<TeamDeleteMutation, TeamDeleteMutationVariables>;
export const UserListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"UserList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserListItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"userRole","block":false}]}}]}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lastLoginTime"}}]}}]} as unknown as DocumentNode;

/**
 * __useUserListQuery__
 *
 * To run a query within a React component, call `useUserListQuery` and pass it any options that fit your needs.
 * When your component renders, `useUserListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUserListQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useUserListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<UserListQuery, UserListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<UserListQuery, UserListQueryVariables>(UserListDocument, options);
      }
export function useUserListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<UserListQuery, UserListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<UserListQuery, UserListQueryVariables>(UserListDocument, options);
        }
export type UserListQueryHookResult = ReturnType<typeof useUserListQuery>;
export type UserListLazyQueryHookResult = ReturnType<typeof useUserListLazyQuery>;
export type UserListQueryResult = ApolloReactCommon.QueryResult<UserListQuery, UserListQueryVariables>;
export const UserNewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UserNew"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"user"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateUserInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"user"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lastLoginTime"}}]}}]} as unknown as DocumentNode;
export type UserNewMutationFn = ApolloReactCommon.MutationFunction<UserNewMutation, UserNewMutationVariables>;

/**
 * __useUserNewMutation__
 *
 * To run a mutation, you first call `useUserNewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserNewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userNewMutation, { data, loading, error }] = useUserNewMutation({
 *   variables: {
 *      user: // value for 'user'
 *   },
 * });
 */
export function useUserNewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UserNewMutation, UserNewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UserNewMutation, UserNewMutationVariables>(UserNewDocument, options);
      }
export type UserNewMutationHookResult = ReturnType<typeof useUserNewMutation>;
export type UserNewMutationResult = ApolloReactCommon.MutationResult<UserNewMutation>;
export type UserNewMutationOptions = ApolloReactCommon.BaseMutationOptions<UserNewMutation, UserNewMutationVariables>;
export const UserEditDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UserEdit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"user"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EditUserInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"user"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lastLoginTime"}}]}}]} as unknown as DocumentNode;
export type UserEditMutationFn = ApolloReactCommon.MutationFunction<UserEditMutation, UserEditMutationVariables>;

/**
 * __useUserEditMutation__
 *
 * To run a mutation, you first call `useUserEditMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserEditMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userEditMutation, { data, loading, error }] = useUserEditMutation({
 *   variables: {
 *      user: // value for 'user'
 *   },
 * });
 */
export function useUserEditMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UserEditMutation, UserEditMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UserEditMutation, UserEditMutationVariables>(UserEditDocument, options);
      }
export type UserEditMutationHookResult = ReturnType<typeof useUserEditMutation>;
export type UserEditMutationResult = ApolloReactCommon.MutationResult<UserEditMutation>;
export type UserEditMutationOptions = ApolloReactCommon.BaseMutationOptions<UserEditMutation, UserEditMutationVariables>;
export const UserDeleteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UserDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"users"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"users"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"UserListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"UserListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"User"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lastLoginTime"}}]}}]} as unknown as DocumentNode;
export type UserDeleteMutationFn = ApolloReactCommon.MutationFunction<UserDeleteMutation, UserDeleteMutationVariables>;

/**
 * __useUserDeleteMutation__
 *
 * To run a mutation, you first call `useUserDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userDeleteMutation, { data, loading, error }] = useUserDeleteMutation({
 *   variables: {
 *      users: // value for 'users'
 *   },
 * });
 */
export function useUserDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UserDeleteMutation, UserDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UserDeleteMutation, UserDeleteMutationVariables>(UserDeleteDocument, options);
      }
export type UserDeleteMutationHookResult = ReturnType<typeof useUserDeleteMutation>;
export type UserDeleteMutationResult = ApolloReactCommon.MutationResult<UserDeleteMutation>;
export type UserDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<UserDeleteMutation, UserDeleteMutationVariables>;
export const LicenseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"License"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SystemLicense"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SystemLicense"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SystemLicense"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"expireTime"}},{"kind":"Field","name":{"kind":"Name","value":"customerCompany"}}]}}]} as unknown as DocumentNode;

/**
 * __useLicenseQuery__
 *
 * To run a query within a React component, call `useLicenseQuery` and pass it any options that fit your needs.
 * When your component renders, `useLicenseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLicenseQuery({
 *   variables: {
 *   },
 * });
 */
export function useLicenseQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LicenseQuery, LicenseQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<LicenseQuery, LicenseQueryVariables>(LicenseDocument, options);
      }
export function useLicenseLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LicenseQuery, LicenseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<LicenseQuery, LicenseQueryVariables>(LicenseDocument, options);
        }
export type LicenseQueryHookResult = ReturnType<typeof useLicenseQuery>;
export type LicenseLazyQueryHookResult = ReturnType<typeof useLicenseLazyQuery>;
export type LicenseQueryResult = ApolloReactCommon.QueryResult<LicenseQuery, LicenseQueryVariables>;
export const UpdateLicenseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateLicense"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"content"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"file"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Upload"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"updateLicense"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"content"},"value":{"kind":"Variable","name":{"kind":"Name","value":"content"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"file"},"value":{"kind":"Variable","name":{"kind":"Name","value":"file"}}}]}}]}]}}]}}]} as unknown as DocumentNode;
export type UpdateLicenseMutationFn = ApolloReactCommon.MutationFunction<UpdateLicenseMutation, UpdateLicenseMutationVariables>;

/**
 * __useUpdateLicenseMutation__
 *
 * To run a mutation, you first call `useUpdateLicenseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateLicenseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateLicenseMutation, { data, loading, error }] = useUpdateLicenseMutation({
 *   variables: {
 *      content: // value for 'content'
 *      file: // value for 'file'
 *   },
 * });
 */
export function useUpdateLicenseMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateLicenseMutation, UpdateLicenseMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UpdateLicenseMutation, UpdateLicenseMutationVariables>(UpdateLicenseDocument, options);
      }
export type UpdateLicenseMutationHookResult = ReturnType<typeof useUpdateLicenseMutation>;
export type UpdateLicenseMutationResult = ApolloReactCommon.MutationResult<UpdateLicenseMutation>;
export type UpdateLicenseMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateLicenseMutation, UpdateLicenseMutationVariables>;
export const ManagementLogDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ManagementLog"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"date"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Time"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hostname"}},{"kind":"Field","name":{"kind":"Name","value":"earliestLogDate"}},{"kind":"Field","name":{"kind":"Name","value":"log"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"date"},"value":{"kind":"Variable","name":{"kind":"Name","value":"date"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"level"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useManagementLogQuery__
 *
 * To run a query within a React component, call `useManagementLogQuery` and pass it any options that fit your needs.
 * When your component renders, `useManagementLogQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManagementLogQuery({
 *   variables: {
 *      date: // value for 'date'
 *   },
 * });
 */
export function useManagementLogQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ManagementLogQuery, ManagementLogQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ManagementLogQuery, ManagementLogQueryVariables>(ManagementLogDocument, options);
      }
export function useManagementLogLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ManagementLogQuery, ManagementLogQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ManagementLogQuery, ManagementLogQueryVariables>(ManagementLogDocument, options);
        }
export type ManagementLogQueryHookResult = ReturnType<typeof useManagementLogQuery>;
export type ManagementLogLazyQueryHookResult = ReturnType<typeof useManagementLogLazyQuery>;
export type ManagementLogQueryResult = ApolloReactCommon.QueryResult<ManagementLogQuery, ManagementLogQueryVariables>;
export const ManagementLimitDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ManagementLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"timesLimit"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}},{"kind":"Field","name":{"kind":"Name","value":"allocated"}},{"kind":"Field","name":{"kind":"Name","value":"unallocated"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useManagementLimitQuery__
 *
 * To run a query within a React component, call `useManagementLimitQuery` and pass it any options that fit your needs.
 * When your component renders, `useManagementLimitQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManagementLimitQuery({
 *   variables: {
 *   },
 * });
 */
export function useManagementLimitQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ManagementLimitQuery, ManagementLimitQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ManagementLimitQuery, ManagementLimitQueryVariables>(ManagementLimitDocument, options);
      }
export function useManagementLimitLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ManagementLimitQuery, ManagementLimitQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ManagementLimitQuery, ManagementLimitQueryVariables>(ManagementLimitDocument, options);
        }
export type ManagementLimitQueryHookResult = ReturnType<typeof useManagementLimitQuery>;
export type ManagementLimitLazyQueryHookResult = ReturnType<typeof useManagementLimitLazyQuery>;
export type ManagementLimitQueryResult = ApolloReactCommon.QueryResult<ManagementLimitQuery, ManagementLimitQueryVariables>;
export const MgrProjectListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MgrProjectList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"delete"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"project"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"delete"},"value":{"kind":"Variable","name":{"kind":"Name","value":"delete"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MgrProjectListItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"status","block":false},{"kind":"StringValue","value":"team","block":false}]}}]}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}}]} as unknown as DocumentNode;

/**
 * __useMgrProjectListQuery__
 *
 * To run a query within a React component, call `useMgrProjectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useMgrProjectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMgrProjectListQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      delete: // value for 'delete'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useMgrProjectListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MgrProjectListQuery, MgrProjectListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<MgrProjectListQuery, MgrProjectListQueryVariables>(MgrProjectListDocument, options);
      }
export function useMgrProjectListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MgrProjectListQuery, MgrProjectListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<MgrProjectListQuery, MgrProjectListQueryVariables>(MgrProjectListDocument, options);
        }
export type MgrProjectListQueryHookResult = ReturnType<typeof useMgrProjectListQuery>;
export type MgrProjectListLazyQueryHookResult = ReturnType<typeof useMgrProjectListLazyQuery>;
export type MgrProjectListQueryResult = ApolloReactCommon.QueryResult<MgrProjectListQuery, MgrProjectListQueryVariables>;
export const ProjectDeletePermanentlyDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ProjectDeletePermanently"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"permanentlyDeleteProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"id"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MgrProjectListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}}]} as unknown as DocumentNode;
export type ProjectDeletePermanentlyMutationFn = ApolloReactCommon.MutationFunction<ProjectDeletePermanentlyMutation, ProjectDeletePermanentlyMutationVariables>;

/**
 * __useProjectDeletePermanentlyMutation__
 *
 * To run a mutation, you first call `useProjectDeletePermanentlyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProjectDeletePermanentlyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [projectDeletePermanentlyMutation, { data, loading, error }] = useProjectDeletePermanentlyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useProjectDeletePermanentlyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ProjectDeletePermanentlyMutation, ProjectDeletePermanentlyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ProjectDeletePermanentlyMutation, ProjectDeletePermanentlyMutationVariables>(ProjectDeletePermanentlyDocument, options);
      }
export type ProjectDeletePermanentlyMutationHookResult = ReturnType<typeof useProjectDeletePermanentlyMutation>;
export type ProjectDeletePermanentlyMutationResult = ApolloReactCommon.MutationResult<ProjectDeletePermanentlyMutation>;
export type ProjectDeletePermanentlyMutationOptions = ApolloReactCommon.BaseMutationOptions<ProjectDeletePermanentlyMutation, ProjectDeletePermanentlyMutationVariables>;
export const ProjectRestoreDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ProjectRestore"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"rename"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"restoreProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"rename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"rename"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MgrProjectListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}}]} as unknown as DocumentNode;
export type ProjectRestoreMutationFn = ApolloReactCommon.MutationFunction<ProjectRestoreMutation, ProjectRestoreMutationVariables>;

/**
 * __useProjectRestoreMutation__
 *
 * To run a mutation, you first call `useProjectRestoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useProjectRestoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [projectRestoreMutation, { data, loading, error }] = useProjectRestoreMutation({
 *   variables: {
 *      id: // value for 'id'
 *      rename: // value for 'rename'
 *   },
 * });
 */
export function useProjectRestoreMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ProjectRestoreMutation, ProjectRestoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ProjectRestoreMutation, ProjectRestoreMutationVariables>(ProjectRestoreDocument, options);
      }
export type ProjectRestoreMutationHookResult = ReturnType<typeof useProjectRestoreMutation>;
export type ProjectRestoreMutationResult = ApolloReactCommon.MutationResult<ProjectRestoreMutation>;
export type ProjectRestoreMutationOptions = ApolloReactCommon.BaseMutationOptions<ProjectRestoreMutation, ProjectRestoreMutationVariables>;
export const MgrAnalysisListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MgrAnalysisList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"delete"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"project"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"projectID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"delete"},"value":{"kind":"Variable","name":{"kind":"Name","value":"delete"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MgrAnalysisListItem"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"systemType","block":false},{"kind":"StringValue","value":"status","block":false}]}}]}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrAnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useMgrAnalysisListQuery__
 *
 * To run a query within a React component, call `useMgrAnalysisListQuery` and pass it any options that fit your needs.
 * When your component renders, `useMgrAnalysisListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMgrAnalysisListQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      delete: // value for 'delete'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useMgrAnalysisListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<MgrAnalysisListQuery, MgrAnalysisListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<MgrAnalysisListQuery, MgrAnalysisListQueryVariables>(MgrAnalysisListDocument, options);
      }
export function useMgrAnalysisListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MgrAnalysisListQuery, MgrAnalysisListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<MgrAnalysisListQuery, MgrAnalysisListQueryVariables>(MgrAnalysisListDocument, options);
        }
export type MgrAnalysisListQueryHookResult = ReturnType<typeof useMgrAnalysisListQuery>;
export type MgrAnalysisListLazyQueryHookResult = ReturnType<typeof useMgrAnalysisListLazyQuery>;
export type MgrAnalysisListQueryResult = ApolloReactCommon.QueryResult<MgrAnalysisListQuery, MgrAnalysisListQueryVariables>;
export const AnalysisDeletePermanentlyDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisDeletePermanently"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"permanentlyDeleteAnalysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ListValue","values":[{"kind":"Variable","name":{"kind":"Name","value":"id"}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MgrAnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrAnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}}]}}]} as unknown as DocumentNode;
export type AnalysisDeletePermanentlyMutationFn = ApolloReactCommon.MutationFunction<AnalysisDeletePermanentlyMutation, AnalysisDeletePermanentlyMutationVariables>;

/**
 * __useAnalysisDeletePermanentlyMutation__
 *
 * To run a mutation, you first call `useAnalysisDeletePermanentlyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisDeletePermanentlyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisDeletePermanentlyMutation, { data, loading, error }] = useAnalysisDeletePermanentlyMutation({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAnalysisDeletePermanentlyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisDeletePermanentlyMutation, AnalysisDeletePermanentlyMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisDeletePermanentlyMutation, AnalysisDeletePermanentlyMutationVariables>(AnalysisDeletePermanentlyDocument, options);
      }
export type AnalysisDeletePermanentlyMutationHookResult = ReturnType<typeof useAnalysisDeletePermanentlyMutation>;
export type AnalysisDeletePermanentlyMutationResult = ApolloReactCommon.MutationResult<AnalysisDeletePermanentlyMutation>;
export type AnalysisDeletePermanentlyMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisDeletePermanentlyMutation, AnalysisDeletePermanentlyMutationVariables>;
export const AnalysisRestoreDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AnalysisRestore"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"rename"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"restoreAnalysis"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"rename"},"value":{"kind":"Variable","name":{"kind":"Name","value":"rename"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"MgrAnalysisListItem"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"MgrAnalysisListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}},{"kind":"Field","name":{"kind":"Name","value":"analysisType"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}}]}}]} as unknown as DocumentNode;
export type AnalysisRestoreMutationFn = ApolloReactCommon.MutationFunction<AnalysisRestoreMutation, AnalysisRestoreMutationVariables>;

/**
 * __useAnalysisRestoreMutation__
 *
 * To run a mutation, you first call `useAnalysisRestoreMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAnalysisRestoreMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [analysisRestoreMutation, { data, loading, error }] = useAnalysisRestoreMutation({
 *   variables: {
 *      id: // value for 'id'
 *      rename: // value for 'rename'
 *   },
 * });
 */
export function useAnalysisRestoreMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AnalysisRestoreMutation, AnalysisRestoreMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AnalysisRestoreMutation, AnalysisRestoreMutationVariables>(AnalysisRestoreDocument, options);
      }
export type AnalysisRestoreMutationHookResult = ReturnType<typeof useAnalysisRestoreMutation>;
export type AnalysisRestoreMutationResult = ApolloReactCommon.MutationResult<AnalysisRestoreMutation>;
export type AnalysisRestoreMutationOptions = ApolloReactCommon.BaseMutationOptions<AnalysisRestoreMutation, AnalysisRestoreMutationVariables>;
export const TeamDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Team"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"team"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useTeamQuery__
 *
 * To run a query within a React component, call `useTeamQuery` and pass it any options that fit your needs.
 * When your component renders, `useTeamQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTeamQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useTeamQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TeamQuery, TeamQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<TeamQuery, TeamQueryVariables>(TeamDocument, options);
      }
export function useTeamLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TeamQuery, TeamQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<TeamQuery, TeamQueryVariables>(TeamDocument, options);
        }
export type TeamQueryHookResult = ReturnType<typeof useTeamQuery>;
export type TeamLazyQueryHookResult = ReturnType<typeof useTeamLazyQuery>;
export type TeamQueryResult = ApolloReactCommon.QueryResult<TeamQuery, TeamQueryVariables>;
export const RoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Role"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useRoleQuery__
 *
 * To run a query within a React component, call `useRoleQuery` and pass it any options that fit your needs.
 * When your component renders, `useRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRoleQuery({
 *   variables: {
 *   },
 * });
 */
export function useRoleQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<RoleQuery, RoleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<RoleQuery, RoleQueryVariables>(RoleDocument, options);
      }
export function useRoleLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RoleQuery, RoleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<RoleQuery, RoleQueryVariables>(RoleDocument, options);
        }
export type RoleQueryHookResult = ReturnType<typeof useRoleQuery>;
export type RoleLazyQueryHookResult = ReturnType<typeof useRoleLazyQuery>;
export type RoleQueryResult = ApolloReactCommon.QueryResult<RoleQuery, RoleQueryVariables>;
export const ViewerTeamRoleDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ViewerTeamRole"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"teamRole"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useViewerTeamRoleQuery__
 *
 * To run a query within a React component, call `useViewerTeamRoleQuery` and pass it any options that fit your needs.
 * When your component renders, `useViewerTeamRoleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useViewerTeamRoleQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useViewerTeamRoleQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ViewerTeamRoleQuery, ViewerTeamRoleQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ViewerTeamRoleQuery, ViewerTeamRoleQueryVariables>(ViewerTeamRoleDocument, options);
      }
export function useViewerTeamRoleLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ViewerTeamRoleQuery, ViewerTeamRoleQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ViewerTeamRoleQuery, ViewerTeamRoleQueryVariables>(ViewerTeamRoleDocument, options);
        }
export type ViewerTeamRoleQueryHookResult = ReturnType<typeof useViewerTeamRoleQuery>;
export type ViewerTeamRoleLazyQueryHookResult = ReturnType<typeof useViewerTeamRoleLazyQuery>;
export type ViewerTeamRoleQueryResult = ApolloReactCommon.QueryResult<ViewerTeamRoleQuery, ViewerTeamRoleQueryVariables>;
export const PickUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"PickUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"user"},"name":{"kind":"Name","value":"pickUser"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __usePickUserQuery__
 *
 * To run a query within a React component, call `usePickUserQuery` and pass it any options that fit your needs.
 * When your component renders, `usePickUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePickUserQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function usePickUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PickUserQuery, PickUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<PickUserQuery, PickUserQueryVariables>(PickUserDocument, options);
      }
export function usePickUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PickUserQuery, PickUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<PickUserQuery, PickUserQueryVariables>(PickUserDocument, options);
        }
export type PickUserQueryHookResult = ReturnType<typeof usePickUserQuery>;
export type PickUserLazyQueryHookResult = ReturnType<typeof usePickUserLazyQuery>;
export type PickUserQueryResult = ApolloReactCommon.QueryResult<PickUserQuery, PickUserQueryVariables>;
export const PickProjectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"PickProject"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"team"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Team"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"project"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectListItem"}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AllRiskStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AllRiskStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baseline"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListItem"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Project"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AllRiskStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]} as unknown as DocumentNode;

/**
 * __usePickProjectQuery__
 *
 * To run a query within a React component, call `usePickProjectQuery` and pass it any options that fit your needs.
 * When your component renders, `usePickProjectQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePickProjectQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function usePickProjectQuery(baseOptions: ApolloReactHooks.QueryHookOptions<PickProjectQuery, PickProjectQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<PickProjectQuery, PickProjectQueryVariables>(PickProjectDocument, options);
      }
export function usePickProjectLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PickProjectQuery, PickProjectQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<PickProjectQuery, PickProjectQueryVariables>(PickProjectDocument, options);
        }
export type PickProjectQueryHookResult = ReturnType<typeof usePickProjectQuery>;
export type PickProjectLazyQueryHookResult = ReturnType<typeof usePickProjectLazyQuery>;
export type PickProjectQueryResult = ApolloReactCommon.QueryResult<PickProjectQuery, PickProjectQueryVariables>;
export const DownloadTokenDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"DownloadToken"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"downloadToken"}}]}}]} as unknown as DocumentNode;

/**
 * __useDownloadTokenQuery__
 *
 * To run a query within a React component, call `useDownloadTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useDownloadTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDownloadTokenQuery({
 *   variables: {
 *   },
 * });
 */
export function useDownloadTokenQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DownloadTokenQuery, DownloadTokenQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<DownloadTokenQuery, DownloadTokenQueryVariables>(DownloadTokenDocument, options);
      }
export function useDownloadTokenLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DownloadTokenQuery, DownloadTokenQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<DownloadTokenQuery, DownloadTokenQueryVariables>(DownloadTokenDocument, options);
        }
export type DownloadTokenQueryHookResult = ReturnType<typeof useDownloadTokenQuery>;
export type DownloadTokenLazyQueryHookResult = ReturnType<typeof useDownloadTokenLazyQuery>;
export type DownloadTokenQueryResult = ApolloReactCommon.QueryResult<DownloadTokenQuery, DownloadTokenQueryVariables>;
export const ManagementAgentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ManagementAgent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"agent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Agent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Agent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Agent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"error"}},{"kind":"Field","name":{"kind":"Name","value":"version"}}]}}]} as unknown as DocumentNode;

/**
 * __useManagementAgentQuery__
 *
 * To run a query within a React component, call `useManagementAgentQuery` and pass it any options that fit your needs.
 * When your component renders, `useManagementAgentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManagementAgentQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useManagementAgentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ManagementAgentQuery, ManagementAgentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ManagementAgentQuery, ManagementAgentQueryVariables>(ManagementAgentDocument, options);
      }
export function useManagementAgentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ManagementAgentQuery, ManagementAgentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ManagementAgentQuery, ManagementAgentQueryVariables>(ManagementAgentDocument, options);
        }
export type ManagementAgentQueryHookResult = ReturnType<typeof useManagementAgentQuery>;
export type ManagementAgentLazyQueryHookResult = ReturnType<typeof useManagementAgentLazyQuery>;
export type ManagementAgentQueryResult = ApolloReactCommon.QueryResult<ManagementAgentQuery, ManagementAgentQueryVariables>;
export const ManagementTaskDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ManagementTask"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"task"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Task"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"status","block":false},{"kind":"StringValue","value":"projectName","block":false},{"kind":"StringValue","value":"command","block":false},{"kind":"StringValue","value":"agent","block":false},{"kind":"StringValue","value":"userName","block":false},{"kind":"StringValue","value":"teamName","block":false}]}}]}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Task"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Task"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analysis"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"project"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"team"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"deleteTime"}}]}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"agent"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"userName"}},{"kind":"Field","name":{"kind":"Name","value":"teamName"}}]}}]} as unknown as DocumentNode;

/**
 * __useManagementTaskQuery__
 *
 * To run a query within a React component, call `useManagementTaskQuery` and pass it any options that fit your needs.
 * When your component renders, `useManagementTaskQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useManagementTaskQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useManagementTaskQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ManagementTaskQuery, ManagementTaskQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ManagementTaskQuery, ManagementTaskQueryVariables>(ManagementTaskDocument, options);
      }
export function useManagementTaskLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ManagementTaskQuery, ManagementTaskQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ManagementTaskQuery, ManagementTaskQueryVariables>(ManagementTaskDocument, options);
        }
export type ManagementTaskQueryHookResult = ReturnType<typeof useManagementTaskQuery>;
export type ManagementTaskLazyQueryHookResult = ReturnType<typeof useManagementTaskLazyQuery>;
export type ManagementTaskQueryResult = ApolloReactCommon.QueryResult<ManagementTaskQuery, ManagementTaskQueryVariables>;
export const ManagementAgentNewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ManagementAgentNew"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateAgentInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createAgent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Agent"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Agent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Agent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"error"}},{"kind":"Field","name":{"kind":"Name","value":"version"}}]}}]} as unknown as DocumentNode;
export type ManagementAgentNewMutationFn = ApolloReactCommon.MutationFunction<ManagementAgentNewMutation, ManagementAgentNewMutationVariables>;

/**
 * __useManagementAgentNewMutation__
 *
 * To run a mutation, you first call `useManagementAgentNewMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useManagementAgentNewMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [managementAgentNewMutation, { data, loading, error }] = useManagementAgentNewMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useManagementAgentNewMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ManagementAgentNewMutation, ManagementAgentNewMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ManagementAgentNewMutation, ManagementAgentNewMutationVariables>(ManagementAgentNewDocument, options);
      }
export type ManagementAgentNewMutationHookResult = ReturnType<typeof useManagementAgentNewMutation>;
export type ManagementAgentNewMutationResult = ApolloReactCommon.MutationResult<ManagementAgentNewMutation>;
export type ManagementAgentNewMutationOptions = ApolloReactCommon.BaseMutationOptions<ManagementAgentNewMutation, ManagementAgentNewMutationVariables>;
export const ManagementAgentDeleteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ManagementAgentDelete"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteAgent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Agent"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Agent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Agent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"error"}},{"kind":"Field","name":{"kind":"Name","value":"version"}}]}}]} as unknown as DocumentNode;
export type ManagementAgentDeleteMutationFn = ApolloReactCommon.MutationFunction<ManagementAgentDeleteMutation, ManagementAgentDeleteMutationVariables>;

/**
 * __useManagementAgentDeleteMutation__
 *
 * To run a mutation, you first call `useManagementAgentDeleteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useManagementAgentDeleteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [managementAgentDeleteMutation, { data, loading, error }] = useManagementAgentDeleteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useManagementAgentDeleteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ManagementAgentDeleteMutation, ManagementAgentDeleteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ManagementAgentDeleteMutation, ManagementAgentDeleteMutationVariables>(ManagementAgentDeleteDocument, options);
      }
export type ManagementAgentDeleteMutationHookResult = ReturnType<typeof useManagementAgentDeleteMutation>;
export type ManagementAgentDeleteMutationResult = ApolloReactCommon.MutationResult<ManagementAgentDeleteMutation>;
export type ManagementAgentDeleteMutationOptions = ApolloReactCommon.BaseMutationOptions<ManagementAgentDeleteMutation, ManagementAgentDeleteMutationVariables>;
export const ManagementAgentEditDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ManagementAgentEdit"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EditAgentInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editAgent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Agent"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Agent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Agent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"displayID"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"token"}},{"kind":"Field","name":{"kind":"Name","value":"time"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"error"}},{"kind":"Field","name":{"kind":"Name","value":"version"}}]}}]} as unknown as DocumentNode;
export type ManagementAgentEditMutationFn = ApolloReactCommon.MutationFunction<ManagementAgentEditMutation, ManagementAgentEditMutationVariables>;

/**
 * __useManagementAgentEditMutation__
 *
 * To run a mutation, you first call `useManagementAgentEditMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useManagementAgentEditMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [managementAgentEditMutation, { data, loading, error }] = useManagementAgentEditMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useManagementAgentEditMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ManagementAgentEditMutation, ManagementAgentEditMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ManagementAgentEditMutation, ManagementAgentEditMutationVariables>(ManagementAgentEditDocument, options);
      }
export type ManagementAgentEditMutationHookResult = ReturnType<typeof useManagementAgentEditMutation>;
export type ManagementAgentEditMutationResult = ApolloReactCommon.MutationResult<ManagementAgentEditMutation>;
export type ManagementAgentEditMutationOptions = ApolloReactCommon.BaseMutationOptions<ManagementAgentEditMutation, ManagementAgentEditMutationVariables>;
export const DependenceDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"Dependence"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"dependence"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"latex"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useDependenceQuery__
 *
 * To run a query within a React component, call `useDependenceQuery` and pass it any options that fit your needs.
 * When your component renders, `useDependenceQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDependenceQuery({
 *   variables: {
 *   },
 * });
 */
export function useDependenceQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DependenceQuery, DependenceQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<DependenceQuery, DependenceQueryVariables>(DependenceDocument, options);
      }
export function useDependenceLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DependenceQuery, DependenceQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<DependenceQuery, DependenceQueryVariables>(DependenceDocument, options);
        }
export type DependenceQueryHookResult = ReturnType<typeof useDependenceQuery>;
export type DependenceLazyQueryHookResult = ReturnType<typeof useDependenceLazyQuery>;
export type DependenceQueryResult = ApolloReactCommon.QueryResult<DependenceQuery, DependenceQueryVariables>;
export const CreateAnalysisFastDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateAnalysisFast"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateAnalysisFastInput"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createAnalysisFast"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]}}]} as unknown as DocumentNode;
export type CreateAnalysisFastMutationFn = ApolloReactCommon.MutationFunction<CreateAnalysisFastMutation, CreateAnalysisFastMutationVariables>;

/**
 * __useCreateAnalysisFastMutation__
 *
 * To run a mutation, you first call `useCreateAnalysisFastMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAnalysisFastMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAnalysisFastMutation, { data, loading, error }] = useCreateAnalysisFastMutation({
 *   variables: {
 *      input: // value for 'input'
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useCreateAnalysisFastMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateAnalysisFastMutation, CreateAnalysisFastMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateAnalysisFastMutation, CreateAnalysisFastMutationVariables>(CreateAnalysisFastDocument, options);
      }
export type CreateAnalysisFastMutationHookResult = ReturnType<typeof useCreateAnalysisFastMutation>;
export type CreateAnalysisFastMutationResult = ApolloReactCommon.MutationResult<CreateAnalysisFastMutation>;
export type CreateAnalysisFastMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateAnalysisFastMutation, CreateAnalysisFastMutationVariables>;
export const UpdateTokenDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateToken"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"token"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"activateToken"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode;
export type UpdateTokenMutationFn = ApolloReactCommon.MutationFunction<UpdateTokenMutation, UpdateTokenMutationVariables>;

/**
 * __useUpdateTokenMutation__
 *
 * To run a mutation, you first call `useUpdateTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTokenMutation, { data, loading, error }] = useUpdateTokenMutation({
 *   variables: {
 *   },
 * });
 */
export function useUpdateTokenMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTokenMutation, UpdateTokenMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UpdateTokenMutation, UpdateTokenMutationVariables>(UpdateTokenDocument, options);
      }
export type UpdateTokenMutationHookResult = ReturnType<typeof useUpdateTokenMutation>;
export type UpdateTokenMutationResult = ApolloReactCommon.MutationResult<UpdateTokenMutation>;
export type UpdateTokenMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTokenMutation, UpdateTokenMutationVariables>;
export const LogoutDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Logout"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"logout"}}]}}]} as unknown as DocumentNode;
export type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const SystemSettingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SystemSetting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"systemSetting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SystemSetting"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SystemSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SystemSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"singleUpload"}},{"kind":"Field","name":{"kind":"Name","value":"maxSingleUpload"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"sessionExpTime"}},{"kind":"Field","name":{"kind":"Name","value":"logLevel"}}]}}]} as unknown as DocumentNode;

/**
 * __useSystemSettingQuery__
 *
 * To run a query within a React component, call `useSystemSettingQuery` and pass it any options that fit your needs.
 * When your component renders, `useSystemSettingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSystemSettingQuery({
 *   variables: {
 *   },
 * });
 */
export function useSystemSettingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SystemSettingQuery, SystemSettingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SystemSettingQuery, SystemSettingQueryVariables>(SystemSettingDocument, options);
      }
export function useSystemSettingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SystemSettingQuery, SystemSettingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SystemSettingQuery, SystemSettingQueryVariables>(SystemSettingDocument, options);
        }
export type SystemSettingQueryHookResult = ReturnType<typeof useSystemSettingQuery>;
export type SystemSettingLazyQueryHookResult = ReturnType<typeof useSystemSettingLazyQuery>;
export type SystemSettingQueryResult = ApolloReactCommon.QueryResult<SystemSettingQuery, SystemSettingQueryVariables>;
export const UpdateSystemSettingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSystemSetting"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SystemSettingInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"settingMutation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"systemSetting"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SystemSetting"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SystemSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SystemSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"singleUpload"}},{"kind":"Field","name":{"kind":"Name","value":"maxSingleUpload"}},{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"sessionExpTime"}},{"kind":"Field","name":{"kind":"Name","value":"logLevel"}}]}}]} as unknown as DocumentNode;
export type UpdateSystemSettingMutationFn = ApolloReactCommon.MutationFunction<UpdateSystemSettingMutation, UpdateSystemSettingMutationVariables>;

/**
 * __useUpdateSystemSettingMutation__
 *
 * To run a mutation, you first call `useUpdateSystemSettingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSystemSettingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSystemSettingMutation, { data, loading, error }] = useUpdateSystemSettingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSystemSettingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateSystemSettingMutation, UpdateSystemSettingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UpdateSystemSettingMutation, UpdateSystemSettingMutationVariables>(UpdateSystemSettingDocument, options);
      }
export type UpdateSystemSettingMutationHookResult = ReturnType<typeof useUpdateSystemSettingMutation>;
export type UpdateSystemSettingMutationResult = ApolloReactCommon.MutationResult<UpdateSystemSettingMutation>;
export type UpdateSystemSettingMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateSystemSettingMutation, UpdateSystemSettingMutationVariables>;
export const SamlSettingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SAMLSetting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"SAMLSetting"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SAMLSetting"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SAMLSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SAMLSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"enabled"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"metaData"}},{"kind":"Field","name":{"kind":"Name","value":"autoCreateUser"}},{"kind":"Field","name":{"kind":"Name","value":"autoJoinTeam"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"autoJoinTeamRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useSamlSettingQuery__
 *
 * To run a query within a React component, call `useSamlSettingQuery` and pass it any options that fit your needs.
 * When your component renders, `useSamlSettingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSamlSettingQuery({
 *   variables: {
 *   },
 * });
 */
export function useSamlSettingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SamlSettingQuery, SamlSettingQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SamlSettingQuery, SamlSettingQueryVariables>(SamlSettingDocument, options);
      }
export function useSamlSettingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SamlSettingQuery, SamlSettingQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SamlSettingQuery, SamlSettingQueryVariables>(SamlSettingDocument, options);
        }
export type SamlSettingQueryHookResult = ReturnType<typeof useSamlSettingQuery>;
export type SamlSettingLazyQueryHookResult = ReturnType<typeof useSamlSettingLazyQuery>;
export type SamlSettingQueryResult = ApolloReactCommon.QueryResult<SamlSettingQuery, SamlSettingQueryVariables>;
export const UpdateSamlSettingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateSAMLSetting"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SAMLSettingInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"management"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"settingMutation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"SAMLSetting"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SAMLSetting"}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SAMLSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SAMLSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"enabled"}},{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"metaData"}},{"kind":"Field","name":{"kind":"Name","value":"autoCreateUser"}},{"kind":"Field","name":{"kind":"Name","value":"autoJoinTeam"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"autoJoinTeamRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export type UpdateSamlSettingMutationFn = ApolloReactCommon.MutationFunction<UpdateSamlSettingMutation, UpdateSamlSettingMutationVariables>;

/**
 * __useUpdateSamlSettingMutation__
 *
 * To run a mutation, you first call `useUpdateSamlSettingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSamlSettingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSamlSettingMutation, { data, loading, error }] = useUpdateSamlSettingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSamlSettingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateSamlSettingMutation, UpdateSamlSettingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UpdateSamlSettingMutation, UpdateSamlSettingMutationVariables>(UpdateSamlSettingDocument, options);
      }
export type UpdateSamlSettingMutationHookResult = ReturnType<typeof useUpdateSamlSettingMutation>;
export type UpdateSamlSettingMutationResult = ApolloReactCommon.MutationResult<UpdateSamlSettingMutation>;
export type UpdateSamlSettingMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateSamlSettingMutation, UpdateSamlSettingMutationVariables>;
export const UpdateAnalysisSettingDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"UpdateAnalysisSetting"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"EditAnalysisSettingInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editAnalysisSetting"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"AnalysisSetting"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"AnalysisSetting"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"AnalysisSetting"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analyzeTimeout"}},{"kind":"Field","name":{"kind":"Name","value":"fileType"}},{"kind":"Field","name":{"kind":"Name","value":"fileSkiped"}}]}}]} as unknown as DocumentNode;
export type UpdateAnalysisSettingMutationFn = ApolloReactCommon.MutationFunction<UpdateAnalysisSettingMutation, UpdateAnalysisSettingMutationVariables>;

/**
 * __useUpdateAnalysisSettingMutation__
 *
 * To run a mutation, you first call `useUpdateAnalysisSettingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAnalysisSettingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAnalysisSettingMutation, { data, loading, error }] = useUpdateAnalysisSettingMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateAnalysisSettingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAnalysisSettingMutation, UpdateAnalysisSettingMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<UpdateAnalysisSettingMutation, UpdateAnalysisSettingMutationVariables>(UpdateAnalysisSettingDocument, options);
      }
export type UpdateAnalysisSettingMutationHookResult = ReturnType<typeof useUpdateAnalysisSettingMutation>;
export type UpdateAnalysisSettingMutationResult = ApolloReactCommon.MutationResult<UpdateAnalysisSettingMutation>;
export type UpdateAnalysisSettingMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAnalysisSettingMutation, UpdateAnalysisSettingMutationVariables>;
export const ProjectTaskItemListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectTaskItemList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectTaskItemList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"carModelList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"principalList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"lawList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectOption"}}]}},{"kind":"Field","name":{"kind":"Name","value":"modelList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectOption"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectOption"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"NewTaskAttributeRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectTaskItemListQuery__
 *
 * To run a query within a React component, call `useProjectTaskItemListQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectTaskItemListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectTaskItemListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useProjectTaskItemListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectTaskItemListQuery, ProjectTaskItemListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectTaskItemListQuery, ProjectTaskItemListQueryVariables>(ProjectTaskItemListDocument, options);
      }
export function useProjectTaskItemListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectTaskItemListQuery, ProjectTaskItemListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectTaskItemListQuery, ProjectTaskItemListQueryVariables>(ProjectTaskItemListDocument, options);
        }
export type ProjectTaskItemListQueryHookResult = ReturnType<typeof useProjectTaskItemListQuery>;
export type ProjectTaskItemListLazyQueryHookResult = ReturnType<typeof useProjectTaskItemListLazyQuery>;
export type ProjectTaskItemListQueryResult = ApolloReactCommon.QueryResult<ProjectTaskItemListQuery, ProjectTaskItemListQueryVariables>;
export const ComplianceProjectListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ComplianceProjectList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"projectInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProjectListObject"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"testResultObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}},{"kind":"Field","name":{"kind":"Name","value":"testingNumber"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProjectListObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectInfo"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"lawStandard"}},{"kind":"Field","name":{"kind":"Name","value":"carModel"}},{"kind":"Field","name":{"kind":"Name","value":"module"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"testResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"testResultObject"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useComplianceProjectListQuery__
 *
 * To run a query within a React component, call `useComplianceProjectListQuery` and pass it any options that fit your needs.
 * When your component renders, `useComplianceProjectListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useComplianceProjectListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useComplianceProjectListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ComplianceProjectListQuery, ComplianceProjectListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ComplianceProjectListQuery, ComplianceProjectListQueryVariables>(ComplianceProjectListDocument, options);
      }
export function useComplianceProjectListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ComplianceProjectListQuery, ComplianceProjectListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ComplianceProjectListQuery, ComplianceProjectListQueryVariables>(ComplianceProjectListDocument, options);
        }
export type ComplianceProjectListQueryHookResult = ReturnType<typeof useComplianceProjectListQuery>;
export type ComplianceProjectListLazyQueryHookResult = ReturnType<typeof useComplianceProjectListLazyQuery>;
export type ComplianceProjectListQueryResult = ApolloReactCommon.QueryResult<ComplianceProjectListQuery, ComplianceProjectListQueryVariables>;
export const CreateProjectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateProject"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CreateProjectInput"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode;
export type CreateProjectMutationFn = ApolloReactCommon.MutationFunction<CreateProjectMutation, CreateProjectMutationVariables>;

/**
 * __useCreateProjectMutation__
 *
 * To run a mutation, you first call `useCreateProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProjectMutation, { data, loading, error }] = useCreateProjectMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateProjectMutation, CreateProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateProjectMutation, CreateProjectMutationVariables>(CreateProjectDocument, options);
      }
export type CreateProjectMutationHookResult = ReturnType<typeof useCreateProjectMutation>;
export type CreateProjectMutationResult = ApolloReactCommon.MutationResult<CreateProjectMutation>;
export type CreateProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateProjectMutation, CreateProjectMutationVariables>;
export const ComplianceTeamOverviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ComplianceTeamOverview"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamOverview"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"TeamOverviewRspObject"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"carInfoObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CarInfoStatisFuse"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"value"}},{"kind":"Field","name":{"kind":"Name","value":"checkStatueMsg"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"moduleInfoObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ModuleInfoStatis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"number"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"TeamOverviewRspObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"TeamOverviewRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectNumber"}},{"kind":"Field","name":{"kind":"Name","value":"checkingNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passingRate"}},{"kind":"Field","name":{"kind":"Name","value":"unCheckedNumber"}},{"kind":"Field","name":{"kind":"Name","value":"carInfoList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"carInfoObject"}}]}},{"kind":"Field","name":{"kind":"Name","value":"moduleInfoList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"moduleInfoObject"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useComplianceTeamOverviewQuery__
 *
 * To run a query within a React component, call `useComplianceTeamOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useComplianceTeamOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useComplianceTeamOverviewQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useComplianceTeamOverviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ComplianceTeamOverviewQuery, ComplianceTeamOverviewQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ComplianceTeamOverviewQuery, ComplianceTeamOverviewQueryVariables>(ComplianceTeamOverviewDocument, options);
      }
export function useComplianceTeamOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ComplianceTeamOverviewQuery, ComplianceTeamOverviewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ComplianceTeamOverviewQuery, ComplianceTeamOverviewQueryVariables>(ComplianceTeamOverviewDocument, options);
        }
export type ComplianceTeamOverviewQueryHookResult = ReturnType<typeof useComplianceTeamOverviewQuery>;
export type ComplianceTeamOverviewLazyQueryHookResult = ReturnType<typeof useComplianceTeamOverviewLazyQuery>;
export type ComplianceTeamOverviewQueryResult = ApolloReactCommon.QueryResult<ComplianceTeamOverviewQuery, ComplianceTeamOverviewQueryVariables>;
export const RecentStatisticsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RecentStatistics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchDay"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"recentStatistics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"searchDay"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchDay"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"statTime"}},{"kind":"Field","name":{"kind":"Name","value":"number"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useRecentStatisticsQuery__
 *
 * To run a query within a React component, call `useRecentStatisticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useRecentStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRecentStatisticsQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      searchDay: // value for 'searchDay'
 *   },
 * });
 */
export function useRecentStatisticsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<RecentStatisticsQuery, RecentStatisticsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<RecentStatisticsQuery, RecentStatisticsQueryVariables>(RecentStatisticsDocument, options);
      }
export function useRecentStatisticsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RecentStatisticsQuery, RecentStatisticsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<RecentStatisticsQuery, RecentStatisticsQueryVariables>(RecentStatisticsDocument, options);
        }
export type RecentStatisticsQueryHookResult = ReturnType<typeof useRecentStatisticsQuery>;
export type RecentStatisticsLazyQueryHookResult = ReturnType<typeof useRecentStatisticsLazyQuery>;
export type RecentStatisticsQueryResult = ApolloReactCommon.QueryResult<RecentStatisticsQuery, RecentStatisticsQueryVariables>;
export const ProjectDetailsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectDetails"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectDetails"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"projectDetailsObject"}},{"kind":"Field","name":{"kind":"Name","value":"testResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"_testResultObject"}}]}},{"kind":"Field","name":{"kind":"Name","value":"testDeviceId"}},{"kind":"Field","name":{"kind":"Name","value":"caseResultAlertNumber"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"autoCaseCount"}},{"kind":"Field","name":{"kind":"Name","value":"semiAutomaticCaseCount"}},{"kind":"Field","name":{"kind":"Name","value":"manualCaseCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"testObject"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"autoPartsName"}},{"kind":"Field","name":{"kind":"Name","value":"systemName"}},{"kind":"Field","name":{"kind":"Name","value":"systemType"}},{"kind":"Field","name":{"kind":"Name","value":"systemVersion"}}]}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"complianceResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"_complianceResult"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"projectDetailsObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectInfo"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"carModel"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUserId"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"lawStandard"}},{"kind":"Field","name":{"kind":"Name","value":"module"}},{"kind":"Field","name":{"kind":"Name","value":"messages"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"_testResultObject"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProjectTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passRate"}},{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"testingNumber"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"_complianceResult"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CatalogueTestResultRsp"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}},{"kind":"Field","name":{"kind":"Name","value":"catalogueNumber"}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectDetailsQuery__
 *
 * To run a query within a React component, call `useProjectDetailsQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectDetailsQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useProjectDetailsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectDetailsQuery, ProjectDetailsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectDetailsQuery, ProjectDetailsQueryVariables>(ProjectDetailsDocument, options);
      }
export function useProjectDetailsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectDetailsQuery, ProjectDetailsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectDetailsQuery, ProjectDetailsQueryVariables>(ProjectDetailsDocument, options);
        }
export type ProjectDetailsQueryHookResult = ReturnType<typeof useProjectDetailsQuery>;
export type ProjectDetailsLazyQueryHookResult = ReturnType<typeof useProjectDetailsLazyQuery>;
export type ProjectDetailsQueryResult = ApolloReactCommon.QueryResult<ProjectDetailsQuery, ProjectDetailsQueryVariables>;
export const LawCatalogueCheckDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"LawCatalogueCheckDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueCheckDetail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"lawCatalogueCheckDetailpObj"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CaseClassifyResultRepObj"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CaseClassifyResultRep"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"caseSerialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"checkTool"}},{"kind":"Field","name":{"kind":"Name","value":"hanlder"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"lawCatalogueCheckDetailpObj"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LawCatalogueCheckDetailRep"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawName"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawCatalogueName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify2"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify3"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify4"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify5"}},{"kind":"Field","name":{"kind":"Name","value":"checkResultCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkPassResultCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkUnPassNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkIgnoreNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkUnTestNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"passStatus"}},{"kind":"Field","name":{"kind":"Name","value":"caseClassifyResultRep"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CaseClassifyResultRepObj"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useLawCatalogueCheckDetailQuery__
 *
 * To run a query within a React component, call `useLawCatalogueCheckDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useLawCatalogueCheckDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLawCatalogueCheckDetailQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useLawCatalogueCheckDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<LawCatalogueCheckDetailQuery, LawCatalogueCheckDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<LawCatalogueCheckDetailQuery, LawCatalogueCheckDetailQueryVariables>(LawCatalogueCheckDetailDocument, options);
      }
export function useLawCatalogueCheckDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LawCatalogueCheckDetailQuery, LawCatalogueCheckDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<LawCatalogueCheckDetailQuery, LawCatalogueCheckDetailQueryVariables>(LawCatalogueCheckDetailDocument, options);
        }
export type LawCatalogueCheckDetailQueryHookResult = ReturnType<typeof useLawCatalogueCheckDetailQuery>;
export type LawCatalogueCheckDetailLazyQueryHookResult = ReturnType<typeof useLawCatalogueCheckDetailLazyQuery>;
export type LawCatalogueCheckDetailQueryResult = ApolloReactCommon.QueryResult<LawCatalogueCheckDetailQuery, LawCatalogueCheckDetailQueryVariables>;
export const ChangeProjectHistoryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ChangeProjectHistory"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"changeProjectHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"history"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"changeTime"}},{"kind":"Field","name":{"kind":"Name","value":"changeUser"}},{"kind":"Field","name":{"kind":"Name","value":"changeObject"}},{"kind":"Field","name":{"kind":"Name","value":"changematter"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useChangeProjectHistoryQuery__
 *
 * To run a query within a React component, call `useChangeProjectHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useChangeProjectHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChangeProjectHistoryQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useChangeProjectHistoryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ChangeProjectHistoryQuery, ChangeProjectHistoryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ChangeProjectHistoryQuery, ChangeProjectHistoryQueryVariables>(ChangeProjectHistoryDocument, options);
      }
export function useChangeProjectHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ChangeProjectHistoryQuery, ChangeProjectHistoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ChangeProjectHistoryQuery, ChangeProjectHistoryQueryVariables>(ChangeProjectHistoryDocument, options);
        }
export type ChangeProjectHistoryQueryHookResult = ReturnType<typeof useChangeProjectHistoryQuery>;
export type ChangeProjectHistoryLazyQueryHookResult = ReturnType<typeof useChangeProjectHistoryLazyQuery>;
export type ChangeProjectHistoryQueryResult = ApolloReactCommon.QueryResult<ChangeProjectHistoryQuery, ChangeProjectHistoryQueryVariables>;
export const MyItemsGetCaseListByUserIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MyItemsGetCaseListByUserId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"myItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCaseListByUserId"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"projectName"}},{"kind":"Field","name":{"kind":"Name","value":"projectId"}},{"kind":"Field","name":{"kind":"Name","value":"toolId"}},{"kind":"Field","name":{"kind":"Name","value":"toolName"}},{"kind":"Field","name":{"kind":"Name","value":"status"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useMyItemsGetCaseListByUserIdQuery__
 *
 * To run a query within a React component, call `useMyItemsGetCaseListByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyItemsGetCaseListByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyItemsGetCaseListByUserIdQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useMyItemsGetCaseListByUserIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<MyItemsGetCaseListByUserIdQuery, MyItemsGetCaseListByUserIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<MyItemsGetCaseListByUserIdQuery, MyItemsGetCaseListByUserIdQueryVariables>(MyItemsGetCaseListByUserIdDocument, options);
      }
export function useMyItemsGetCaseListByUserIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyItemsGetCaseListByUserIdQuery, MyItemsGetCaseListByUserIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<MyItemsGetCaseListByUserIdQuery, MyItemsGetCaseListByUserIdQueryVariables>(MyItemsGetCaseListByUserIdDocument, options);
        }
export type MyItemsGetCaseListByUserIdQueryHookResult = ReturnType<typeof useMyItemsGetCaseListByUserIdQuery>;
export type MyItemsGetCaseListByUserIdLazyQueryHookResult = ReturnType<typeof useMyItemsGetCaseListByUserIdLazyQuery>;
export type MyItemsGetCaseListByUserIdQueryResult = ApolloReactCommon.QueryResult<MyItemsGetCaseListByUserIdQuery, MyItemsGetCaseListByUserIdQueryVariables>;
export const MyItemsGetProjectListByUserIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MyItemsGetProjectListByUserId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"myItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getProjectListByUserId"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}},{"kind":"Field","name":{"kind":"Name","value":"lawStandard"}},{"kind":"Field","name":{"kind":"Name","value":"carModel"}},{"kind":"Field","name":{"kind":"Name","value":"module"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"testResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useMyItemsGetProjectListByUserIdQuery__
 *
 * To run a query within a React component, call `useMyItemsGetProjectListByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyItemsGetProjectListByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyItemsGetProjectListByUserIdQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useMyItemsGetProjectListByUserIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<MyItemsGetProjectListByUserIdQuery, MyItemsGetProjectListByUserIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<MyItemsGetProjectListByUserIdQuery, MyItemsGetProjectListByUserIdQueryVariables>(MyItemsGetProjectListByUserIdDocument, options);
      }
export function useMyItemsGetProjectListByUserIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyItemsGetProjectListByUserIdQuery, MyItemsGetProjectListByUserIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<MyItemsGetProjectListByUserIdQuery, MyItemsGetProjectListByUserIdQueryVariables>(MyItemsGetProjectListByUserIdDocument, options);
        }
export type MyItemsGetProjectListByUserIdQueryHookResult = ReturnType<typeof useMyItemsGetProjectListByUserIdQuery>;
export type MyItemsGetProjectListByUserIdLazyQueryHookResult = ReturnType<typeof useMyItemsGetProjectListByUserIdLazyQuery>;
export type MyItemsGetProjectListByUserIdQueryResult = ApolloReactCommon.QueryResult<MyItemsGetProjectListByUserIdQuery, MyItemsGetProjectListByUserIdQueryVariables>;
export const MyItemsGetToolListByUserIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MyItemsGetToolListByUserId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"myItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getToolListByUserId"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"projectId"}},{"kind":"Field","name":{"kind":"Name","value":"projectName"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}},{"kind":"Field","name":{"kind":"Name","value":"toolResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useMyItemsGetToolListByUserIdQuery__
 *
 * To run a query within a React component, call `useMyItemsGetToolListByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyItemsGetToolListByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyItemsGetToolListByUserIdQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useMyItemsGetToolListByUserIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<MyItemsGetToolListByUserIdQuery, MyItemsGetToolListByUserIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<MyItemsGetToolListByUserIdQuery, MyItemsGetToolListByUserIdQueryVariables>(MyItemsGetToolListByUserIdDocument, options);
      }
export function useMyItemsGetToolListByUserIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyItemsGetToolListByUserIdQuery, MyItemsGetToolListByUserIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<MyItemsGetToolListByUserIdQuery, MyItemsGetToolListByUserIdQueryVariables>(MyItemsGetToolListByUserIdDocument, options);
        }
export type MyItemsGetToolListByUserIdQueryHookResult = ReturnType<typeof useMyItemsGetToolListByUserIdQuery>;
export type MyItemsGetToolListByUserIdLazyQueryHookResult = ReturnType<typeof useMyItemsGetToolListByUserIdLazyQuery>;
export type MyItemsGetToolListByUserIdQueryResult = ApolloReactCommon.QueryResult<MyItemsGetToolListByUserIdQuery, MyItemsGetToolListByUserIdQueryVariables>;
export const MyItemsCountDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"MyItemsCount"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"myItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectCount"}},{"kind":"Field","name":{"kind":"Name","value":"caseCount"}},{"kind":"Field","name":{"kind":"Name","value":"toolCount"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useMyItemsCountQuery__
 *
 * To run a query within a React component, call `useMyItemsCountQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyItemsCountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyItemsCountQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useMyItemsCountQuery(baseOptions: ApolloReactHooks.QueryHookOptions<MyItemsCountQuery, MyItemsCountQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<MyItemsCountQuery, MyItemsCountQueryVariables>(MyItemsCountDocument, options);
      }
export function useMyItemsCountLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MyItemsCountQuery, MyItemsCountQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<MyItemsCountQuery, MyItemsCountQueryVariables>(MyItemsCountDocument, options);
        }
export type MyItemsCountQueryHookResult = ReturnType<typeof useMyItemsCountQuery>;
export type MyItemsCountLazyQueryHookResult = ReturnType<typeof useMyItemsCountLazyQuery>;
export type MyItemsCountQueryResult = ApolloReactCommon.QueryResult<MyItemsCountQuery, MyItemsCountQueryVariables>;
export const CaseOfToolResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CaseOfToolResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"toolID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseOfToolResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"toolID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"toolID"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"toolItemBase"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"projectId"}},{"kind":"Field","name":{"kind":"Name","value":"projectName"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"dutyUser"}},{"kind":"Field","name":{"kind":"Name","value":"toolResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"passNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"unTestNumber"}},{"kind":"Field","name":{"kind":"Name","value":"ignoreNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passRate"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"caseResult"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"handlerUser"}},{"kind":"Field","name":{"kind":"Name","value":"catalogue"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCaseOfToolResultQuery__
 *
 * To run a query within a React component, call `useCaseOfToolResultQuery` and pass it any options that fit your needs.
 * When your component renders, `useCaseOfToolResultQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCaseOfToolResultQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      toolID: // value for 'toolID'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useCaseOfToolResultQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CaseOfToolResultQuery, CaseOfToolResultQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CaseOfToolResultQuery, CaseOfToolResultQueryVariables>(CaseOfToolResultDocument, options);
      }
export function useCaseOfToolResultLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CaseOfToolResultQuery, CaseOfToolResultQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CaseOfToolResultQuery, CaseOfToolResultQueryVariables>(CaseOfToolResultDocument, options);
        }
export type CaseOfToolResultQueryHookResult = ReturnType<typeof useCaseOfToolResultQuery>;
export type CaseOfToolResultLazyQueryHookResult = ReturnType<typeof useCaseOfToolResultLazyQuery>;
export type CaseOfToolResultQueryResult = ApolloReactCommon.QueryResult<CaseOfToolResultQuery, CaseOfToolResultQueryVariables>;
export const CaseResultDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CaseResultDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseResultDetail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseResultId"}},{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"projectId"}},{"kind":"Field","name":{"kind":"Name","value":"projectName"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"caseCheckStatus"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawCatalogueName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify2"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify3"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify4"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify5"}},{"kind":"Field","name":{"kind":"Name","value":"checkMethod"}},{"kind":"Field","name":{"kind":"Name","value":"testCaseStep"}},{"kind":"Field","name":{"kind":"Name","value":"resultStandard"}},{"kind":"Field","name":{"kind":"Name","value":"resultSuccess"}},{"kind":"Field","name":{"kind":"Name","value":"resultFail"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCaseResultDetailQuery__
 *
 * To run a query within a React component, call `useCaseResultDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useCaseResultDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCaseResultDetailQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useCaseResultDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CaseResultDetailQuery, CaseResultDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CaseResultDetailQuery, CaseResultDetailQueryVariables>(CaseResultDetailDocument, options);
      }
export function useCaseResultDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CaseResultDetailQuery, CaseResultDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CaseResultDetailQuery, CaseResultDetailQueryVariables>(CaseResultDetailDocument, options);
        }
export type CaseResultDetailQueryHookResult = ReturnType<typeof useCaseResultDetailQuery>;
export type CaseResultDetailLazyQueryHookResult = ReturnType<typeof useCaseResultDetailLazyQuery>;
export type CaseResultDetailQueryResult = ApolloReactCommon.QueryResult<CaseResultDetailQuery, CaseResultDetailQueryVariables>;
export const SysMessageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SysMessage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sysMessage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"occTime"}},{"kind":"Field","name":{"kind":"Name","value":"message"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useSysMessageQuery__
 *
 * To run a query within a React component, call `useSysMessageQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysMessageQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useSysMessageQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SysMessageQuery, SysMessageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SysMessageQuery, SysMessageQueryVariables>(SysMessageDocument, options);
      }
export function useSysMessageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SysMessageQuery, SysMessageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SysMessageQuery, SysMessageQueryVariables>(SysMessageDocument, options);
        }
export type SysMessageQueryHookResult = ReturnType<typeof useSysMessageQuery>;
export type SysMessageLazyQueryHookResult = ReturnType<typeof useSysMessageLazyQuery>;
export type SysMessageQueryResult = ApolloReactCommon.QueryResult<SysMessageQuery, SysMessageQueryVariables>;
export const ComplianceDeleteProjectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ComplianceDeleteProject"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"input"}},"type":{"kind":"NonNullType","type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"Variable","name":{"kind":"Name","value":"input"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode;
export type ComplianceDeleteProjectMutationFn = ApolloReactCommon.MutationFunction<ComplianceDeleteProjectMutation, ComplianceDeleteProjectMutationVariables>;

/**
 * __useComplianceDeleteProjectMutation__
 *
 * To run a mutation, you first call `useComplianceDeleteProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useComplianceDeleteProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [complianceDeleteProjectMutation, { data, loading, error }] = useComplianceDeleteProjectMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useComplianceDeleteProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ComplianceDeleteProjectMutation, ComplianceDeleteProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ComplianceDeleteProjectMutation, ComplianceDeleteProjectMutationVariables>(ComplianceDeleteProjectDocument, options);
      }
export type ComplianceDeleteProjectMutationHookResult = ReturnType<typeof useComplianceDeleteProjectMutation>;
export type ComplianceDeleteProjectMutationResult = ApolloReactCommon.MutationResult<ComplianceDeleteProjectMutation>;
export type ComplianceDeleteProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<ComplianceDeleteProjectMutation, ComplianceDeleteProjectMutationVariables>;
export const EndTaskDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"EndTask"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"status"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"proStatus"},"value":{"kind":"Variable","name":{"kind":"Name","value":"status"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode;
export type EndTaskMutationFn = ApolloReactCommon.MutationFunction<EndTaskMutation, EndTaskMutationVariables>;

/**
 * __useEndTaskMutation__
 *
 * To run a mutation, you first call `useEndTaskMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEndTaskMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [endTaskMutation, { data, loading, error }] = useEndTaskMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      status: // value for 'status'
 *   },
 * });
 */
export function useEndTaskMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EndTaskMutation, EndTaskMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<EndTaskMutation, EndTaskMutationVariables>(EndTaskDocument, options);
      }
export type EndTaskMutationHookResult = ReturnType<typeof useEndTaskMutation>;
export type EndTaskMutationResult = ApolloReactCommon.MutationResult<EndTaskMutation>;
export type EndTaskMutationOptions = ApolloReactCommon.BaseMutationOptions<EndTaskMutation, EndTaskMutationVariables>;
export const ResetToolResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ResetToolResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"toolID"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"resetToolResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"toolID"},"value":{"kind":"Variable","name":{"kind":"Name","value":"toolID"}}}]}]}}]} as unknown as DocumentNode;
export type ResetToolResultMutationFn = ApolloReactCommon.MutationFunction<ResetToolResultMutation, ResetToolResultMutationVariables>;

/**
 * __useResetToolResultMutation__
 *
 * To run a mutation, you first call `useResetToolResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetToolResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetToolResultMutation, { data, loading, error }] = useResetToolResultMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      toolID: // value for 'toolID'
 *   },
 * });
 */
export function useResetToolResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResetToolResultMutation, ResetToolResultMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ResetToolResultMutation, ResetToolResultMutationVariables>(ResetToolResultDocument, options);
      }
export type ResetToolResultMutationHookResult = ReturnType<typeof useResetToolResultMutation>;
export type ResetToolResultMutationResult = ApolloReactCommon.MutationResult<ResetToolResultMutation>;
export type ResetToolResultMutationOptions = ApolloReactCommon.BaseMutationOptions<ResetToolResultMutation, ResetToolResultMutationVariables>;
export const ResetCaseResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ResetCaseResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseIds"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"resetToolResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseIds"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseIds"}}}]}]}}]} as unknown as DocumentNode;
export type ResetCaseResultMutationFn = ApolloReactCommon.MutationFunction<ResetCaseResultMutation, ResetCaseResultMutationVariables>;

/**
 * __useResetCaseResultMutation__
 *
 * To run a mutation, you first call `useResetCaseResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetCaseResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetCaseResultMutation, { data, loading, error }] = useResetCaseResultMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      caseIds: // value for 'caseIds'
 *   },
 * });
 */
export function useResetCaseResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResetCaseResultMutation, ResetCaseResultMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ResetCaseResultMutation, ResetCaseResultMutationVariables>(ResetCaseResultDocument, options);
      }
export type ResetCaseResultMutationHookResult = ReturnType<typeof useResetCaseResultMutation>;
export type ResetCaseResultMutationResult = ApolloReactCommon.MutationResult<ResetCaseResultMutation>;
export type ResetCaseResultMutationOptions = ApolloReactCommon.BaseMutationOptions<ResetCaseResultMutation, ResetCaseResultMutationVariables>;
export const GetCaseAllStepDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCaseAllStep"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCaseAllStep"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stepInfoList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stepId"}},{"kind":"Field","name":{"kind":"Name","value":"stepName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"currentCaseStepIndex"}},{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"caseStatus"}},{"kind":"Field","name":{"kind":"Name","value":"projectStatus"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCaseAllStepQuery__
 *
 * To run a query within a React component, call `useGetCaseAllStepQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCaseAllStepQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCaseAllStepQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetCaseAllStepQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCaseAllStepQuery, GetCaseAllStepQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCaseAllStepQuery, GetCaseAllStepQueryVariables>(GetCaseAllStepDocument, options);
      }
export function useGetCaseAllStepLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCaseAllStepQuery, GetCaseAllStepQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCaseAllStepQuery, GetCaseAllStepQueryVariables>(GetCaseAllStepDocument, options);
        }
export type GetCaseAllStepQueryHookResult = ReturnType<typeof useGetCaseAllStepQuery>;
export type GetCaseAllStepLazyQueryHookResult = ReturnType<typeof useGetCaseAllStepLazyQuery>;
export type GetCaseAllStepQueryResult = ApolloReactCommon.QueryResult<GetCaseAllStepQuery, GetCaseAllStepQueryVariables>;
export const GetCaseDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCaseDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCaseAllStep"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stepInfoList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stepId"}},{"kind":"Field","name":{"kind":"Name","value":"stepName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"currentCaseStepIndex"}},{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"caseStatus"}},{"kind":"Field","name":{"kind":"Name","value":"projectStatus"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCaseDetailQuery__
 *
 * To run a query within a React component, call `useGetCaseDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCaseDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCaseDetailQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetCaseDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCaseDetailQuery, GetCaseDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCaseDetailQuery, GetCaseDetailQueryVariables>(GetCaseDetailDocument, options);
      }
export function useGetCaseDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCaseDetailQuery, GetCaseDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCaseDetailQuery, GetCaseDetailQueryVariables>(GetCaseDetailDocument, options);
        }
export type GetCaseDetailQueryHookResult = ReturnType<typeof useGetCaseDetailQuery>;
export type GetCaseDetailLazyQueryHookResult = ReturnType<typeof useGetCaseDetailLazyQuery>;
export type GetCaseDetailQueryResult = ApolloReactCommon.QueryResult<GetCaseDetailQuery, GetCaseDetailQueryVariables>;
export const GetCaseStepDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCaseStepDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCaseStepDetail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stepName"}},{"kind":"Field","name":{"kind":"Name","value":"stepDesc"}},{"kind":"Field","name":{"kind":"Name","value":"stepType"}},{"kind":"Field","name":{"kind":"Name","value":"markdown"}},{"kind":"Field","name":{"kind":"Name","value":"config"}},{"kind":"Field","name":{"kind":"Name","value":"result"}},{"kind":"Field","name":{"kind":"Name","value":"caseEnable"}},{"kind":"Field","name":{"kind":"Name","value":"resetCheckEnable"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCaseStepDetailQuery__
 *
 * To run a query within a React component, call `useGetCaseStepDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCaseStepDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCaseStepDetailQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      caseId: // value for 'caseId'
 *      stepId: // value for 'stepId'
 *   },
 * });
 */
export function useGetCaseStepDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCaseStepDetailQuery, GetCaseStepDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCaseStepDetailQuery, GetCaseStepDetailQueryVariables>(GetCaseStepDetailDocument, options);
      }
export function useGetCaseStepDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCaseStepDetailQuery, GetCaseStepDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCaseStepDetailQuery, GetCaseStepDetailQueryVariables>(GetCaseStepDetailDocument, options);
        }
export type GetCaseStepDetailQueryHookResult = ReturnType<typeof useGetCaseStepDetailQuery>;
export type GetCaseStepDetailLazyQueryHookResult = ReturnType<typeof useGetCaseStepDetailLazyQuery>;
export type GetCaseStepDetailQueryResult = ApolloReactCommon.QueryResult<GetCaseStepDetailQuery, GetCaseStepDetailQueryVariables>;
export const GetStepResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetStepResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getStepResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"clientStatus"}},{"kind":"Field","name":{"kind":"Name","value":"stepStatus"}},{"kind":"Field","name":{"kind":"Name","value":"result"}},{"kind":"Field","alias":{"kind":"Name","value":"stepIndex"},"name":{"kind":"Name","value":"setpIndex"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetStepResultQuery__
 *
 * To run a query within a React component, call `useGetStepResultQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStepResultQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStepResultQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      caseId: // value for 'caseId'
 *      stepId: // value for 'stepId'
 *   },
 * });
 */
export function useGetStepResultQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetStepResultQuery, GetStepResultQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetStepResultQuery, GetStepResultQueryVariables>(GetStepResultDocument, options);
      }
export function useGetStepResultLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetStepResultQuery, GetStepResultQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetStepResultQuery, GetStepResultQueryVariables>(GetStepResultDocument, options);
        }
export type GetStepResultQueryHookResult = ReturnType<typeof useGetStepResultQuery>;
export type GetStepResultLazyQueryHookResult = ReturnType<typeof useGetStepResultLazyQuery>;
export type GetStepResultQueryResult = ApolloReactCommon.QueryResult<GetStepResultQuery, GetStepResultQueryVariables>;
export const GetProjectAutoTaskProgressDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetProjectAutoTaskProgress"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getProjectAutoTaskProgress"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"maxIndex"}},{"kind":"Field","name":{"kind":"Name","value":"index"}},{"kind":"Field","name":{"kind":"Name","value":"alert"}},{"kind":"Field","name":{"kind":"Name","value":"alertMessage"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetProjectAutoTaskProgressQuery__
 *
 * To run a query within a React component, call `useGetProjectAutoTaskProgressQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectAutoTaskProgressQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectAutoTaskProgressQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetProjectAutoTaskProgressQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetProjectAutoTaskProgressQuery, GetProjectAutoTaskProgressQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetProjectAutoTaskProgressQuery, GetProjectAutoTaskProgressQueryVariables>(GetProjectAutoTaskProgressDocument, options);
      }
export function useGetProjectAutoTaskProgressLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectAutoTaskProgressQuery, GetProjectAutoTaskProgressQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetProjectAutoTaskProgressQuery, GetProjectAutoTaskProgressQueryVariables>(GetProjectAutoTaskProgressDocument, options);
        }
export type GetProjectAutoTaskProgressQueryHookResult = ReturnType<typeof useGetProjectAutoTaskProgressQuery>;
export type GetProjectAutoTaskProgressLazyQueryHookResult = ReturnType<typeof useGetProjectAutoTaskProgressLazyQuery>;
export type GetProjectAutoTaskProgressQueryResult = ApolloReactCommon.QueryResult<GetProjectAutoTaskProgressQuery, GetProjectAutoTaskProgressQueryVariables>;
export const CaseResultListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CaseResultList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseResultList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"caseResultList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"serialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"handlerUser"}},{"kind":"Field","name":{"kind":"Name","value":"catalogue"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}},{"kind":"Field","name":{"kind":"Name","value":"classifyName"}},{"kind":"Field","name":{"kind":"Name","value":"classifyId"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemName"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemID"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelType"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelId"}},{"kind":"Field","name":{"kind":"Name","value":"serialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodName"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodId"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCaseResultListQuery__
 *
 * To run a query within a React component, call `useCaseResultListQuery` and pass it any options that fit your needs.
 * When your component renders, `useCaseResultListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCaseResultListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useCaseResultListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CaseResultListQuery, CaseResultListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CaseResultListQuery, CaseResultListQueryVariables>(CaseResultListDocument, options);
      }
export function useCaseResultListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CaseResultListQuery, CaseResultListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CaseResultListQuery, CaseResultListQueryVariables>(CaseResultListDocument, options);
        }
export type CaseResultListQueryHookResult = ReturnType<typeof useCaseResultListQuery>;
export type CaseResultListLazyQueryHookResult = ReturnType<typeof useCaseResultListLazyQuery>;
export type CaseResultListQueryResult = ApolloReactCommon.QueryResult<CaseResultListQuery, CaseResultListQueryVariables>;
export const GetCatalogueDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCatalogueDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCatalogueDetail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawName"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawCatalogueName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify2"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify3"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify4"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify5"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCatalogueDetailQuery__
 *
 * To run a query within a React component, call `useGetCatalogueDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCatalogueDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCatalogueDetailQuery({
 *   variables: {
 *      caseId: // value for 'caseId'
 *   },
 * });
 */
export function useGetCatalogueDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCatalogueDetailQuery, GetCatalogueDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCatalogueDetailQuery, GetCatalogueDetailQueryVariables>(GetCatalogueDetailDocument, options);
      }
export function useGetCatalogueDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCatalogueDetailQuery, GetCatalogueDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCatalogueDetailQuery, GetCatalogueDetailQueryVariables>(GetCatalogueDetailDocument, options);
        }
export type GetCatalogueDetailQueryHookResult = ReturnType<typeof useGetCatalogueDetailQuery>;
export type GetCatalogueDetailLazyQueryHookResult = ReturnType<typeof useGetCatalogueDetailLazyQuery>;
export type GetCatalogueDetailQueryResult = ApolloReactCommon.QueryResult<GetCatalogueDetailQuery, GetCatalogueDetailQueryVariables>;
export const SubmitResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SubmitResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"actionName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"value"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"submitResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"actionName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"actionName"}}},{"kind":"Argument","name":{"kind":"Name","value":"value"},"value":{"kind":"Variable","name":{"kind":"Name","value":"value"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"result"}}]}}]}}]} as unknown as DocumentNode;
export type SubmitResultMutationFn = ApolloReactCommon.MutationFunction<SubmitResultMutation, SubmitResultMutationVariables>;

/**
 * __useSubmitResultMutation__
 *
 * To run a mutation, you first call `useSubmitResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitResultMutation, { data, loading, error }] = useSubmitResultMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      caseId: // value for 'caseId'
 *      stepId: // value for 'stepId'
 *      actionName: // value for 'actionName'
 *      value: // value for 'value'
 *   },
 * });
 */
export function useSubmitResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitResultMutation, SubmitResultMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SubmitResultMutation, SubmitResultMutationVariables>(SubmitResultDocument, options);
      }
export type SubmitResultMutationHookResult = ReturnType<typeof useSubmitResultMutation>;
export type SubmitResultMutationResult = ApolloReactCommon.MutationResult<SubmitResultMutation>;
export type SubmitResultMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitResultMutation, SubmitResultMutationVariables>;
export const NextStepSubmitResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"NextStepSubmitResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"result"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nextStepSubmitResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"result"},"value":{"kind":"Variable","name":{"kind":"Name","value":"result"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stepId"}},{"kind":"Field","name":{"kind":"Name","value":"stepName"}},{"kind":"Field","name":{"kind":"Name","value":"stepTestJson"}}]}}]}}]} as unknown as DocumentNode;
export type NextStepSubmitResultMutationFn = ApolloReactCommon.MutationFunction<NextStepSubmitResultMutation, NextStepSubmitResultMutationVariables>;

/**
 * __useNextStepSubmitResultMutation__
 *
 * To run a mutation, you first call `useNextStepSubmitResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useNextStepSubmitResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [nextStepSubmitResultMutation, { data, loading, error }] = useNextStepSubmitResultMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      caseId: // value for 'caseId'
 *      stepId: // value for 'stepId'
 *      result: // value for 'result'
 *   },
 * });
 */
export function useNextStepSubmitResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<NextStepSubmitResultMutation, NextStepSubmitResultMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<NextStepSubmitResultMutation, NextStepSubmitResultMutationVariables>(NextStepSubmitResultDocument, options);
      }
export type NextStepSubmitResultMutationHookResult = ReturnType<typeof useNextStepSubmitResultMutation>;
export type NextStepSubmitResultMutationResult = ApolloReactCommon.MutationResult<NextStepSubmitResultMutation>;
export type NextStepSubmitResultMutationOptions = ApolloReactCommon.BaseMutationOptions<NextStepSubmitResultMutation, NextStepSubmitResultMutationVariables>;
export const StartProjectDetectionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"StartProjectDetection"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"startProjectDetection"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type StartProjectDetectionMutationFn = ApolloReactCommon.MutationFunction<StartProjectDetectionMutation, StartProjectDetectionMutationVariables>;

/**
 * __useStartProjectDetectionMutation__
 *
 * To run a mutation, you first call `useStartProjectDetectionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStartProjectDetectionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [startProjectDetectionMutation, { data, loading, error }] = useStartProjectDetectionMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useStartProjectDetectionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<StartProjectDetectionMutation, StartProjectDetectionMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<StartProjectDetectionMutation, StartProjectDetectionMutationVariables>(StartProjectDetectionDocument, options);
      }
export type StartProjectDetectionMutationHookResult = ReturnType<typeof useStartProjectDetectionMutation>;
export type StartProjectDetectionMutationResult = ApolloReactCommon.MutationResult<StartProjectDetectionMutation>;
export type StartProjectDetectionMutationOptions = ApolloReactCommon.BaseMutationOptions<StartProjectDetectionMutation, StartProjectDetectionMutationVariables>;
export const ChangeCaseStatusDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ChangeCaseStatus"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cmd"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"changeCaseStatus"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"cmd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cmd"}}}]}]}}]} as unknown as DocumentNode;
export type ChangeCaseStatusMutationFn = ApolloReactCommon.MutationFunction<ChangeCaseStatusMutation, ChangeCaseStatusMutationVariables>;

/**
 * __useChangeCaseStatusMutation__
 *
 * To run a mutation, you first call `useChangeCaseStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeCaseStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeCaseStatusMutation, { data, loading, error }] = useChangeCaseStatusMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      cmd: // value for 'cmd'
 *   },
 * });
 */
export function useChangeCaseStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeCaseStatusMutation, ChangeCaseStatusMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ChangeCaseStatusMutation, ChangeCaseStatusMutationVariables>(ChangeCaseStatusDocument, options);
      }
export type ChangeCaseStatusMutationHookResult = ReturnType<typeof useChangeCaseStatusMutation>;
export type ChangeCaseStatusMutationResult = ApolloReactCommon.MutationResult<ChangeCaseStatusMutation>;
export type ChangeCaseStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeCaseStatusMutation, ChangeCaseStatusMutationVariables>;
export const ResetStepCheckedResultDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ResetStepCheckedResult"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"resetStepCheckedResult"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stepId"}},{"kind":"Field","name":{"kind":"Name","value":"stepName"}},{"kind":"Field","name":{"kind":"Name","value":"stepTestJson"}}]}}]}}]} as unknown as DocumentNode;
export type ResetStepCheckedResultMutationFn = ApolloReactCommon.MutationFunction<ResetStepCheckedResultMutation, ResetStepCheckedResultMutationVariables>;

/**
 * __useResetStepCheckedResultMutation__
 *
 * To run a mutation, you first call `useResetStepCheckedResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetStepCheckedResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetStepCheckedResultMutation, { data, loading, error }] = useResetStepCheckedResultMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      stepId: // value for 'stepId'
 *   },
 * });
 */
export function useResetStepCheckedResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResetStepCheckedResultMutation, ResetStepCheckedResultMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ResetStepCheckedResultMutation, ResetStepCheckedResultMutationVariables>(ResetStepCheckedResultDocument, options);
      }
export type ResetStepCheckedResultMutationHookResult = ReturnType<typeof useResetStepCheckedResultMutation>;
export type ResetStepCheckedResultMutationResult = ApolloReactCommon.MutationResult<ResetStepCheckedResultMutation>;
export type ResetStepCheckedResultMutationOptions = ApolloReactCommon.BaseMutationOptions<ResetStepCheckedResultMutation, ResetStepCheckedResultMutationVariables>;
export const StopProjectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"StopProject"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"stopProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export type StopProjectMutationFn = ApolloReactCommon.MutationFunction<StopProjectMutation, StopProjectMutationVariables>;

/**
 * __useStopProjectMutation__
 *
 * To run a mutation, you first call `useStopProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useStopProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [stopProjectMutation, { data, loading, error }] = useStopProjectMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useStopProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<StopProjectMutation, StopProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<StopProjectMutation, StopProjectMutationVariables>(StopProjectDocument, options);
      }
export type StopProjectMutationHookResult = ReturnType<typeof useStopProjectMutation>;
export type StopProjectMutationResult = ApolloReactCommon.MutationResult<StopProjectMutation>;
export type StopProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<StopProjectMutation, StopProjectMutationVariables>;
export const ResetProjectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ResetProject"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"resetProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type ResetProjectMutationFn = ApolloReactCommon.MutationFunction<ResetProjectMutation, ResetProjectMutationVariables>;

/**
 * __useResetProjectMutation__
 *
 * To run a mutation, you first call `useResetProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetProjectMutation, { data, loading, error }] = useResetProjectMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useResetProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ResetProjectMutation, ResetProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ResetProjectMutation, ResetProjectMutationVariables>(ResetProjectDocument, options);
      }
export type ResetProjectMutationHookResult = ReturnType<typeof useResetProjectMutation>;
export type ResetProjectMutationResult = ApolloReactCommon.MutationResult<ResetProjectMutation>;
export type ResetProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<ResetProjectMutation, ResetProjectMutationVariables>;
export const GetLawListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetLawList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getLawList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"lawId"}},{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"catalogueList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetLawListQuery__
 *
 * To run a query within a React component, call `useGetLawListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLawListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLawListQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetLawListQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetLawListQuery, GetLawListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetLawListQuery, GetLawListQueryVariables>(GetLawListDocument, options);
      }
export function useGetLawListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetLawListQuery, GetLawListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetLawListQuery, GetLawListQueryVariables>(GetLawListDocument, options);
        }
export type GetLawListQueryHookResult = ReturnType<typeof useGetLawListQuery>;
export type GetLawListLazyQueryHookResult = ReturnType<typeof useGetLawListLazyQuery>;
export type GetLawListQueryResult = ApolloReactCommon.QueryResult<GetLawListQuery, GetLawListQueryVariables>;
export const LawDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"LawDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lawId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawDetail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"lawId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lawId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"markDown"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useLawDetailQuery__
 *
 * To run a query within a React component, call `useLawDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useLawDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLawDetailQuery({
 *   variables: {
 *      lawId: // value for 'lawId'
 *   },
 * });
 */
export function useLawDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<LawDetailQuery, LawDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<LawDetailQuery, LawDetailQueryVariables>(LawDetailDocument, options);
      }
export function useLawDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LawDetailQuery, LawDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<LawDetailQuery, LawDetailQueryVariables>(LawDetailDocument, options);
        }
export type LawDetailQueryHookResult = ReturnType<typeof useLawDetailQuery>;
export type LawDetailLazyQueryHookResult = ReturnType<typeof useLawDetailLazyQuery>;
export type LawDetailQueryResult = ApolloReactCommon.QueryResult<LawDetailQuery, LawDetailQueryVariables>;
export const CarInfoListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CarInfoList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"carInfoList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"carList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"collectorConfig"}},{"kind":"Field","name":{"kind":"Name","value":"terminalModelInfos"}},{"kind":"Field","name":{"kind":"Name","value":"collectorResultUrl"}},{"kind":"Field","name":{"kind":"Name","value":"collectStatus"}},{"kind":"Field","name":{"kind":"Name","value":"collectorProgress"}},{"kind":"Field","name":{"kind":"Name","value":"collectorProgressMax"}},{"kind":"Field","name":{"kind":"Name","value":"createUserName"}},{"kind":"Field","name":{"kind":"Name","value":"createTimeFormart"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCarInfoListQuery__
 *
 * To run a query within a React component, call `useCarInfoListQuery` and pass it any options that fit your needs.
 * When your component renders, `useCarInfoListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCarInfoListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useCarInfoListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CarInfoListQuery, CarInfoListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CarInfoListQuery, CarInfoListQueryVariables>(CarInfoListDocument, options);
      }
export function useCarInfoListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CarInfoListQuery, CarInfoListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CarInfoListQuery, CarInfoListQueryVariables>(CarInfoListDocument, options);
        }
export type CarInfoListQueryHookResult = ReturnType<typeof useCarInfoListQuery>;
export type CarInfoListLazyQueryHookResult = ReturnType<typeof useCarInfoListLazyQuery>;
export type CarInfoListQueryResult = ApolloReactCommon.QueryResult<CarInfoListQuery, CarInfoListQueryVariables>;
export const EditCarInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"EditCarInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"collectorResultUrl"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editCarInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"modelName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelName"}}},{"kind":"Argument","name":{"kind":"Name","value":"collectorResultUrl"},"value":{"kind":"Variable","name":{"kind":"Name","value":"collectorResultUrl"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export type EditCarInfoMutationFn = ApolloReactCommon.MutationFunction<EditCarInfoMutation, EditCarInfoMutationVariables>;

/**
 * __useEditCarInfoMutation__
 *
 * To run a mutation, you first call `useEditCarInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditCarInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editCarInfoMutation, { data, loading, error }] = useEditCarInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *      modelName: // value for 'modelName'
 *      collectorResultUrl: // value for 'collectorResultUrl'
 *   },
 * });
 */
export function useEditCarInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditCarInfoMutation, EditCarInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<EditCarInfoMutation, EditCarInfoMutationVariables>(EditCarInfoDocument, options);
      }
export type EditCarInfoMutationHookResult = ReturnType<typeof useEditCarInfoMutation>;
export type EditCarInfoMutationResult = ApolloReactCommon.MutationResult<EditCarInfoMutation>;
export type EditCarInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<EditCarInfoMutation, EditCarInfoMutationVariables>;
export const DelCarInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DelCarInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"delCarInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export type DelCarInfoMutationFn = ApolloReactCommon.MutationFunction<DelCarInfoMutation, DelCarInfoMutationVariables>;

/**
 * __useDelCarInfoMutation__
 *
 * To run a mutation, you first call `useDelCarInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDelCarInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [delCarInfoMutation, { data, loading, error }] = useDelCarInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useDelCarInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DelCarInfoMutation, DelCarInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<DelCarInfoMutation, DelCarInfoMutationVariables>(DelCarInfoDocument, options);
      }
export type DelCarInfoMutationHookResult = ReturnType<typeof useDelCarInfoMutation>;
export type DelCarInfoMutationResult = ApolloReactCommon.MutationResult<DelCarInfoMutation>;
export type DelCarInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<DelCarInfoMutation, DelCarInfoMutationVariables>;
export const CreateNewCarIInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateNewCarIInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"modelName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"description"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createNewCarIInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"modelName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"modelName"}}},{"kind":"Argument","name":{"kind":"Name","value":"description"},"value":{"kind":"Variable","name":{"kind":"Name","value":"description"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export type CreateNewCarIInfoMutationFn = ApolloReactCommon.MutationFunction<CreateNewCarIInfoMutation, CreateNewCarIInfoMutationVariables>;

/**
 * __useCreateNewCarIInfoMutation__
 *
 * To run a mutation, you first call `useCreateNewCarIInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateNewCarIInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createNewCarIInfoMutation, { data, loading, error }] = useCreateNewCarIInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      modelName: // value for 'modelName'
 *      description: // value for 'description'
 *   },
 * });
 */
export function useCreateNewCarIInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateNewCarIInfoMutation, CreateNewCarIInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateNewCarIInfoMutation, CreateNewCarIInfoMutationVariables>(CreateNewCarIInfoDocument, options);
      }
export type CreateNewCarIInfoMutationHookResult = ReturnType<typeof useCreateNewCarIInfoMutation>;
export type CreateNewCarIInfoMutationResult = ApolloReactCommon.MutationResult<CreateNewCarIInfoMutation>;
export type CreateNewCarIInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateNewCarIInfoMutation, CreateNewCarIInfoMutationVariables>;
export const CollectorCarInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CollectorCarInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectionCmd"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"collectorCarInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectionCmd"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectionCmd"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]} as unknown as DocumentNode;
export type CollectorCarInfoMutationFn = ApolloReactCommon.MutationFunction<CollectorCarInfoMutation, CollectorCarInfoMutationVariables>;

/**
 * __useCollectorCarInfoMutation__
 *
 * To run a mutation, you first call `useCollectorCarInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCollectorCarInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [collectorCarInfoMutation, { data, loading, error }] = useCollectorCarInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *      connectionCmd: // value for 'connectionCmd'
 *   },
 * });
 */
export function useCollectorCarInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CollectorCarInfoMutation, CollectorCarInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CollectorCarInfoMutation, CollectorCarInfoMutationVariables>(CollectorCarInfoDocument, options);
      }
export type CollectorCarInfoMutationHookResult = ReturnType<typeof useCollectorCarInfoMutation>;
export type CollectorCarInfoMutationResult = ApolloReactCommon.MutationResult<CollectorCarInfoMutation>;
export type CollectorCarInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<CollectorCarInfoMutation, CollectorCarInfoMutationVariables>;
export const GetApkSelectorListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetApkSelectorList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getApkSelectorList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"packageName"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetApkSelectorListQuery__
 *
 * To run a query within a React component, call `useGetApkSelectorListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApkSelectorListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApkSelectorListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetApkSelectorListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetApkSelectorListQuery, GetApkSelectorListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetApkSelectorListQuery, GetApkSelectorListQueryVariables>(GetApkSelectorListDocument, options);
      }
export function useGetApkSelectorListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetApkSelectorListQuery, GetApkSelectorListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetApkSelectorListQuery, GetApkSelectorListQueryVariables>(GetApkSelectorListDocument, options);
        }
export type GetApkSelectorListQueryHookResult = ReturnType<typeof useGetApkSelectorListQuery>;
export type GetApkSelectorListLazyQueryHookResult = ReturnType<typeof useGetApkSelectorListLazyQuery>;
export type GetApkSelectorListQueryResult = ApolloReactCommon.QueryResult<GetApkSelectorListQuery, GetApkSelectorListQueryVariables>;
export const SubmitSelectorListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SubmitSelectorList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectID"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"result"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"submitSelectorList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectID"}}},{"kind":"Argument","name":{"kind":"Name","value":"result"},"value":{"kind":"Variable","name":{"kind":"Name","value":"result"}}}]}]}}]} as unknown as DocumentNode;
export type SubmitSelectorListMutationFn = ApolloReactCommon.MutationFunction<SubmitSelectorListMutation, SubmitSelectorListMutationVariables>;

/**
 * __useSubmitSelectorListMutation__
 *
 * To run a mutation, you first call `useSubmitSelectorListMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitSelectorListMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitSelectorListMutation, { data, loading, error }] = useSubmitSelectorListMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectID: // value for 'projectID'
 *      result: // value for 'result'
 *   },
 * });
 */
export function useSubmitSelectorListMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitSelectorListMutation, SubmitSelectorListMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SubmitSelectorListMutation, SubmitSelectorListMutationVariables>(SubmitSelectorListDocument, options);
      }
export type SubmitSelectorListMutationHookResult = ReturnType<typeof useSubmitSelectorListMutation>;
export type SubmitSelectorListMutationResult = ApolloReactCommon.MutationResult<SubmitSelectorListMutation>;
export type SubmitSelectorListMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitSelectorListMutation, SubmitSelectorListMutationVariables>;
export const ReportViewActionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ReportViewAction"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseStepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"reportViewAction"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseStepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseStepId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"toolType"}},{"kind":"Field","name":{"kind":"Name","value":"caseReportList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"sysAnalysisId"}},{"kind":"Field","name":{"kind":"Name","value":"sysAuditorReportList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"analysisResultId"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}},{"kind":"Field","name":{"kind":"Name","value":"riskReason"}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useReportViewActionQuery__
 *
 * To run a query within a React component, call `useReportViewActionQuery` and pass it any options that fit your needs.
 * When your component renders, `useReportViewActionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReportViewActionQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      caseStepId: // value for 'caseStepId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useReportViewActionQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ReportViewActionQuery, ReportViewActionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ReportViewActionQuery, ReportViewActionQueryVariables>(ReportViewActionDocument, options);
      }
export function useReportViewActionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportViewActionQuery, ReportViewActionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ReportViewActionQuery, ReportViewActionQueryVariables>(ReportViewActionDocument, options);
        }
export type ReportViewActionQueryHookResult = ReturnType<typeof useReportViewActionQuery>;
export type ReportViewActionLazyQueryHookResult = ReturnType<typeof useReportViewActionLazyQuery>;
export type ReportViewActionQueryResult = ApolloReactCommon.QueryResult<ReportViewActionQuery, ReportViewActionQueryVariables>;
export const CreateUserCustomCaseSuiteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateUserCustomCaseSuite"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"suiteType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createUserCustomCaseSuite"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"suiteType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"suiteType"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type CreateUserCustomCaseSuiteMutationFn = ApolloReactCommon.MutationFunction<CreateUserCustomCaseSuiteMutation, CreateUserCustomCaseSuiteMutationVariables>;

/**
 * __useCreateUserCustomCaseSuiteMutation__
 *
 * To run a mutation, you first call `useCreateUserCustomCaseSuiteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserCustomCaseSuiteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserCustomCaseSuiteMutation, { data, loading, error }] = useCreateUserCustomCaseSuiteMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      name: // value for 'name'
 *      suiteType: // value for 'suiteType'
 *   },
 * });
 */
export function useCreateUserCustomCaseSuiteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateUserCustomCaseSuiteMutation, CreateUserCustomCaseSuiteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateUserCustomCaseSuiteMutation, CreateUserCustomCaseSuiteMutationVariables>(CreateUserCustomCaseSuiteDocument, options);
      }
export type CreateUserCustomCaseSuiteMutationHookResult = ReturnType<typeof useCreateUserCustomCaseSuiteMutation>;
export type CreateUserCustomCaseSuiteMutationResult = ApolloReactCommon.MutationResult<CreateUserCustomCaseSuiteMutation>;
export type CreateUserCustomCaseSuiteMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateUserCustomCaseSuiteMutation, CreateUserCustomCaseSuiteMutationVariables>;
export const CreateUserCustomCaseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateUserCustomCase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"descriptionInfo"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseType"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"scriptUrl"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createUserCustomCase"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"suiteId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"descriptionInfo"},"value":{"kind":"Variable","name":{"kind":"Name","value":"descriptionInfo"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseType"}}},{"kind":"Argument","name":{"kind":"Name","value":"scriptUrl"},"value":{"kind":"Variable","name":{"kind":"Name","value":"scriptUrl"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type CreateUserCustomCaseMutationFn = ApolloReactCommon.MutationFunction<CreateUserCustomCaseMutation, CreateUserCustomCaseMutationVariables>;

/**
 * __useCreateUserCustomCaseMutation__
 *
 * To run a mutation, you first call `useCreateUserCustomCaseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserCustomCaseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserCustomCaseMutation, { data, loading, error }] = useCreateUserCustomCaseMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      suiteId: // value for 'suiteId'
 *      name: // value for 'name'
 *      descriptionInfo: // value for 'descriptionInfo'
 *      caseType: // value for 'caseType'
 *      scriptUrl: // value for 'scriptUrl'
 *   },
 * });
 */
export function useCreateUserCustomCaseMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateUserCustomCaseMutation, CreateUserCustomCaseMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateUserCustomCaseMutation, CreateUserCustomCaseMutationVariables>(CreateUserCustomCaseDocument, options);
      }
export type CreateUserCustomCaseMutationHookResult = ReturnType<typeof useCreateUserCustomCaseMutation>;
export type CreateUserCustomCaseMutationResult = ApolloReactCommon.MutationResult<CreateUserCustomCaseMutation>;
export type CreateUserCustomCaseMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateUserCustomCaseMutation, CreateUserCustomCaseMutationVariables>;
export const DeleteUserCustomCaseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteUserCustomCase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteUserCustomCase"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type DeleteUserCustomCaseMutationFn = ApolloReactCommon.MutationFunction<DeleteUserCustomCaseMutation, DeleteUserCustomCaseMutationVariables>;

/**
 * __useDeleteUserCustomCaseMutation__
 *
 * To run a mutation, you first call `useDeleteUserCustomCaseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserCustomCaseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserCustomCaseMutation, { data, loading, error }] = useDeleteUserCustomCaseMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *   },
 * });
 */
export function useDeleteUserCustomCaseMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserCustomCaseMutation, DeleteUserCustomCaseMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<DeleteUserCustomCaseMutation, DeleteUserCustomCaseMutationVariables>(DeleteUserCustomCaseDocument, options);
      }
export type DeleteUserCustomCaseMutationHookResult = ReturnType<typeof useDeleteUserCustomCaseMutation>;
export type DeleteUserCustomCaseMutationResult = ApolloReactCommon.MutationResult<DeleteUserCustomCaseMutation>;
export type DeleteUserCustomCaseMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserCustomCaseMutation, DeleteUserCustomCaseMutationVariables>;
export const DeleteUserCustomCaseSuiteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteUserCustomCaseSuite"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteUserCustomCaseSuite"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"suiteId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type DeleteUserCustomCaseSuiteMutationFn = ApolloReactCommon.MutationFunction<DeleteUserCustomCaseSuiteMutation, DeleteUserCustomCaseSuiteMutationVariables>;

/**
 * __useDeleteUserCustomCaseSuiteMutation__
 *
 * To run a mutation, you first call `useDeleteUserCustomCaseSuiteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserCustomCaseSuiteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserCustomCaseSuiteMutation, { data, loading, error }] = useDeleteUserCustomCaseSuiteMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      suiteId: // value for 'suiteId'
 *   },
 * });
 */
export function useDeleteUserCustomCaseSuiteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteUserCustomCaseSuiteMutation, DeleteUserCustomCaseSuiteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<DeleteUserCustomCaseSuiteMutation, DeleteUserCustomCaseSuiteMutationVariables>(DeleteUserCustomCaseSuiteDocument, options);
      }
export type DeleteUserCustomCaseSuiteMutationHookResult = ReturnType<typeof useDeleteUserCustomCaseSuiteMutation>;
export type DeleteUserCustomCaseSuiteMutationResult = ApolloReactCommon.MutationResult<DeleteUserCustomCaseSuiteMutation>;
export type DeleteUserCustomCaseSuiteMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteUserCustomCaseSuiteMutation, DeleteUserCustomCaseSuiteMutationVariables>;
export const GetUserCustomCaseSuiteListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserCustomCaseSuiteList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getUserCustomCaseSuiteList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"resultList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"layType"}},{"kind":"Field","name":{"kind":"Name","value":"descriptionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"caseCount"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetUserCustomCaseSuiteListQuery__
 *
 * To run a query within a React component, call `useGetUserCustomCaseSuiteListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserCustomCaseSuiteListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserCustomCaseSuiteListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetUserCustomCaseSuiteListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetUserCustomCaseSuiteListQuery, GetUserCustomCaseSuiteListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetUserCustomCaseSuiteListQuery, GetUserCustomCaseSuiteListQueryVariables>(GetUserCustomCaseSuiteListDocument, options);
      }
export function useGetUserCustomCaseSuiteListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserCustomCaseSuiteListQuery, GetUserCustomCaseSuiteListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetUserCustomCaseSuiteListQuery, GetUserCustomCaseSuiteListQueryVariables>(GetUserCustomCaseSuiteListDocument, options);
        }
export type GetUserCustomCaseSuiteListQueryHookResult = ReturnType<typeof useGetUserCustomCaseSuiteListQuery>;
export type GetUserCustomCaseSuiteListLazyQueryHookResult = ReturnType<typeof useGetUserCustomCaseSuiteListLazyQuery>;
export type GetUserCustomCaseSuiteListQueryResult = ApolloReactCommon.QueryResult<GetUserCustomCaseSuiteListQuery, GetUserCustomCaseSuiteListQueryVariables>;
export const GetUserCustomCaseListBySuiteIdDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserCustomCaseListBySuiteId"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getUserCustomCaseListBySuiteId"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"suiteId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"suiteName"}},{"kind":"Field","name":{"kind":"Name","value":"uploadFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"resultList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"submitUserName"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"belongSuite"}},{"kind":"Field","name":{"kind":"Name","value":"descriptionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"caseType"}},{"kind":"Field","name":{"kind":"Name","value":"scriptUrl"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"scriptFileName"}},{"kind":"Field","name":{"kind":"Name","value":"classifyName"}},{"kind":"Field","name":{"kind":"Name","value":"classifyId"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetUserCustomCaseListBySuiteIdQuery__
 *
 * To run a query within a React component, call `useGetUserCustomCaseListBySuiteIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserCustomCaseListBySuiteIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserCustomCaseListBySuiteIdQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      suiteId: // value for 'suiteId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetUserCustomCaseListBySuiteIdQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetUserCustomCaseListBySuiteIdQuery, GetUserCustomCaseListBySuiteIdQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetUserCustomCaseListBySuiteIdQuery, GetUserCustomCaseListBySuiteIdQueryVariables>(GetUserCustomCaseListBySuiteIdDocument, options);
      }
export function useGetUserCustomCaseListBySuiteIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserCustomCaseListBySuiteIdQuery, GetUserCustomCaseListBySuiteIdQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetUserCustomCaseListBySuiteIdQuery, GetUserCustomCaseListBySuiteIdQueryVariables>(GetUserCustomCaseListBySuiteIdDocument, options);
        }
export type GetUserCustomCaseListBySuiteIdQueryHookResult = ReturnType<typeof useGetUserCustomCaseListBySuiteIdQuery>;
export type GetUserCustomCaseListBySuiteIdLazyQueryHookResult = ReturnType<typeof useGetUserCustomCaseListBySuiteIdLazyQuery>;
export type GetUserCustomCaseListBySuiteIdQueryResult = ApolloReactCommon.QueryResult<GetUserCustomCaseListBySuiteIdQuery, GetUserCustomCaseListBySuiteIdQueryVariables>;
export const ChangeCaseHistoryDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ChangeCaseHistory"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"changeCaseHistory"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"history"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"changeTime"}},{"kind":"Field","name":{"kind":"Name","value":"changeUser"}},{"kind":"Field","name":{"kind":"Name","value":"changeObject"}},{"kind":"Field","name":{"kind":"Name","value":"changematter"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useChangeCaseHistoryQuery__
 *
 * To run a query within a React component, call `useChangeCaseHistoryQuery` and pass it any options that fit your needs.
 * When your component renders, `useChangeCaseHistoryQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useChangeCaseHistoryQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useChangeCaseHistoryQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ChangeCaseHistoryQuery, ChangeCaseHistoryQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ChangeCaseHistoryQuery, ChangeCaseHistoryQueryVariables>(ChangeCaseHistoryDocument, options);
      }
export function useChangeCaseHistoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ChangeCaseHistoryQuery, ChangeCaseHistoryQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ChangeCaseHistoryQuery, ChangeCaseHistoryQueryVariables>(ChangeCaseHistoryDocument, options);
        }
export type ChangeCaseHistoryQueryHookResult = ReturnType<typeof useChangeCaseHistoryQuery>;
export type ChangeCaseHistoryLazyQueryHookResult = ReturnType<typeof useChangeCaseHistoryLazyQuery>;
export type ChangeCaseHistoryQueryResult = ApolloReactCommon.QueryResult<ChangeCaseHistoryQuery, ChangeCaseHistoryQueryVariables>;
export const LawCatalogueDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"LawCatalogueDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lawId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueDetail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"lawId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lawId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawCatalogueName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify2"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify3"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify4"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify5"}},{"kind":"Field","name":{"kind":"Name","value":"checkResultCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkPassResultCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkUnPassNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkUnTestNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"checkIgnoreNumberCount"}},{"kind":"Field","name":{"kind":"Name","value":"passStatus"}},{"kind":"Field","name":{"kind":"Name","value":"caseClassifyResultRep"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseId"}},{"kind":"Field","name":{"kind":"Name","value":"caseSerialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"caseName"}},{"kind":"Field","name":{"kind":"Name","value":"taskStatus"}},{"kind":"Field","name":{"kind":"Name","value":"checkTool"}},{"kind":"Field","name":{"kind":"Name","value":"hanlder"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useLawCatalogueDetailQuery__
 *
 * To run a query within a React component, call `useLawCatalogueDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useLawCatalogueDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLawCatalogueDetailQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      lawId: // value for 'lawId'
 *   },
 * });
 */
export function useLawCatalogueDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<LawCatalogueDetailQuery, LawCatalogueDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<LawCatalogueDetailQuery, LawCatalogueDetailQueryVariables>(LawCatalogueDetailDocument, options);
      }
export function useLawCatalogueDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LawCatalogueDetailQuery, LawCatalogueDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<LawCatalogueDetailQuery, LawCatalogueDetailQueryVariables>(LawCatalogueDetailDocument, options);
        }
export type LawCatalogueDetailQueryHookResult = ReturnType<typeof useLawCatalogueDetailQuery>;
export type LawCatalogueDetailLazyQueryHookResult = ReturnType<typeof useLawCatalogueDetailLazyQuery>;
export type LawCatalogueDetailQueryResult = ApolloReactCommon.QueryResult<LawCatalogueDetailQuery, LawCatalogueDetailQueryVariables>;
export const EditUserCustomCaseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"EditUserCustomCase"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseDesc"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"remediation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"descriptionInfo"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseType"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"scriptUrl"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"classifyId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"operatingSystemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"riskLevelId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"testMethod"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editUserCustomCase"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseDesc"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseDesc"}}},{"kind":"Argument","name":{"kind":"Name","value":"remediation"},"value":{"kind":"Variable","name":{"kind":"Name","value":"remediation"}}},{"kind":"Argument","name":{"kind":"Name","value":"descriptionInfo"},"value":{"kind":"Variable","name":{"kind":"Name","value":"descriptionInfo"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseType"}}},{"kind":"Argument","name":{"kind":"Name","value":"scriptUrl"},"value":{"kind":"Variable","name":{"kind":"Name","value":"scriptUrl"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepName"}}},{"kind":"Argument","name":{"kind":"Name","value":"classifyId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"classifyId"}}},{"kind":"Argument","name":{"kind":"Name","value":"operatingSystemId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"operatingSystemId"}}},{"kind":"Argument","name":{"kind":"Name","value":"riskLevelId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"riskLevelId"}}},{"kind":"Argument","name":{"kind":"Name","value":"testMethod"},"value":{"kind":"Variable","name":{"kind":"Name","value":"testMethod"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type EditUserCustomCaseMutationFn = ApolloReactCommon.MutationFunction<EditUserCustomCaseMutation, EditUserCustomCaseMutationVariables>;

/**
 * __useEditUserCustomCaseMutation__
 *
 * To run a mutation, you first call `useEditUserCustomCaseMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditUserCustomCaseMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editUserCustomCaseMutation, { data, loading, error }] = useEditUserCustomCaseMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      name: // value for 'name'
 *      caseDesc: // value for 'caseDesc'
 *      remediation: // value for 'remediation'
 *      descriptionInfo: // value for 'descriptionInfo'
 *      caseType: // value for 'caseType'
 *      scriptUrl: // value for 'scriptUrl'
 *      stepName: // value for 'stepName'
 *      classifyId: // value for 'classifyId'
 *      operatingSystemId: // value for 'operatingSystemId'
 *      riskLevelId: // value for 'riskLevelId'
 *      testMethod: // value for 'testMethod'
 *   },
 * });
 */
export function useEditUserCustomCaseMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditUserCustomCaseMutation, EditUserCustomCaseMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<EditUserCustomCaseMutation, EditUserCustomCaseMutationVariables>(EditUserCustomCaseDocument, options);
      }
export type EditUserCustomCaseMutationHookResult = ReturnType<typeof useEditUserCustomCaseMutation>;
export type EditUserCustomCaseMutationResult = ApolloReactCommon.MutationResult<EditUserCustomCaseMutation>;
export type EditUserCustomCaseMutationOptions = ApolloReactCommon.BaseMutationOptions<EditUserCustomCaseMutation, EditUserCustomCaseMutationVariables>;
export const GetAllCaseListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAllCaseList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Retrieve"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getAllCaseList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"suiteId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"resultList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"caseDesc"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"submitUserName"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"belongSuite"}},{"kind":"Field","name":{"kind":"Name","value":"descriptionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"caseType"}},{"kind":"Field","name":{"kind":"Name","value":"scriptFileName"}},{"kind":"Field","name":{"kind":"Name","value":"scriptUrl"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"classifyName"}},{"kind":"Field","name":{"kind":"Name","value":"classifyId"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemName"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemID"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemType"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelType"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelId"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodName"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodId"}},{"kind":"Field","name":{"kind":"Name","value":"testMothodType"}}]}},{"kind":"Field","name":{"kind":"Name","value":"groupResultList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"groupCheckedStatus"}},{"kind":"Field","name":{"kind":"Name","value":"resultList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"caseDesc"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"submitUserName"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"belongSuite"}},{"kind":"Field","name":{"kind":"Name","value":"descriptionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"caseType"}},{"kind":"Field","name":{"kind":"Name","value":"scriptFileName"}},{"kind":"Field","name":{"kind":"Name","value":"scriptUrl"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"classifyName"}},{"kind":"Field","name":{"kind":"Name","value":"classifyId"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemName"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemID"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemType"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelType"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelId"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodName"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodId"}},{"kind":"Field","name":{"kind":"Name","value":"testMothodType"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"suiteName"}},{"kind":"Field","name":{"kind":"Name","value":"uploadFileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"selectCaseId"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetAllCaseListQuery__
 *
 * To run a query within a React component, call `useGetAllCaseListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllCaseListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllCaseListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      suiteId: // value for 'suiteId'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetAllCaseListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetAllCaseListQuery, GetAllCaseListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetAllCaseListQuery, GetAllCaseListQueryVariables>(GetAllCaseListDocument, options);
      }
export function useGetAllCaseListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllCaseListQuery, GetAllCaseListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetAllCaseListQuery, GetAllCaseListQueryVariables>(GetAllCaseListDocument, options);
        }
export type GetAllCaseListQueryHookResult = ReturnType<typeof useGetAllCaseListQuery>;
export type GetAllCaseListLazyQueryHookResult = ReturnType<typeof useGetAllCaseListLazyQuery>;
export type GetAllCaseListQueryResult = ApolloReactCommon.QueryResult<GetAllCaseListQuery, GetAllCaseListQueryVariables>;
export const CreateUserCustomCaseItemDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateUserCustomCaseItem"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseDesc"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"remediation"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"descriptionInfo"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseType"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"scriptUrl"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"classifyId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"operatingSystemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"riskLevelId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"testMethod"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createUserCustomCaseItem"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseDesc"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseDesc"}}},{"kind":"Argument","name":{"kind":"Name","value":"remediation"},"value":{"kind":"Variable","name":{"kind":"Name","value":"remediation"}}},{"kind":"Argument","name":{"kind":"Name","value":"descriptionInfo"},"value":{"kind":"Variable","name":{"kind":"Name","value":"descriptionInfo"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseType"}}},{"kind":"Argument","name":{"kind":"Name","value":"scriptUrl"},"value":{"kind":"Variable","name":{"kind":"Name","value":"scriptUrl"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepName"}}},{"kind":"Argument","name":{"kind":"Name","value":"classifyId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"classifyId"}}},{"kind":"Argument","name":{"kind":"Name","value":"operatingSystemId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"operatingSystemId"}}},{"kind":"Argument","name":{"kind":"Name","value":"riskLevelId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"riskLevelId"}}},{"kind":"Argument","name":{"kind":"Name","value":"testMethod"},"value":{"kind":"Variable","name":{"kind":"Name","value":"testMethod"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;
export type CreateUserCustomCaseItemMutationFn = ApolloReactCommon.MutationFunction<CreateUserCustomCaseItemMutation, CreateUserCustomCaseItemMutationVariables>;

/**
 * __useCreateUserCustomCaseItemMutation__
 *
 * To run a mutation, you first call `useCreateUserCustomCaseItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserCustomCaseItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserCustomCaseItemMutation, { data, loading, error }] = useCreateUserCustomCaseItemMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      name: // value for 'name'
 *      caseDesc: // value for 'caseDesc'
 *      remediation: // value for 'remediation'
 *      descriptionInfo: // value for 'descriptionInfo'
 *      caseType: // value for 'caseType'
 *      scriptUrl: // value for 'scriptUrl'
 *      stepName: // value for 'stepName'
 *      classifyId: // value for 'classifyId'
 *      operatingSystemId: // value for 'operatingSystemId'
 *      riskLevelId: // value for 'riskLevelId'
 *      testMethod: // value for 'testMethod'
 *   },
 * });
 */
export function useCreateUserCustomCaseItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateUserCustomCaseItemMutation, CreateUserCustomCaseItemMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateUserCustomCaseItemMutation, CreateUserCustomCaseItemMutationVariables>(CreateUserCustomCaseItemDocument, options);
      }
export type CreateUserCustomCaseItemMutationHookResult = ReturnType<typeof useCreateUserCustomCaseItemMutation>;
export type CreateUserCustomCaseItemMutationResult = ApolloReactCommon.MutationResult<CreateUserCustomCaseItemMutation>;
export type CreateUserCustomCaseItemMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateUserCustomCaseItemMutation, CreateUserCustomCaseItemMutationVariables>;
export const GetCaseStaticCheckedItemsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCaseStaticCheckedItems"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCaseStaticCheckedItems"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"territoryList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"classifyList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystem"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}},{"kind":"Field","name":{"kind":"Name","value":"carSpareParts"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCaseStaticCheckedItemsQuery__
 *
 * To run a query within a React component, call `useGetCaseStaticCheckedItemsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCaseStaticCheckedItemsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCaseStaticCheckedItemsQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useGetCaseStaticCheckedItemsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCaseStaticCheckedItemsQuery, GetCaseStaticCheckedItemsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCaseStaticCheckedItemsQuery, GetCaseStaticCheckedItemsQueryVariables>(GetCaseStaticCheckedItemsDocument, options);
      }
export function useGetCaseStaticCheckedItemsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCaseStaticCheckedItemsQuery, GetCaseStaticCheckedItemsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCaseStaticCheckedItemsQuery, GetCaseStaticCheckedItemsQueryVariables>(GetCaseStaticCheckedItemsDocument, options);
        }
export type GetCaseStaticCheckedItemsQueryHookResult = ReturnType<typeof useGetCaseStaticCheckedItemsQuery>;
export type GetCaseStaticCheckedItemsLazyQueryHookResult = ReturnType<typeof useGetCaseStaticCheckedItemsLazyQuery>;
export type GetCaseStaticCheckedItemsQueryResult = ApolloReactCommon.QueryResult<GetCaseStaticCheckedItemsQuery, GetCaseStaticCheckedItemsQueryVariables>;
export const AddUserCustomCaseIntoSuiteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"AddUserCustomCaseIntoSuite"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseIds"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"addUserCustomCaseIntoSuite"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"suiteId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"suiteId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseIds"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseIds"}}}]}]}}]} as unknown as DocumentNode;
export type AddUserCustomCaseIntoSuiteMutationFn = ApolloReactCommon.MutationFunction<AddUserCustomCaseIntoSuiteMutation, AddUserCustomCaseIntoSuiteMutationVariables>;

/**
 * __useAddUserCustomCaseIntoSuiteMutation__
 *
 * To run a mutation, you first call `useAddUserCustomCaseIntoSuiteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAddUserCustomCaseIntoSuiteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [addUserCustomCaseIntoSuiteMutation, { data, loading, error }] = useAddUserCustomCaseIntoSuiteMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      suiteId: // value for 'suiteId'
 *      caseIds: // value for 'caseIds'
 *   },
 * });
 */
export function useAddUserCustomCaseIntoSuiteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<AddUserCustomCaseIntoSuiteMutation, AddUserCustomCaseIntoSuiteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<AddUserCustomCaseIntoSuiteMutation, AddUserCustomCaseIntoSuiteMutationVariables>(AddUserCustomCaseIntoSuiteDocument, options);
      }
export type AddUserCustomCaseIntoSuiteMutationHookResult = ReturnType<typeof useAddUserCustomCaseIntoSuiteMutation>;
export type AddUserCustomCaseIntoSuiteMutationResult = ApolloReactCommon.MutationResult<AddUserCustomCaseIntoSuiteMutation>;
export type AddUserCustomCaseIntoSuiteMutationOptions = ApolloReactCommon.BaseMutationOptions<AddUserCustomCaseIntoSuiteMutation, AddUserCustomCaseIntoSuiteMutationVariables>;
export const GetCarStaticComponentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCarStaticComponent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCarStaticComponent"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCarStaticComponentQuery__
 *
 * To run a query within a React component, call `useGetCarStaticComponentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCarStaticComponentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCarStaticComponentQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useGetCarStaticComponentQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCarStaticComponentQuery, GetCarStaticComponentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCarStaticComponentQuery, GetCarStaticComponentQueryVariables>(GetCarStaticComponentDocument, options);
      }
export function useGetCarStaticComponentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCarStaticComponentQuery, GetCarStaticComponentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCarStaticComponentQuery, GetCarStaticComponentQueryVariables>(GetCarStaticComponentDocument, options);
        }
export type GetCarStaticComponentQueryHookResult = ReturnType<typeof useGetCarStaticComponentQuery>;
export type GetCarStaticComponentLazyQueryHookResult = ReturnType<typeof useGetCarStaticComponentLazyQuery>;
export type GetCarStaticComponentQueryResult = ApolloReactCommon.QueryResult<GetCarStaticComponentQuery, GetCarStaticComponentQueryVariables>;
export const CreateCarModelInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateCarModelInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"carName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"componentList"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CarInfoItemCreate"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createCarModelInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"carName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"carName"}}},{"kind":"Argument","name":{"kind":"Name","value":"componentList"},"value":{"kind":"Variable","name":{"kind":"Name","value":"componentList"}}}]}]}}]} as unknown as DocumentNode;
export type CreateCarModelInfoMutationFn = ApolloReactCommon.MutationFunction<CreateCarModelInfoMutation, CreateCarModelInfoMutationVariables>;

/**
 * __useCreateCarModelInfoMutation__
 *
 * To run a mutation, you first call `useCreateCarModelInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCarModelInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCarModelInfoMutation, { data, loading, error }] = useCreateCarModelInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      carName: // value for 'carName'
 *      componentList: // value for 'componentList'
 *   },
 * });
 */
export function useCreateCarModelInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateCarModelInfoMutation, CreateCarModelInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateCarModelInfoMutation, CreateCarModelInfoMutationVariables>(CreateCarModelInfoDocument, options);
      }
export type CreateCarModelInfoMutationHookResult = ReturnType<typeof useCreateCarModelInfoMutation>;
export type CreateCarModelInfoMutationResult = ApolloReactCommon.MutationResult<CreateCarModelInfoMutation>;
export type CreateCarModelInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateCarModelInfoMutation, CreateCarModelInfoMutationVariables>;
export const GetCarInfoListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCarInfoList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCarInfoList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"carInfoList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"carName"}},{"kind":"Field","name":{"kind":"Name","value":"createTime"}},{"kind":"Field","name":{"kind":"Name","value":"createUser"}},{"kind":"Field","name":{"kind":"Name","value":"carInfoItem"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"modelId"}},{"kind":"Field","name":{"kind":"Name","value":"modelTypeId"}},{"kind":"Field","name":{"kind":"Name","value":"modelType"}},{"kind":"Field","name":{"kind":"Name","value":"collectType"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"collectStatus"}},{"kind":"Field","name":{"kind":"Name","value":"collectorProgress"}},{"kind":"Field","name":{"kind":"Name","value":"collectorProgressMax"}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCarInfoListQuery__
 *
 * To run a query within a React component, call `useGetCarInfoListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCarInfoListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCarInfoListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetCarInfoListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCarInfoListQuery, GetCarInfoListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCarInfoListQuery, GetCarInfoListQueryVariables>(GetCarInfoListDocument, options);
      }
export function useGetCarInfoListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCarInfoListQuery, GetCarInfoListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCarInfoListQuery, GetCarInfoListQueryVariables>(GetCarInfoListDocument, options);
        }
export type GetCarInfoListQueryHookResult = ReturnType<typeof useGetCarInfoListQuery>;
export type GetCarInfoListLazyQueryHookResult = ReturnType<typeof useGetCarInfoListLazyQuery>;
export type GetCarInfoListQueryResult = ApolloReactCommon.QueryResult<GetCarInfoListQuery, GetCarInfoListQueryVariables>;
export const EditCarModelInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"EditCarModelInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"carName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"componentList"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CarInfoItemCreate"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editCarModelInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"carName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"carName"}}},{"kind":"Argument","name":{"kind":"Name","value":"componentList"},"value":{"kind":"Variable","name":{"kind":"Name","value":"componentList"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}]}]}}]} as unknown as DocumentNode;
export type EditCarModelInfoMutationFn = ApolloReactCommon.MutationFunction<EditCarModelInfoMutation, EditCarModelInfoMutationVariables>;

/**
 * __useEditCarModelInfoMutation__
 *
 * To run a mutation, you first call `useEditCarModelInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditCarModelInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editCarModelInfoMutation, { data, loading, error }] = useEditCarModelInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      carName: // value for 'carName'
 *      componentList: // value for 'componentList'
 *      id: // value for 'id'
 *   },
 * });
 */
export function useEditCarModelInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditCarModelInfoMutation, EditCarModelInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<EditCarModelInfoMutation, EditCarModelInfoMutationVariables>(EditCarModelInfoDocument, options);
      }
export type EditCarModelInfoMutationHookResult = ReturnType<typeof useEditCarModelInfoMutation>;
export type EditCarModelInfoMutationResult = ApolloReactCommon.MutationResult<EditCarModelInfoMutation>;
export type EditCarModelInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<EditCarModelInfoMutation, EditCarModelInfoMutationVariables>;
export const GetCarInfoListSelectorDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCarInfoListSelector"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCarInfoListSelector"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"titile"}},{"kind":"Field","name":{"kind":"Name","value":"modelList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"modelId"}},{"kind":"Field","name":{"kind":"Name","value":"modelName"}},{"kind":"Field","name":{"kind":"Name","value":"titile"}},{"kind":"Field","name":{"kind":"Name","value":"versions"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"titile"}},{"kind":"Field","name":{"kind":"Name","value":"versionName"}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCarInfoListSelectorQuery__
 *
 * To run a query within a React component, call `useGetCarInfoListSelectorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCarInfoListSelectorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCarInfoListSelectorQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetCarInfoListSelectorQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCarInfoListSelectorQuery, GetCarInfoListSelectorQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCarInfoListSelectorQuery, GetCarInfoListSelectorQueryVariables>(GetCarInfoListSelectorDocument, options);
      }
export function useGetCarInfoListSelectorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCarInfoListSelectorQuery, GetCarInfoListSelectorQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCarInfoListSelectorQuery, GetCarInfoListSelectorQueryVariables>(GetCarInfoListSelectorDocument, options);
        }
export type GetCarInfoListSelectorQueryHookResult = ReturnType<typeof useGetCarInfoListSelectorQuery>;
export type GetCarInfoListSelectorLazyQueryHookResult = ReturnType<typeof useGetCarInfoListSelectorLazyQuery>;
export type GetCarInfoListSelectorQueryResult = ApolloReactCommon.QueryResult<GetCarInfoListSelectorQuery, GetCarInfoListSelectorQueryVariables>;
export const GetCommonalityAutoTaskReportDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetCommonalityAutoTaskReport"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"component"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"version"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseStepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"SearchPrecise"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getCommonalityAutoTaskReport"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"component"},"value":{"kind":"Variable","name":{"kind":"Name","value":"component"}}},{"kind":"Argument","name":{"kind":"Name","value":"version"},"value":{"kind":"Variable","name":{"kind":"Name","value":"version"}}},{"kind":"Argument","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseStepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseStepId"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"reportSystemUser"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"gid"}},{"kind":"Field","name":{"kind":"Name","value":"passwordHash"}},{"kind":"Field","name":{"kind":"Name","value":"shell"}},{"kind":"Field","name":{"kind":"Name","value":"uid"}},{"kind":"Field","name":{"kind":"Name","value":"userName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"reportFile"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"reportCVESec"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"mainList"}},{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"cvssRank"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"patch"}},{"kind":"Field","name":{"kind":"Name","value":"poc"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"exp"}}]}},{"kind":"Field","name":{"kind":"Name","value":"reportApkSignature"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"algorithm"}},{"kind":"Field","name":{"kind":"Name","value":"from"}},{"kind":"Field","name":{"kind":"Name","value":"oid"}},{"kind":"Field","name":{"kind":"Name","value":"subject"}},{"kind":"Field","name":{"kind":"Name","value":"to"}},{"kind":"Field","name":{"kind":"Name","value":"version"}}]}},{"kind":"Field","name":{"kind":"Name","value":"reportApkManifest"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"allowBackup"}},{"kind":"Field","name":{"kind":"Name","value":"debuggable"}}]}},{"kind":"Field","name":{"kind":"Name","value":"reportCheckSec"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"canary"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"nx"}},{"kind":"Field","name":{"kind":"Name","value":"pie"}},{"kind":"Field","name":{"kind":"Name","value":"relro"}},{"kind":"Field","name":{"kind":"Name","value":"rpath"}},{"kind":"Field","name":{"kind":"Name","value":"runpath"}},{"kind":"Field","name":{"kind":"Name","value":"symbols"}}]}},{"kind":"Field","name":{"kind":"Name","value":"apkComponents"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"activities"}},{"kind":"Field","name":{"kind":"Name","value":"providers"}},{"kind":"Field","name":{"kind":"Name","value":"receivers"}},{"kind":"Field","name":{"kind":"Name","value":"services"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetCommonalityAutoTaskReportQuery__
 *
 * To run a query within a React component, call `useGetCommonalityAutoTaskReportQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommonalityAutoTaskReportQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommonalityAutoTaskReportQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      component: // value for 'component'
 *      version: // value for 'version'
 *      path: // value for 'path'
 *      projectId: // value for 'projectId'
 *      caseId: // value for 'caseId'
 *      caseStepId: // value for 'caseStepId'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useGetCommonalityAutoTaskReportQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetCommonalityAutoTaskReportQuery, GetCommonalityAutoTaskReportQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetCommonalityAutoTaskReportQuery, GetCommonalityAutoTaskReportQueryVariables>(GetCommonalityAutoTaskReportDocument, options);
      }
export function useGetCommonalityAutoTaskReportLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCommonalityAutoTaskReportQuery, GetCommonalityAutoTaskReportQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetCommonalityAutoTaskReportQuery, GetCommonalityAutoTaskReportQueryVariables>(GetCommonalityAutoTaskReportDocument, options);
        }
export type GetCommonalityAutoTaskReportQueryHookResult = ReturnType<typeof useGetCommonalityAutoTaskReportQuery>;
export type GetCommonalityAutoTaskReportLazyQueryHookResult = ReturnType<typeof useGetCommonalityAutoTaskReportLazyQuery>;
export type GetCommonalityAutoTaskReportQueryResult = ApolloReactCommon.QueryResult<GetCommonalityAutoTaskReportQuery, GetCommonalityAutoTaskReportQueryVariables>;
export const GetUserCustomSuiteTypeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserCustomSuiteType"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getUserCustomSuiteType"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetUserCustomSuiteTypeQuery__
 *
 * To run a query within a React component, call `useGetUserCustomSuiteTypeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserCustomSuiteTypeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserCustomSuiteTypeQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useGetUserCustomSuiteTypeQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetUserCustomSuiteTypeQuery, GetUserCustomSuiteTypeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetUserCustomSuiteTypeQuery, GetUserCustomSuiteTypeQueryVariables>(GetUserCustomSuiteTypeDocument, options);
      }
export function useGetUserCustomSuiteTypeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserCustomSuiteTypeQuery, GetUserCustomSuiteTypeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetUserCustomSuiteTypeQuery, GetUserCustomSuiteTypeQueryVariables>(GetUserCustomSuiteTypeDocument, options);
        }
export type GetUserCustomSuiteTypeQueryHookResult = ReturnType<typeof useGetUserCustomSuiteTypeQuery>;
export type GetUserCustomSuiteTypeLazyQueryHookResult = ReturnType<typeof useGetUserCustomSuiteTypeLazyQuery>;
export type GetUserCustomSuiteTypeQueryResult = ApolloReactCommon.QueryResult<GetUserCustomSuiteTypeQuery, GetUserCustomSuiteTypeQueryVariables>;
export const GetOnlineUsbDeviceListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetOnlineUsbDeviceList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getOnlineUsbDeviceList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"isConnected"}},{"kind":"Field","name":{"kind":"Name","value":"clientId"}},{"kind":"Field","name":{"kind":"Name","value":"clientVersion"}},{"kind":"Field","name":{"kind":"Name","value":"clientOs"}},{"kind":"Field","name":{"kind":"Name","value":"clientHostName"}},{"kind":"Field","name":{"kind":"Name","value":"clientIp"}},{"kind":"Field","name":{"kind":"Name","value":"clientExecutingProjectTaskId"}},{"kind":"Field","name":{"kind":"Name","value":"inUsedDeviceInfo"}},{"kind":"Field","name":{"kind":"Name","value":"usbDeviceCount"}},{"kind":"Field","name":{"kind":"Name","value":"onlineUsbDevice"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"uuid"}},{"kind":"Field","name":{"kind":"Name","value":"serialNum"}},{"kind":"Field","name":{"kind":"Name","value":"clientId"}},{"kind":"Field","name":{"kind":"Name","value":"dType"}},{"kind":"Field","name":{"kind":"Name","value":"usbName"}},{"kind":"Field","name":{"kind":"Name","value":"usbAlertMessage"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetOnlineUsbDeviceListQuery__
 *
 * To run a query within a React component, call `useGetOnlineUsbDeviceListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetOnlineUsbDeviceListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetOnlineUsbDeviceListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useGetOnlineUsbDeviceListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetOnlineUsbDeviceListQuery, GetOnlineUsbDeviceListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetOnlineUsbDeviceListQuery, GetOnlineUsbDeviceListQueryVariables>(GetOnlineUsbDeviceListDocument, options);
      }
export function useGetOnlineUsbDeviceListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetOnlineUsbDeviceListQuery, GetOnlineUsbDeviceListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetOnlineUsbDeviceListQuery, GetOnlineUsbDeviceListQueryVariables>(GetOnlineUsbDeviceListDocument, options);
        }
export type GetOnlineUsbDeviceListQueryHookResult = ReturnType<typeof useGetOnlineUsbDeviceListQuery>;
export type GetOnlineUsbDeviceListLazyQueryHookResult = ReturnType<typeof useGetOnlineUsbDeviceListLazyQuery>;
export type GetOnlineUsbDeviceListQueryResult = ApolloReactCommon.QueryResult<GetOnlineUsbDeviceListQuery, GetOnlineUsbDeviceListQueryVariables>;
export const GetSuiteWithCaseIdsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSuiteWithCaseIds"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseIds"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"GetSuiteWithCaseIds"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseIds"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseIds"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"resultList"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"layType"}},{"kind":"Field","name":{"kind":"Name","value":"descriptionInfo"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"caseCount"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetSuiteWithCaseIdsQuery__
 *
 * To run a query within a React component, call `useGetSuiteWithCaseIdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSuiteWithCaseIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSuiteWithCaseIdsQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseIds: // value for 'caseIds'
 *   },
 * });
 */
export function useGetSuiteWithCaseIdsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetSuiteWithCaseIdsQuery, GetSuiteWithCaseIdsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetSuiteWithCaseIdsQuery, GetSuiteWithCaseIdsQueryVariables>(GetSuiteWithCaseIdsDocument, options);
      }
export function useGetSuiteWithCaseIdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSuiteWithCaseIdsQuery, GetSuiteWithCaseIdsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetSuiteWithCaseIdsQuery, GetSuiteWithCaseIdsQueryVariables>(GetSuiteWithCaseIdsDocument, options);
        }
export type GetSuiteWithCaseIdsQueryHookResult = ReturnType<typeof useGetSuiteWithCaseIdsQuery>;
export type GetSuiteWithCaseIdsLazyQueryHookResult = ReturnType<typeof useGetSuiteWithCaseIdsLazyQuery>;
export type GetSuiteWithCaseIdsQueryResult = ApolloReactCommon.QueryResult<GetSuiteWithCaseIdsQuery, GetSuiteWithCaseIdsQueryVariables>;
export const EditUserCustomCaseIntoSuiteDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"EditUserCustomCaseIntoSuite"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"suiteName"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editUserCustomCaseIntoSuite"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"Argument","name":{"kind":"Name","value":"suiteName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"suiteName"}}}]}]}}]} as unknown as DocumentNode;
export type EditUserCustomCaseIntoSuiteMutationFn = ApolloReactCommon.MutationFunction<EditUserCustomCaseIntoSuiteMutation, EditUserCustomCaseIntoSuiteMutationVariables>;

/**
 * __useEditUserCustomCaseIntoSuiteMutation__
 *
 * To run a mutation, you first call `useEditUserCustomCaseIntoSuiteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditUserCustomCaseIntoSuiteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editUserCustomCaseIntoSuiteMutation, { data, loading, error }] = useEditUserCustomCaseIntoSuiteMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *      suiteName: // value for 'suiteName'
 *   },
 * });
 */
export function useEditUserCustomCaseIntoSuiteMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditUserCustomCaseIntoSuiteMutation, EditUserCustomCaseIntoSuiteMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<EditUserCustomCaseIntoSuiteMutation, EditUserCustomCaseIntoSuiteMutationVariables>(EditUserCustomCaseIntoSuiteDocument, options);
      }
export type EditUserCustomCaseIntoSuiteMutationHookResult = ReturnType<typeof useEditUserCustomCaseIntoSuiteMutation>;
export type EditUserCustomCaseIntoSuiteMutationResult = ApolloReactCommon.MutationResult<EditUserCustomCaseIntoSuiteMutation>;
export type EditUserCustomCaseIntoSuiteMutationOptions = ApolloReactCommon.BaseMutationOptions<EditUserCustomCaseIntoSuiteMutation, EditUserCustomCaseIntoSuiteMutationVariables>;
export const GetMyProjectStatisticsDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetMyProjectStatistics"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getMyProjectStatistics"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectNumber"}},{"kind":"Field","name":{"kind":"Name","value":"projectCheckingNumber"}},{"kind":"Field","name":{"kind":"Name","value":"projectPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"projectUnPassNumber"}},{"kind":"Field","name":{"kind":"Name","value":"passingRateChecking"}},{"kind":"Field","name":{"kind":"Name","value":"passingRatePass"}},{"kind":"Field","name":{"kind":"Name","value":"passingRateUnPass"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetMyProjectStatisticsQuery__
 *
 * To run a query within a React component, call `useGetMyProjectStatisticsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMyProjectStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMyProjectStatisticsQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useGetMyProjectStatisticsQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetMyProjectStatisticsQuery, GetMyProjectStatisticsQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetMyProjectStatisticsQuery, GetMyProjectStatisticsQueryVariables>(GetMyProjectStatisticsDocument, options);
      }
export function useGetMyProjectStatisticsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetMyProjectStatisticsQuery, GetMyProjectStatisticsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetMyProjectStatisticsQuery, GetMyProjectStatisticsQueryVariables>(GetMyProjectStatisticsDocument, options);
        }
export type GetMyProjectStatisticsQueryHookResult = ReturnType<typeof useGetMyProjectStatisticsQuery>;
export type GetMyProjectStatisticsLazyQueryHookResult = ReturnType<typeof useGetMyProjectStatisticsLazyQuery>;
export type GetMyProjectStatisticsQueryResult = ApolloReactCommon.QueryResult<GetMyProjectStatisticsQuery, GetMyProjectStatisticsQueryVariables>;
export const EditProjectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"EditProject"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"dutyUserId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"editProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"dutyUserId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"dutyUserId"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}}]}}]}}]}}]} as unknown as DocumentNode;
export type EditProjectMutationFn = ApolloReactCommon.MutationFunction<EditProjectMutation, EditProjectMutationVariables>;

/**
 * __useEditProjectMutation__
 *
 * To run a mutation, you first call `useEditProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editProjectMutation, { data, loading, error }] = useEditProjectMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      dutyUserId: // value for 'dutyUserId'
 *   },
 * });
 */
export function useEditProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditProjectMutation, EditProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<EditProjectMutation, EditProjectMutationVariables>(EditProjectDocument, options);
      }
export type EditProjectMutationHookResult = ReturnType<typeof useEditProjectMutation>;
export type EditProjectMutationResult = ApolloReactCommon.MutationResult<EditProjectMutation>;
export type EditProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<EditProjectMutation, EditProjectMutationVariables>;
export const GetUserSelectorListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetUserSelectorList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getUserSelectorList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"userId"}},{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetUserSelectorListQuery__
 *
 * To run a query within a React component, call `useGetUserSelectorListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserSelectorListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserSelectorListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useGetUserSelectorListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetUserSelectorListQuery, GetUserSelectorListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetUserSelectorListQuery, GetUserSelectorListQueryVariables>(GetUserSelectorListDocument, options);
      }
export function useGetUserSelectorListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserSelectorListQuery, GetUserSelectorListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetUserSelectorListQuery, GetUserSelectorListQueryVariables>(GetUserSelectorListDocument, options);
        }
export type GetUserSelectorListQueryHookResult = ReturnType<typeof useGetUserSelectorListQuery>;
export type GetUserSelectorListLazyQueryHookResult = ReturnType<typeof useGetUserSelectorListLazyQuery>;
export type GetUserSelectorListQueryResult = ApolloReactCommon.QueryResult<GetUserSelectorListQuery, GetUserSelectorListQueryVariables>;
export const CheckProjectReportStatusDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CheckProjectReportStatus"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"checkProjectReportStatus"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}]}]}}]} as unknown as DocumentNode;

/**
 * __useCheckProjectReportStatusQuery__
 *
 * To run a query within a React component, call `useCheckProjectReportStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckProjectReportStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckProjectReportStatusQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useCheckProjectReportStatusQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CheckProjectReportStatusQuery, CheckProjectReportStatusQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CheckProjectReportStatusQuery, CheckProjectReportStatusQueryVariables>(CheckProjectReportStatusDocument, options);
      }
export function useCheckProjectReportStatusLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckProjectReportStatusQuery, CheckProjectReportStatusQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CheckProjectReportStatusQuery, CheckProjectReportStatusQueryVariables>(CheckProjectReportStatusDocument, options);
        }
export type CheckProjectReportStatusQueryHookResult = ReturnType<typeof useCheckProjectReportStatusQuery>;
export type CheckProjectReportStatusLazyQueryHookResult = ReturnType<typeof useCheckProjectReportStatusLazyQuery>;
export type CheckProjectReportStatusQueryResult = ApolloReactCommon.QueryResult<CheckProjectReportStatusQuery, CheckProjectReportStatusQueryVariables>;
export const CaseAllInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CaseAllInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseAllInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseBaseInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"caseDesc"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"bindName"}},{"kind":"Field","name":{"kind":"Name","value":"classifyName"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelName"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"submitUserName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelType"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodName"}},{"kind":"Field","name":{"kind":"Name","value":"testMothodType"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelType"}}]}},{"kind":"Field","name":{"kind":"Name","value":"complianceRequire"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawName"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawCatalogueName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"Field","name":{"kind":"Name","value":"caseTestProcess"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCaseAllInfoQuery__
 *
 * To run a query within a React component, call `useCaseAllInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useCaseAllInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCaseAllInfoQuery({
 *   variables: {
 *      caseId: // value for 'caseId'
 *   },
 * });
 */
export function useCaseAllInfoQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CaseAllInfoQuery, CaseAllInfoQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CaseAllInfoQuery, CaseAllInfoQueryVariables>(CaseAllInfoDocument, options);
      }
export function useCaseAllInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CaseAllInfoQuery, CaseAllInfoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CaseAllInfoQuery, CaseAllInfoQueryVariables>(CaseAllInfoDocument, options);
        }
export type CaseAllInfoQueryHookResult = ReturnType<typeof useCaseAllInfoQuery>;
export type CaseAllInfoLazyQueryHookResult = ReturnType<typeof useCaseAllInfoLazyQuery>;
export type CaseAllInfoQueryResult = ApolloReactCommon.QueryResult<CaseAllInfoQuery, CaseAllInfoQueryVariables>;
export const ClientEventAlertDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ClientEventAlert"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"clientEventAlert"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hasAlert"}},{"kind":"Field","name":{"kind":"Name","value":"alertType"}},{"kind":"Field","name":{"kind":"Name","value":"uuid"}},{"kind":"Field","name":{"kind":"Name","value":"oldDeviceName"}},{"kind":"Field","name":{"kind":"Name","value":"newDeviceName"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useClientEventAlertQuery__
 *
 * To run a query within a React component, call `useClientEventAlertQuery` and pass it any options that fit your needs.
 * When your component renders, `useClientEventAlertQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useClientEventAlertQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useClientEventAlertQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ClientEventAlertQuery, ClientEventAlertQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ClientEventAlertQuery, ClientEventAlertQueryVariables>(ClientEventAlertDocument, options);
      }
export function useClientEventAlertLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ClientEventAlertQuery, ClientEventAlertQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ClientEventAlertQuery, ClientEventAlertQueryVariables>(ClientEventAlertDocument, options);
        }
export type ClientEventAlertQueryHookResult = ReturnType<typeof useClientEventAlertQuery>;
export type ClientEventAlertLazyQueryHookResult = ReturnType<typeof useClientEventAlertLazyQuery>;
export type ClientEventAlertQueryResult = ApolloReactCommon.QueryResult<ClientEventAlertQuery, ClientEventAlertQueryVariables>;
export const SubmitClientDeviceChangeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SubmitClientDeviceChange"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"uuid"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"result"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"submitClientDeviceChange"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"uuid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"uuid"}}},{"kind":"Argument","name":{"kind":"Name","value":"result"},"value":{"kind":"Variable","name":{"kind":"Name","value":"result"}}}]}]}}]} as unknown as DocumentNode;
export type SubmitClientDeviceChangeMutationFn = ApolloReactCommon.MutationFunction<SubmitClientDeviceChangeMutation, SubmitClientDeviceChangeMutationVariables>;

/**
 * __useSubmitClientDeviceChangeMutation__
 *
 * To run a mutation, you first call `useSubmitClientDeviceChangeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitClientDeviceChangeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitClientDeviceChangeMutation, { data, loading, error }] = useSubmitClientDeviceChangeMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      uuid: // value for 'uuid'
 *      result: // value for 'result'
 *   },
 * });
 */
export function useSubmitClientDeviceChangeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitClientDeviceChangeMutation, SubmitClientDeviceChangeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SubmitClientDeviceChangeMutation, SubmitClientDeviceChangeMutationVariables>(SubmitClientDeviceChangeDocument, options);
      }
export type SubmitClientDeviceChangeMutationHookResult = ReturnType<typeof useSubmitClientDeviceChangeMutation>;
export type SubmitClientDeviceChangeMutationResult = ApolloReactCommon.MutationResult<SubmitClientDeviceChangeMutation>;
export type SubmitClientDeviceChangeMutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitClientDeviceChangeMutation, SubmitClientDeviceChangeMutationVariables>;
export const DeleteStepUploadDataDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"DeleteStepUploadData"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"uuid"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deleteStepUploadData"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}},{"kind":"Argument","name":{"kind":"Name","value":"uuid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"uuid"}}}]}]}}]} as unknown as DocumentNode;
export type DeleteStepUploadDataMutationFn = ApolloReactCommon.MutationFunction<DeleteStepUploadDataMutation, DeleteStepUploadDataMutationVariables>;

/**
 * __useDeleteStepUploadDataMutation__
 *
 * To run a mutation, you first call `useDeleteStepUploadDataMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteStepUploadDataMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteStepUploadDataMutation, { data, loading, error }] = useDeleteStepUploadDataMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      stepId: // value for 'stepId'
 *      uuid: // value for 'uuid'
 *   },
 * });
 */
export function useDeleteStepUploadDataMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteStepUploadDataMutation, DeleteStepUploadDataMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<DeleteStepUploadDataMutation, DeleteStepUploadDataMutationVariables>(DeleteStepUploadDataDocument, options);
      }
export type DeleteStepUploadDataMutationHookResult = ReturnType<typeof useDeleteStepUploadDataMutation>;
export type DeleteStepUploadDataMutationResult = ApolloReactCommon.MutationResult<DeleteStepUploadDataMutation>;
export type DeleteStepUploadDataMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteStepUploadDataMutation, DeleteStepUploadDataMutationVariables>;
export const SaveStepInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveStepInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"buttonName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"buttonType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"result"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"remark"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveStepInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}},{"kind":"Argument","name":{"kind":"Name","value":"buttonName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"buttonName"}}},{"kind":"Argument","name":{"kind":"Name","value":"buttonType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"buttonType"}}},{"kind":"Argument","name":{"kind":"Name","value":"result"},"value":{"kind":"Variable","name":{"kind":"Name","value":"result"}}},{"kind":"Argument","name":{"kind":"Name","value":"remark"},"value":{"kind":"Variable","name":{"kind":"Name","value":"remark"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepType"}}}]}]}}]} as unknown as DocumentNode;
export type SaveStepInfoMutationFn = ApolloReactCommon.MutationFunction<SaveStepInfoMutation, SaveStepInfoMutationVariables>;

/**
 * __useSaveStepInfoMutation__
 *
 * To run a mutation, you first call `useSaveStepInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveStepInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveStepInfoMutation, { data, loading, error }] = useSaveStepInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      stepId: // value for 'stepId'
 *      buttonName: // value for 'buttonName'
 *      buttonType: // value for 'buttonType'
 *      result: // value for 'result'
 *      remark: // value for 'remark'
 *      stepType: // value for 'stepType'
 *   },
 * });
 */
export function useSaveStepInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveStepInfoMutation, SaveStepInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SaveStepInfoMutation, SaveStepInfoMutationVariables>(SaveStepInfoDocument, options);
      }
export type SaveStepInfoMutationHookResult = ReturnType<typeof useSaveStepInfoMutation>;
export type SaveStepInfoMutationResult = ApolloReactCommon.MutationResult<SaveStepInfoMutation>;
export type SaveStepInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveStepInfoMutation, SaveStepInfoMutationVariables>;
export const SaveStepDialogInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SaveStepDialogInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"buttonName"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"buttonType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cancel"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"saveStepDialogInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}},{"kind":"Argument","name":{"kind":"Name","value":"buttonName"},"value":{"kind":"Variable","name":{"kind":"Name","value":"buttonName"}}},{"kind":"Argument","name":{"kind":"Name","value":"buttonType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"buttonType"}}},{"kind":"Argument","name":{"kind":"Name","value":"cancel"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cancel"}}}]}]}}]} as unknown as DocumentNode;
export type SaveStepDialogInfoMutationFn = ApolloReactCommon.MutationFunction<SaveStepDialogInfoMutation, SaveStepDialogInfoMutationVariables>;

/**
 * __useSaveStepDialogInfoMutation__
 *
 * To run a mutation, you first call `useSaveStepDialogInfoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveStepDialogInfoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveStepDialogInfoMutation, { data, loading, error }] = useSaveStepDialogInfoMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      stepId: // value for 'stepId'
 *      buttonName: // value for 'buttonName'
 *      buttonType: // value for 'buttonType'
 *      cancel: // value for 'cancel'
 *   },
 * });
 */
export function useSaveStepDialogInfoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveStepDialogInfoMutation, SaveStepDialogInfoMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SaveStepDialogInfoMutation, SaveStepDialogInfoMutationVariables>(SaveStepDialogInfoDocument, options);
      }
export type SaveStepDialogInfoMutationHookResult = ReturnType<typeof useSaveStepDialogInfoMutation>;
export type SaveStepDialogInfoMutationResult = ApolloReactCommon.MutationResult<SaveStepDialogInfoMutation>;
export type SaveStepDialogInfoMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveStepDialogInfoMutation, SaveStepDialogInfoMutationVariables>;
export const ScriptExeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"ScriptExe"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"appList"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AppInfo"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"argParams"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"scriptExe"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}},{"kind":"Argument","name":{"kind":"Name","value":"appList"},"value":{"kind":"Variable","name":{"kind":"Name","value":"appList"}}},{"kind":"Argument","name":{"kind":"Name","value":"argParams"},"value":{"kind":"Variable","name":{"kind":"Name","value":"argParams"}}}]}]}}]} as unknown as DocumentNode;
export type ScriptExeMutationFn = ApolloReactCommon.MutationFunction<ScriptExeMutation, ScriptExeMutationVariables>;

/**
 * __useScriptExeMutation__
 *
 * To run a mutation, you first call `useScriptExeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useScriptExeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [scriptExeMutation, { data, loading, error }] = useScriptExeMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      stepId: // value for 'stepId'
 *      appList: // value for 'appList'
 *      argParams: // value for 'argParams'
 *   },
 * });
 */
export function useScriptExeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ScriptExeMutation, ScriptExeMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ScriptExeMutation, ScriptExeMutationVariables>(ScriptExeDocument, options);
      }
export type ScriptExeMutationHookResult = ReturnType<typeof useScriptExeMutation>;
export type ScriptExeMutationResult = ApolloReactCommon.MutationResult<ScriptExeMutation>;
export type ScriptExeMutationOptions = ApolloReactCommon.BaseMutationOptions<ScriptExeMutation, ScriptExeMutationVariables>;
export const ScreenshotDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"Screenshot"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"screenshot"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"stepId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"stepId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"fileUUID"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}}]}}]}}]} as unknown as DocumentNode;
export type ScreenshotMutationFn = ApolloReactCommon.MutationFunction<ScreenshotMutation, ScreenshotMutationVariables>;

/**
 * __useScreenshotMutation__
 *
 * To run a mutation, you first call `useScreenshotMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useScreenshotMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [screenshotMutation, { data, loading, error }] = useScreenshotMutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *      stepId: // value for 'stepId'
 *   },
 * });
 */
export function useScreenshotMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ScreenshotMutation, ScreenshotMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<ScreenshotMutation, ScreenshotMutationVariables>(ScreenshotDocument, options);
      }
export type ScreenshotMutationHookResult = ReturnType<typeof useScreenshotMutation>;
export type ScreenshotMutationResult = ApolloReactCommon.MutationResult<ScreenshotMutation>;
export type ScreenshotMutationOptions = ApolloReactCommon.BaseMutationOptions<ScreenshotMutation, ScreenshotMutationVariables>;
export const RealtimeGetApkInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"RealtimeGetApkInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"realtimeGetApkInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appName"}},{"kind":"Field","name":{"kind":"Name","value":"packageName"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useRealtimeGetApkInfoQuery__
 *
 * To run a query within a React component, call `useRealtimeGetApkInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useRealtimeGetApkInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRealtimeGetApkInfoQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useRealtimeGetApkInfoQuery(baseOptions: ApolloReactHooks.QueryHookOptions<RealtimeGetApkInfoQuery, RealtimeGetApkInfoQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<RealtimeGetApkInfoQuery, RealtimeGetApkInfoQueryVariables>(RealtimeGetApkInfoDocument, options);
      }
export function useRealtimeGetApkInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<RealtimeGetApkInfoQuery, RealtimeGetApkInfoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<RealtimeGetApkInfoQuery, RealtimeGetApkInfoQueryVariables>(RealtimeGetApkInfoDocument, options);
        }
export type RealtimeGetApkInfoQueryHookResult = ReturnType<typeof useRealtimeGetApkInfoQuery>;
export type RealtimeGetApkInfoLazyQueryHookResult = ReturnType<typeof useRealtimeGetApkInfoLazyQuery>;
export type RealtimeGetApkInfoQueryResult = ApolloReactCommon.QueryResult<RealtimeGetApkInfoQuery, RealtimeGetApkInfoQueryVariables>;
export const CheckDeviceOnlineDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CheckDeviceOnline"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"clientId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectIP"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectPort"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectUser"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectPassword"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectCertificateUrl"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"checkDeviceOnline"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"clientId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"clientId"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectType"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectIP"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectIP"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectPort"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectPort"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectUser"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectUser"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectPassword"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectPassword"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectCertificateUrl"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectCertificateUrl"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"isOnline"}},{"kind":"Field","name":{"kind":"Name","value":"deviceType"}},{"kind":"Field","name":{"kind":"Name","value":"deviceId"}},{"kind":"Field","name":{"kind":"Name","value":"deviceName"}},{"kind":"Field","name":{"kind":"Name","value":"clientId"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCheckDeviceOnlineQuery__
 *
 * To run a query within a React component, call `useCheckDeviceOnlineQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckDeviceOnlineQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckDeviceOnlineQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      clientId: // value for 'clientId'
 *      connectType: // value for 'connectType'
 *      connectIP: // value for 'connectIP'
 *      connectPort: // value for 'connectPort'
 *      connectUser: // value for 'connectUser'
 *      connectPassword: // value for 'connectPassword'
 *      connectCertificateUrl: // value for 'connectCertificateUrl'
 *   },
 * });
 */
export function useCheckDeviceOnlineQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CheckDeviceOnlineQuery, CheckDeviceOnlineQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CheckDeviceOnlineQuery, CheckDeviceOnlineQueryVariables>(CheckDeviceOnlineDocument, options);
      }
export function useCheckDeviceOnlineLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckDeviceOnlineQuery, CheckDeviceOnlineQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CheckDeviceOnlineQuery, CheckDeviceOnlineQueryVariables>(CheckDeviceOnlineDocument, options);
        }
export type CheckDeviceOnlineQueryHookResult = ReturnType<typeof useCheckDeviceOnlineQuery>;
export type CheckDeviceOnlineLazyQueryHookResult = ReturnType<typeof useCheckDeviceOnlineLazyQuery>;
export type CheckDeviceOnlineQueryResult = ApolloReactCommon.QueryResult<CheckDeviceOnlineQuery, CheckDeviceOnlineQueryVariables>;
export const GetProjectAutoTaskProgressV2Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetProjectAutoTaskProgressV2"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getProjectAutoTaskProgressV2"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"currentIndedx"}},{"kind":"Field","name":{"kind":"Name","value":"progressPercent"}},{"kind":"Field","name":{"kind":"Name","value":"isFinished"}},{"kind":"Field","name":{"kind":"Name","value":"stepConfig"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"alertType"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetProjectAutoTaskProgressV2Query__
 *
 * To run a query within a React component, call `useGetProjectAutoTaskProgressV2Query` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectAutoTaskProgressV2Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectAutoTaskProgressV2Query({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetProjectAutoTaskProgressV2Query(baseOptions: ApolloReactHooks.QueryHookOptions<GetProjectAutoTaskProgressV2Query, GetProjectAutoTaskProgressV2QueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetProjectAutoTaskProgressV2Query, GetProjectAutoTaskProgressV2QueryVariables>(GetProjectAutoTaskProgressV2Document, options);
      }
export function useGetProjectAutoTaskProgressV2LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectAutoTaskProgressV2Query, GetProjectAutoTaskProgressV2QueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetProjectAutoTaskProgressV2Query, GetProjectAutoTaskProgressV2QueryVariables>(GetProjectAutoTaskProgressV2Document, options);
        }
export type GetProjectAutoTaskProgressV2QueryHookResult = ReturnType<typeof useGetProjectAutoTaskProgressV2Query>;
export type GetProjectAutoTaskProgressV2LazyQueryHookResult = ReturnType<typeof useGetProjectAutoTaskProgressV2LazyQuery>;
export type GetProjectAutoTaskProgressV2QueryResult = ApolloReactCommon.QueryResult<GetProjectAutoTaskProgressV2Query, GetProjectAutoTaskProgressV2QueryVariables>;
export const CheckDeviceHeartbeatDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"checkDeviceHeartbeat"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"deviceId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"checkDeviceHeartbeat"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"deviceId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"deviceId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"isOnline"}},{"kind":"Field","name":{"kind":"Name","value":"deviceType"}},{"kind":"Field","name":{"kind":"Name","value":"deviceId"}},{"kind":"Field","name":{"kind":"Name","value":"deviceName"}},{"kind":"Field","name":{"kind":"Name","value":"clientId"}},{"kind":"Field","name":{"kind":"Name","value":"offlineData"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"clientId"}},{"kind":"Field","name":{"kind":"Name","value":"connectType"}},{"kind":"Field","name":{"kind":"Name","value":"connectIP"}},{"kind":"Field","name":{"kind":"Name","value":"connectPort"}},{"kind":"Field","name":{"kind":"Name","value":"connectUser"}},{"kind":"Field","name":{"kind":"Name","value":"connectPassword"}},{"kind":"Field","name":{"kind":"Name","value":"connectCertificateUrl"}},{"kind":"Field","name":{"kind":"Name","value":"hasConnectCertificateFile"}},{"kind":"Field","name":{"kind":"Name","value":"uploadFileServerUrl"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCheckDeviceHeartbeatQuery__
 *
 * To run a query within a React component, call `useCheckDeviceHeartbeatQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckDeviceHeartbeatQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckDeviceHeartbeatQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      deviceId: // value for 'deviceId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useCheckDeviceHeartbeatQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CheckDeviceHeartbeatQuery, CheckDeviceHeartbeatQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CheckDeviceHeartbeatQuery, CheckDeviceHeartbeatQueryVariables>(CheckDeviceHeartbeatDocument, options);
      }
export function useCheckDeviceHeartbeatLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckDeviceHeartbeatQuery, CheckDeviceHeartbeatQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CheckDeviceHeartbeatQuery, CheckDeviceHeartbeatQueryVariables>(CheckDeviceHeartbeatDocument, options);
        }
export type CheckDeviceHeartbeatQueryHookResult = ReturnType<typeof useCheckDeviceHeartbeatQuery>;
export type CheckDeviceHeartbeatLazyQueryHookResult = ReturnType<typeof useCheckDeviceHeartbeatLazyQuery>;
export type CheckDeviceHeartbeatQueryResult = ApolloReactCommon.QueryResult<CheckDeviceHeartbeatQuery, CheckDeviceHeartbeatQueryVariables>;
export const GetAnalysisAppListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetAnalysisAppList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getAnalysisAppList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appInfo"}},{"kind":"Field","name":{"kind":"Name","value":"analysisStatus"}},{"kind":"Field","name":{"kind":"Name","value":"analysisErrorMsg"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetAnalysisAppListQuery__
 *
 * To run a query within a React component, call `useGetAnalysisAppListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAnalysisAppListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAnalysisAppListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetAnalysisAppListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetAnalysisAppListQuery, GetAnalysisAppListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetAnalysisAppListQuery, GetAnalysisAppListQueryVariables>(GetAnalysisAppListDocument, options);
      }
export function useGetAnalysisAppListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAnalysisAppListQuery, GetAnalysisAppListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetAnalysisAppListQuery, GetAnalysisAppListQueryVariables>(GetAnalysisAppListDocument, options);
        }
export type GetAnalysisAppListQueryHookResult = ReturnType<typeof useGetAnalysisAppListQuery>;
export type GetAnalysisAppListLazyQueryHookResult = ReturnType<typeof useGetAnalysisAppListLazyQuery>;
export type GetAnalysisAppListQueryResult = ApolloReactCommon.QueryResult<GetAnalysisAppListQuery, GetAnalysisAppListQueryVariables>;
export const GetSelectedAppListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"GetSelectedAppList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"getSelectedAppList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"appInfo"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useGetSelectedAppListQuery__
 *
 * To run a query within a React component, call `useGetSelectedAppListQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSelectedAppListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSelectedAppListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetSelectedAppListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<GetSelectedAppListQuery, GetSelectedAppListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<GetSelectedAppListQuery, GetSelectedAppListQueryVariables>(GetSelectedAppListDocument, options);
      }
export function useGetSelectedAppListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSelectedAppListQuery, GetSelectedAppListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<GetSelectedAppListQuery, GetSelectedAppListQueryVariables>(GetSelectedAppListDocument, options);
        }
export type GetSelectedAppListQueryHookResult = ReturnType<typeof useGetSelectedAppListQuery>;
export type GetSelectedAppListLazyQueryHookResult = ReturnType<typeof useGetSelectedAppListLazyQuery>;
export type GetSelectedAppListQueryResult = ApolloReactCommon.QueryResult<GetSelectedAppListQuery, GetSelectedAppListQueryVariables>;
export const SubmitSelectorListV2Document = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"SubmitSelectorListV2"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"result"}},"type":{"kind":"ListType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"isJumpStep"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"submitSelectorListV2"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"result"},"value":{"kind":"Variable","name":{"kind":"Name","value":"result"}}},{"kind":"Argument","name":{"kind":"Name","value":"isJumpStep"},"value":{"kind":"Variable","name":{"kind":"Name","value":"isJumpStep"}}}]}]}}]} as unknown as DocumentNode;
export type SubmitSelectorListV2MutationFn = ApolloReactCommon.MutationFunction<SubmitSelectorListV2Mutation, SubmitSelectorListV2MutationVariables>;

/**
 * __useSubmitSelectorListV2Mutation__
 *
 * To run a mutation, you first call `useSubmitSelectorListV2Mutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitSelectorListV2Mutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitSelectorListV2Mutation, { data, loading, error }] = useSubmitSelectorListV2Mutation({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      result: // value for 'result'
 *      isJumpStep: // value for 'isJumpStep'
 *   },
 * });
 */
export function useSubmitSelectorListV2Mutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubmitSelectorListV2Mutation, SubmitSelectorListV2MutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<SubmitSelectorListV2Mutation, SubmitSelectorListV2MutationVariables>(SubmitSelectorListV2Document, options);
      }
export type SubmitSelectorListV2MutationHookResult = ReturnType<typeof useSubmitSelectorListV2Mutation>;
export type SubmitSelectorListV2MutationResult = ApolloReactCommon.MutationResult<SubmitSelectorListV2Mutation>;
export type SubmitSelectorListV2MutationOptions = ApolloReactCommon.BaseMutationOptions<SubmitSelectorListV2Mutation, SubmitSelectorListV2MutationVariables>;
export const ExchangeLinuxDeviceConnectMsgDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"exchangeLinuxDeviceConnectMsg"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"clientId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"deviceId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectIP"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectPort"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectUser"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectPassword"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"connectCertificateUrl"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"exchangeLinuxDeviceConnectMsg"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}},{"kind":"Argument","name":{"kind":"Name","value":"clientId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"clientId"}}},{"kind":"Argument","name":{"kind":"Name","value":"deviceId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"deviceId"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectType"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectIP"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectIP"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectPort"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectPort"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectUser"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectUser"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectPassword"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectPassword"}}},{"kind":"Argument","name":{"kind":"Name","value":"connectCertificateUrl"},"value":{"kind":"Variable","name":{"kind":"Name","value":"connectCertificateUrl"}}}]}]}}]} as unknown as DocumentNode;

/**
 * __useExchangeLinuxDeviceConnectMsgQuery__
 *
 * To run a query within a React component, call `useExchangeLinuxDeviceConnectMsgQuery` and pass it any options that fit your needs.
 * When your component renders, `useExchangeLinuxDeviceConnectMsgQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useExchangeLinuxDeviceConnectMsgQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      projectId: // value for 'projectId'
 *      clientId: // value for 'clientId'
 *      deviceId: // value for 'deviceId'
 *      connectType: // value for 'connectType'
 *      connectIP: // value for 'connectIP'
 *      connectPort: // value for 'connectPort'
 *      connectUser: // value for 'connectUser'
 *      connectPassword: // value for 'connectPassword'
 *      connectCertificateUrl: // value for 'connectCertificateUrl'
 *   },
 * });
 */
export function useExchangeLinuxDeviceConnectMsgQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ExchangeLinuxDeviceConnectMsgQuery, ExchangeLinuxDeviceConnectMsgQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ExchangeLinuxDeviceConnectMsgQuery, ExchangeLinuxDeviceConnectMsgQueryVariables>(ExchangeLinuxDeviceConnectMsgDocument, options);
      }
export function useExchangeLinuxDeviceConnectMsgLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ExchangeLinuxDeviceConnectMsgQuery, ExchangeLinuxDeviceConnectMsgQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ExchangeLinuxDeviceConnectMsgQuery, ExchangeLinuxDeviceConnectMsgQueryVariables>(ExchangeLinuxDeviceConnectMsgDocument, options);
        }
export type ExchangeLinuxDeviceConnectMsgQueryHookResult = ReturnType<typeof useExchangeLinuxDeviceConnectMsgQuery>;
export type ExchangeLinuxDeviceConnectMsgLazyQueryHookResult = ReturnType<typeof useExchangeLinuxDeviceConnectMsgLazyQuery>;
export type ExchangeLinuxDeviceConnectMsgQueryResult = ApolloReactCommon.QueryResult<ExchangeLinuxDeviceConnectMsgQuery, ExchangeLinuxDeviceConnectMsgQueryVariables>;
export const ProjectSelectorListDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectSelectorList"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"projectSelectorList"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"testObject"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"autoPartsId"}},{"kind":"Field","name":{"kind":"Name","value":"autoPartsName"}},{"kind":"Field","name":{"kind":"Name","value":"systemChild"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"systemId"}},{"kind":"Field","name":{"kind":"Name","value":"systemName"}},{"kind":"Field","name":{"kind":"Name","value":"systemType"}},{"kind":"Field","name":{"kind":"Name","value":"systemVersion"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"clientAndroid"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"clientId"}},{"kind":"Field","name":{"kind":"Name","value":"clientName"}},{"kind":"Field","name":{"kind":"Name","value":"clientChild"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"deviceId"}},{"kind":"Field","name":{"kind":"Name","value":"deviceName"}},{"kind":"Field","name":{"kind":"Name","value":"isUsable"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"clientLinux"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"clientId"}},{"kind":"Field","name":{"kind":"Name","value":"clientName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"uploadFileUrl"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectSelectorListQuery__
 *
 * To run a query within a React component, call `useProjectSelectorListQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectSelectorListQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectSelectorListQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *   },
 * });
 */
export function useProjectSelectorListQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectSelectorListQuery, ProjectSelectorListQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectSelectorListQuery, ProjectSelectorListQueryVariables>(ProjectSelectorListDocument, options);
      }
export function useProjectSelectorListLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectSelectorListQuery, ProjectSelectorListQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectSelectorListQuery, ProjectSelectorListQueryVariables>(ProjectSelectorListDocument, options);
        }
export type ProjectSelectorListQueryHookResult = ReturnType<typeof useProjectSelectorListQuery>;
export type ProjectSelectorListLazyQueryHookResult = ReturnType<typeof useProjectSelectorListLazyQuery>;
export type ProjectSelectorListQueryResult = ApolloReactCommon.QueryResult<ProjectSelectorListQuery, ProjectSelectorListQueryVariables>;
export const CreateTestProjectDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"mutation","name":{"kind":"Name","value":"CreateTestProject"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"name"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"lawId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"principalUserId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"autoPartsId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"systemId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"systemType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"clientId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"deviceId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectType"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectIP"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectPort"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectUser"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectPassword"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectCertificateUrl"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"teamProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"createProject"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"input"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"name"},"value":{"kind":"Variable","name":{"kind":"Name","value":"name"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"lawId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"lawId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"principalUserId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"principalUserId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"autoPartsId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"autoPartsId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"systemId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"systemId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"systemType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"systemType"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"clientId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"clientId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"deviceId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"deviceId"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"linuxConnectType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectType"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"linuxConnectIP"},"value":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectIP"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"linuxConnectPort"},"value":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectPort"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"linuxConnectUser"},"value":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectUser"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"linuxConnectPassword"},"value":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectPassword"}}},{"kind":"ObjectField","name":{"kind":"Name","value":"linuxConnectCertificateUrl"},"value":{"kind":"Variable","name":{"kind":"Name","value":"linuxConnectCertificateUrl"}}}]}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"caseResultIgnoreCount"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ignoreCaseCount"}},{"kind":"Field","name":{"kind":"Name","value":"stepWords"}}]}}]}}]}}]}}]} as unknown as DocumentNode;
export type CreateTestProjectMutationFn = ApolloReactCommon.MutationFunction<CreateTestProjectMutation, CreateTestProjectMutationVariables>;

/**
 * __useCreateTestProjectMutation__
 *
 * To run a mutation, you first call `useCreateTestProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTestProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTestProjectMutation, { data, loading, error }] = useCreateTestProjectMutation({
 *   variables: {
 *      id: // value for 'id'
 *      name: // value for 'name'
 *      lawId: // value for 'lawId'
 *      principalUserId: // value for 'principalUserId'
 *      autoPartsId: // value for 'autoPartsId'
 *      systemId: // value for 'systemId'
 *      systemType: // value for 'systemType'
 *      clientId: // value for 'clientId'
 *      deviceId: // value for 'deviceId'
 *      linuxConnectType: // value for 'linuxConnectType'
 *      linuxConnectIP: // value for 'linuxConnectIP'
 *      linuxConnectPort: // value for 'linuxConnectPort'
 *      linuxConnectUser: // value for 'linuxConnectUser'
 *      linuxConnectPassword: // value for 'linuxConnectPassword'
 *      linuxConnectCertificateUrl: // value for 'linuxConnectCertificateUrl'
 *   },
 * });
 */
export function useCreateTestProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTestProjectMutation, CreateTestProjectMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useMutation<CreateTestProjectMutation, CreateTestProjectMutationVariables>(CreateTestProjectDocument, options);
      }
export type CreateTestProjectMutationHookResult = ReturnType<typeof useCreateTestProjectMutation>;
export type CreateTestProjectMutationResult = ApolloReactCommon.MutationResult<CreateTestProjectMutation>;
export type CreateTestProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTestProjectMutation, CreateTestProjectMutationVariables>;
export const CaseTestProcessRecordDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"CaseTestProcessRecord"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseTestProcessRecord"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"teamId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"teamId"}}},{"kind":"Argument","name":{"kind":"Name","value":"caseId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"caseId"}}},{"kind":"Argument","name":{"kind":"Name","value":"projectId"},"value":{"kind":"Variable","name":{"kind":"Name","value":"projectId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"caseBaseInfo"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"serialNumber"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"caseDesc"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"bindName"}},{"kind":"Field","name":{"kind":"Name","value":"classifyName"}},{"kind":"Field","name":{"kind":"Name","value":"operatingSystemName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelName"}},{"kind":"Field","name":{"kind":"Name","value":"submitTime"}},{"kind":"Field","name":{"kind":"Name","value":"submitUserName"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevelType"}},{"kind":"Field","name":{"kind":"Name","value":"canModify"}},{"kind":"Field","name":{"kind":"Name","value":"testMethodName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"complianceRequire"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"lawName"}},{"kind":"Field","name":{"kind":"Name","value":"lawCatalogueId"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawCatalogueName"}},{"kind":"Field","name":{"kind":"Name","value":"dutyLawClassify1"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"Field","name":{"kind":"Name","value":"caseStatus"}},{"kind":"Field","name":{"kind":"Name","value":"caseTestProcess"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"result"}},{"kind":"Field","name":{"kind":"Name","value":"process"}},{"kind":"Field","name":{"kind":"Name","value":"stepName"}},{"kind":"Field","name":{"kind":"Name","value":"remark"}},{"kind":"Field","name":{"kind":"Name","value":"data"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"fileUrl"}},{"kind":"Field","name":{"kind":"Name","value":"fileUUID"}},{"kind":"Field","name":{"kind":"Name","value":"fileName"}},{"kind":"Field","name":{"kind":"Name","value":"size"}}]}},{"kind":"Field","name":{"kind":"Name","value":"done"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useCaseTestProcessRecordQuery__
 *
 * To run a query within a React component, call `useCaseTestProcessRecordQuery` and pass it any options that fit your needs.
 * When your component renders, `useCaseTestProcessRecordQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCaseTestProcessRecordQuery({
 *   variables: {
 *      teamId: // value for 'teamId'
 *      caseId: // value for 'caseId'
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useCaseTestProcessRecordQuery(baseOptions: ApolloReactHooks.QueryHookOptions<CaseTestProcessRecordQuery, CaseTestProcessRecordQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<CaseTestProcessRecordQuery, CaseTestProcessRecordQueryVariables>(CaseTestProcessRecordDocument, options);
      }
export function useCaseTestProcessRecordLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CaseTestProcessRecordQuery, CaseTestProcessRecordQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<CaseTestProcessRecordQuery, CaseTestProcessRecordQueryVariables>(CaseTestProcessRecordDocument, options);
        }
export type CaseTestProcessRecordQueryHookResult = ReturnType<typeof useCaseTestProcessRecordQuery>;
export type CaseTestProcessRecordLazyQueryHookResult = ReturnType<typeof useCaseTestProcessRecordLazyQuery>;
export type CaseTestProcessRecordQueryResult = ApolloReactCommon.QueryResult<CaseTestProcessRecordQuery, CaseTestProcessRecordQueryVariables>;
export const ThreadAlertDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ThreadAlert"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"threatAlert"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThreatAlert"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"InterfaceSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"InterfaceSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"ip"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"inode"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProcSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProcSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"security"}},{"kind":"Field","name":{"kind":"Name","value":"importance"}},{"kind":"Field","name":{"kind":"Name","value":"score"}},{"kind":"Field","name":{"kind":"Name","value":"connectRelation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}},{"kind":"Field","name":{"kind":"Name","value":"baselinePosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Kernel"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Kernel"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"release"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"cmdline"}},{"kind":"Field","name":{"kind":"Name","value":"procVersion"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThreatAlert"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThreatAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"interface"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"InterfaceSecurity"}}]}},{"kind":"Field","name":{"kind":"Name","value":"procSecurity"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProcSecurity"}}]}},{"kind":"Field","name":{"kind":"Name","value":"kernel"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Kernel"}}]}},{"kind":"Field","name":{"kind":"Name","value":"score"}}]}}]} as unknown as DocumentNode;

/**
 * __useThreadAlertQuery__
 *
 * To run a query within a React component, call `useThreadAlertQuery` and pass it any options that fit your needs.
 * When your component renders, `useThreadAlertQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useThreadAlertQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useThreadAlertQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ThreadAlertQuery, ThreadAlertQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ThreadAlertQuery, ThreadAlertQueryVariables>(ThreadAlertDocument, options);
      }
export function useThreadAlertLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ThreadAlertQuery, ThreadAlertQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ThreadAlertQuery, ThreadAlertQueryVariables>(ThreadAlertDocument, options);
        }
export type ThreadAlertQueryHookResult = ReturnType<typeof useThreadAlertQuery>;
export type ThreadAlertLazyQueryHookResult = ReturnType<typeof useThreadAlertLazyQuery>;
export type ThreadAlertQueryResult = ApolloReactCommon.QueryResult<ThreadAlertQuery, ThreadAlertQueryVariables>;
export const ProjectThreadAlertDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectThreadAlert"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"threatAlert"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ThreatAlert"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"InterfaceSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"InterfaceSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"ip"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"inode"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ProcSecurity"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ProcSecurity"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"security"}},{"kind":"Field","name":{"kind":"Name","value":"importance"}},{"kind":"Field","name":{"kind":"Name","value":"score"}},{"kind":"Field","name":{"kind":"Name","value":"connectRelation"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"port"}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"detailPosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}},{"kind":"Field","name":{"kind":"Name","value":"baselinePosition"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"url"}},{"kind":"Field","name":{"kind":"Name","value":"offset"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Kernel"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Kernel"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"release"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"cmdline"}},{"kind":"Field","name":{"kind":"Name","value":"procVersion"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"ThreatAlert"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"ThreatAlert"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"interface"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"InterfaceSecurity"}}]}},{"kind":"Field","name":{"kind":"Name","value":"procSecurity"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"ProcSecurity"}}]}},{"kind":"Field","name":{"kind":"Name","value":"kernel"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Kernel"}}]}},{"kind":"Field","name":{"kind":"Name","value":"score"}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectThreadAlertQuery__
 *
 * To run a query within a React component, call `useProjectThreadAlertQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectThreadAlertQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectThreadAlertQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *   },
 * });
 */
export function useProjectThreadAlertQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectThreadAlertQuery, ProjectThreadAlertQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectThreadAlertQuery, ProjectThreadAlertQueryVariables>(ProjectThreadAlertDocument, options);
      }
export function useProjectThreadAlertLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectThreadAlertQuery, ProjectThreadAlertQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectThreadAlertQuery, ProjectThreadAlertQueryVariables>(ProjectThreadAlertDocument, options);
        }
export type ProjectThreadAlertQueryHookResult = ReturnType<typeof useProjectThreadAlertQuery>;
export type ProjectThreadAlertLazyQueryHookResult = ReturnType<typeof useProjectThreadAlertLazyQuery>;
export type ProjectThreadAlertQueryResult = ApolloReactCommon.QueryResult<ProjectThreadAlertQuery, ProjectThreadAlertQueryVariables>;
export const ProjectSystemKernelDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectSystemKernel"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"kernel"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"release"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"cmdline"}},{"kind":"Field","name":{"kind":"Name","value":"procVersion"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectSystemKernelQuery__
 *
 * To run a query within a React component, call `useProjectSystemKernelQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectSystemKernelQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectSystemKernelQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useProjectSystemKernelQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectSystemKernelQuery, ProjectSystemKernelQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectSystemKernelQuery, ProjectSystemKernelQueryVariables>(ProjectSystemKernelDocument, options);
      }
export function useProjectSystemKernelLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectSystemKernelQuery, ProjectSystemKernelQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectSystemKernelQuery, ProjectSystemKernelQueryVariables>(ProjectSystemKernelDocument, options);
        }
export type ProjectSystemKernelQueryHookResult = ReturnType<typeof useProjectSystemKernelQuery>;
export type ProjectSystemKernelLazyQueryHookResult = ReturnType<typeof useProjectSystemKernelLazyQuery>;
export type ProjectSystemKernelQueryResult = ApolloReactCommon.QueryResult<ProjectSystemKernelQuery, ProjectSystemKernelQueryVariables>;
export const ProjectSystemDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectSystem"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"buddyInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"node"}},{"kind":"Field","name":{"kind":"Name","value":"zone"}},{"kind":"Field","name":{"kind":"Name","value":"freePageBlock"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"crypto"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"driver"}},{"kind":"Field","name":{"kind":"Name","value":"module"}},{"kind":"Field","name":{"kind":"Name","value":"priority"}},{"kind":"Field","name":{"kind":"Name","value":"refCnt"}},{"kind":"Field","name":{"kind":"Name","value":"selfTest"}},{"kind":"Field","name":{"kind":"Name","value":"internal"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"module","block":false},{"kind":"StringValue","value":"type","block":false}]}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"supportedfs"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"dev"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"dev","block":false}]}}]}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectSystemQuery__
 *
 * To run a query within a React component, call `useProjectSystemQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectSystemQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectSystemQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      field: // value for 'field'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useProjectSystemQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectSystemQuery, ProjectSystemQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectSystemQuery, ProjectSystemQueryVariables>(ProjectSystemDocument, options);
      }
export function useProjectSystemLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectSystemQuery, ProjectSystemQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectSystemQuery, ProjectSystemQueryVariables>(ProjectSystemDocument, options);
        }
export type ProjectSystemQueryHookResult = ReturnType<typeof useProjectSystemQuery>;
export type ProjectSystemLazyQueryHookResult = ReturnType<typeof useProjectSystemLazyQuery>;
export type ProjectSystemQueryResult = ApolloReactCommon.QueryResult<ProjectSystemQuery, ProjectSystemQueryVariables>;
export const ProjectUserDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectUser"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"user"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"uid"}},{"kind":"Field","name":{"kind":"Name","value":"userName"}},{"kind":"Field","name":{"kind":"Name","value":"gid"}},{"kind":"Field","name":{"kind":"Name","value":"shell"}},{"kind":"Field","name":{"kind":"Name","value":"passwordHash"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"group"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"gid"}},{"kind":"Field","name":{"kind":"Name","value":"groupName"}},{"kind":"Field","name":{"kind":"Name","value":"groupPassword"}},{"kind":"Field","name":{"kind":"Name","value":"userList"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectUserQuery__
 *
 * To run a query within a React component, call `useProjectUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectUserQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      field: // value for 'field'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useProjectUserQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectUserQuery, ProjectUserQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectUserQuery, ProjectUserQueryVariables>(ProjectUserDocument, options);
      }
export function useProjectUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectUserQuery, ProjectUserQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectUserQuery, ProjectUserQueryVariables>(ProjectUserDocument, options);
        }
export type ProjectUserQueryHookResult = ReturnType<typeof useProjectUserQuery>;
export type ProjectUserLazyQueryHookResult = ReturnType<typeof useProjectUserLazyQuery>;
export type ProjectUserQueryResult = ApolloReactCommon.QueryResult<ProjectUserQuery, ProjectUserQueryVariables>;
export const ProjectNetworkDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectNetwork"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"hosts"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"address"}},{"kind":"Field","name":{"kind":"Name","value":"hostname"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"network"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"interface"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"ipv4Address"}},{"kind":"Field","name":{"kind":"Name","value":"ipv6Address"}},{"kind":"Field","name":{"kind":"Name","value":"phyAddress"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"routing"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"table"}},{"kind":"Field","name":{"kind":"Name","value":"destination"}},{"kind":"Field","name":{"kind":"Name","value":"mask"}},{"kind":"Field","name":{"kind":"Name","value":"gateway"}},{"kind":"Field","name":{"kind":"Name","value":"interfaceName"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"table","block":false}]}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"unixSocket"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"inode"}},{"kind":"Field","name":{"kind":"Name","value":"path"}},{"kind":"Field","name":{"kind":"Name","value":"processName"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"listeningSocket"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"localAddress"}},{"kind":"Field","name":{"kind":"Name","value":"localPort"}},{"kind":"Field","name":{"kind":"Name","value":"inode"}},{"kind":"Field","name":{"kind":"Name","value":"processName"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"type","block":false}]}}]}]}},{"kind":"Field","name":{"kind":"Name","value":"connectingSocket"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"localAddress"}},{"kind":"Field","name":{"kind":"Name","value":"localPort"}},{"kind":"Field","name":{"kind":"Name","value":"remoteAddress"}},{"kind":"Field","name":{"kind":"Name","value":"remotePort"}},{"kind":"Field","name":{"kind":"Name","value":"inode"}},{"kind":"Field","name":{"kind":"Name","value":"processName"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"type","block":false}]}}]}]}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectNetworkQuery__
 *
 * To run a query within a React component, call `useProjectNetworkQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectNetworkQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectNetworkQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      field: // value for 'field'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useProjectNetworkQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectNetworkQuery, ProjectNetworkQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectNetworkQuery, ProjectNetworkQueryVariables>(ProjectNetworkDocument, options);
      }
export function useProjectNetworkLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectNetworkQuery, ProjectNetworkQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectNetworkQuery, ProjectNetworkQueryVariables>(ProjectNetworkDocument, options);
        }
export type ProjectNetworkQueryHookResult = ReturnType<typeof useProjectNetworkQuery>;
export type ProjectNetworkLazyQueryHookResult = ReturnType<typeof useProjectNetworkLazyQuery>;
export type ProjectNetworkQueryResult = ApolloReactCommon.QueryResult<ProjectNetworkQuery, ProjectNetworkQueryVariables>;
export const ProjectStorageDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectStorage"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"storageUsage"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"filesystem"}},{"kind":"Field","name":{"kind":"Name","value":"total"}},{"kind":"Field","name":{"kind":"Name","value":"used"}},{"kind":"Field","name":{"kind":"Name","value":"available"}},{"kind":"Field","name":{"kind":"Name","value":"usePercent"}},{"kind":"Field","name":{"kind":"Name","value":"mountOn"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"storagePartition"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"node"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"storageMount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"device"}},{"kind":"Field","name":{"kind":"Name","value":"mountPoint"}},{"kind":"Field","name":{"kind":"Name","value":"fsType"}},{"kind":"Field","name":{"kind":"Name","value":"option"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectStorageQuery__
 *
 * To run a query within a React component, call `useProjectStorageQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectStorageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectStorageQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      field: // value for 'field'
 *   },
 * });
 */
export function useProjectStorageQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectStorageQuery, ProjectStorageQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectStorageQuery, ProjectStorageQueryVariables>(ProjectStorageDocument, options);
      }
export function useProjectStorageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectStorageQuery, ProjectStorageQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectStorageQuery, ProjectStorageQueryVariables>(ProjectStorageDocument, options);
        }
export type ProjectStorageQueryHookResult = ReturnType<typeof useProjectStorageQuery>;
export type ProjectStorageLazyQueryHookResult = ReturnType<typeof useProjectStorageLazyQuery>;
export type ProjectStorageQueryResult = ApolloReactCommon.QueryResult<ProjectStorageQuery, ProjectStorageQueryVariables>;
export const ProjectFileContentDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectFileContent"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"FileWithContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"FileWithContent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"File"}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"File"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"operation"},"name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"ownerUser"}},{"kind":"Field","name":{"kind":"Name","value":"ownerGroup"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"aclEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"linkCount"}},{"kind":"Field","name":{"kind":"Name","value":"linkFile"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"contentType"}},{"kind":"Field","name":{"kind":"Name","value":"arch"}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectFileContentQuery__
 *
 * To run a query within a React component, call `useProjectFileContentQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectFileContentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectFileContentQuery({
 *   variables: {
 *      id: // value for 'id'
 *      fileId: // value for 'fileId'
 *   },
 * });
 */
export function useProjectFileContentQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectFileContentQuery, ProjectFileContentQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectFileContentQuery, ProjectFileContentQueryVariables>(ProjectFileContentDocument, options);
      }
export function useProjectFileContentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectFileContentQuery, ProjectFileContentQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectFileContentQuery, ProjectFileContentQueryVariables>(ProjectFileContentDocument, options);
        }
export type ProjectFileContentQueryHookResult = ReturnType<typeof useProjectFileContentQuery>;
export type ProjectFileContentLazyQueryHookResult = ReturnType<typeof useProjectFileContentLazyQuery>;
export type ProjectFileContentQueryResult = ApolloReactCommon.QueryResult<ProjectFileContentQuery, ProjectFileContentQueryVariables>;
export const ProjectFileTreeDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectFileTree"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"fileId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"virtual"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectFileTreeQuery__
 *
 * To run a query within a React component, call `useProjectFileTreeQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectFileTreeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectFileTreeQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      path: // value for 'path'
 *      fileId: // value for 'fileId'
 *   },
 * });
 */
export function useProjectFileTreeQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectFileTreeQuery, ProjectFileTreeQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectFileTreeQuery, ProjectFileTreeQueryVariables>(ProjectFileTreeDocument, options);
      }
export function useProjectFileTreeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectFileTreeQuery, ProjectFileTreeQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectFileTreeQuery, ProjectFileTreeQueryVariables>(ProjectFileTreeDocument, options);
        }
export type ProjectFileTreeQueryHookResult = ReturnType<typeof useProjectFileTreeQuery>;
export type ProjectFileTreeLazyQueryHookResult = ReturnType<typeof useProjectFileTreeLazyQuery>;
export type ProjectFileTreeQueryResult = ApolloReactCommon.QueryResult<ProjectFileTreeQuery, ProjectFileTreeQueryVariables>;
export const ProjectFileDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectFile"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"noneVirtual"},"value":{"kind":"BooleanValue","value":true}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}},{"kind":"Argument","name":{"kind":"Name","value":"searchField"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"File"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"type","block":false},{"kind":"StringValue","value":"ownerUser","block":false},{"kind":"StringValue","value":"ownerGroup","block":false}]}}]}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"File"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"File"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"operation"},"name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"perm"}},{"kind":"Field","name":{"kind":"Name","value":"ownerUser"}},{"kind":"Field","name":{"kind":"Name","value":"ownerGroup"}},{"kind":"Field","name":{"kind":"Name","value":"size"}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"aclEnabled"}},{"kind":"Field","name":{"kind":"Name","value":"linkCount"}},{"kind":"Field","name":{"kind":"Name","value":"linkFile"}},{"kind":"Field","name":{"kind":"Name","value":"date"}},{"kind":"Field","name":{"kind":"Name","value":"contentType"}},{"kind":"Field","name":{"kind":"Name","value":"arch"}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectFileQuery__
 *
 * To run a query within a React component, call `useProjectFileQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectFileQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectFileQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      path: // value for 'path'
 *      orderBy: // value for 'orderBy'
 *      filterFields: // value for 'filterFields'
 *      searchField: // value for 'searchField'
 *   },
 * });
 */
export function useProjectFileQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectFileQuery, ProjectFileQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectFileQuery, ProjectFileQueryVariables>(ProjectFileDocument, options);
      }
export function useProjectFileLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectFileQuery, ProjectFileQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectFileQuery, ProjectFileQueryVariables>(ProjectFileDocument, options);
        }
export type ProjectFileQueryHookResult = ReturnType<typeof useProjectFileQuery>;
export type ProjectFileLazyQueryHookResult = ReturnType<typeof useProjectFileLazyQuery>;
export type ProjectFileQueryResult = ApolloReactCommon.QueryResult<ProjectFileQuery, ProjectFileQueryVariables>;
export const ProjectProcessDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectProcess"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pid"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"process"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pid"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"searchField"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"cmd"}},{"kind":"Field","name":{"kind":"Name","value":"cwd"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"uid"}},{"kind":"Field","name":{"kind":"Name","value":"gid"}},{"kind":"Field","name":{"kind":"Name","value":"inodes"}},{"kind":"Field","name":{"kind":"Name","value":"fileHandles"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"loginUID"}},{"kind":"Field","name":{"kind":"Name","value":"rootDir"}},{"kind":"Field","name":{"kind":"Name","value":"apk"}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"seccomp"}}]}},{"kind":"Field","name":{"kind":"Name","value":"memmap"}},{"kind":"Field","name":{"kind":"Name","value":"sharelibs"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectProcessQuery__
 *
 * To run a query within a React component, call `useProjectProcessQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectProcessQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectProcessQuery({
 *   variables: {
 *      id: // value for 'id'
 *      pid: // value for 'pid'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      searchField: // value for 'searchField'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useProjectProcessQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectProcessQuery, ProjectProcessQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectProcessQuery, ProjectProcessQueryVariables>(ProjectProcessDocument, options);
      }
export function useProjectProcessLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectProcessQuery, ProjectProcessQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectProcessQuery, ProjectProcessQueryVariables>(ProjectProcessDocument, options);
        }
export type ProjectProcessQueryHookResult = ReturnType<typeof useProjectProcessQuery>;
export type ProjectProcessLazyQueryHookResult = ReturnType<typeof useProjectProcessLazyQuery>;
export type ProjectProcessQueryResult = ApolloReactCommon.QueryResult<ProjectProcessQuery, ProjectProcessQueryVariables>;
export const ProjectProcessBriefDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectProcessBrief"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"process"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"ObjectValue","fields":[{"kind":"ObjectField","name":{"kind":"Name","value":"offset"},"value":{"kind":"IntValue","value":"-1"}},{"kind":"ObjectField","name":{"kind":"Name","value":"limit"},"value":{"kind":"IntValue","value":"-1"}}]}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"searchField"},"value":{"kind":"Variable","name":{"kind":"Name","value":"searchField"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"cmd"}},{"kind":"Field","name":{"kind":"Name","value":"cwd"}},{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"status"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ppid"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectProcessBriefQuery__
 *
 * To run a query within a React component, call `useProjectProcessBriefQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectProcessBriefQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectProcessBriefQuery({
 *   variables: {
 *      id: // value for 'id'
 *      search: // value for 'search'
 *      searchField: // value for 'searchField'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useProjectProcessBriefQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectProcessBriefQuery, ProjectProcessBriefQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectProcessBriefQuery, ProjectProcessBriefQueryVariables>(ProjectProcessBriefDocument, options);
      }
export function useProjectProcessBriefLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectProcessBriefQuery, ProjectProcessBriefQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectProcessBriefQuery, ProjectProcessBriefQueryVariables>(ProjectProcessBriefDocument, options);
        }
export type ProjectProcessBriefQueryHookResult = ReturnType<typeof useProjectProcessBriefQuery>;
export type ProjectProcessBriefLazyQueryHookResult = ReturnType<typeof useProjectProcessBriefLazyQuery>;
export type ProjectProcessBriefQueryResult = ApolloReactCommon.QueryResult<ProjectProcessBriefQuery, ProjectProcessBriefQueryVariables>;
export const ProjectCheckSecDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectCheckSec"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pid"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"checkSec"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}},{"kind":"Argument","name":{"kind":"Name","value":"pid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pid"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"canary"}},{"kind":"Field","name":{"kind":"Name","value":"nx"}},{"kind":"Field","name":{"kind":"Name","value":"pie"}},{"kind":"Field","name":{"kind":"Name","value":"relro"}},{"kind":"Field","name":{"kind":"Name","value":"rpath"}},{"kind":"Field","name":{"kind":"Name","value":"runpath"}},{"kind":"Field","name":{"kind":"Name","value":"symbols"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"canary","block":false},{"kind":"StringValue","value":"nx","block":false},{"kind":"StringValue","value":"pie","block":false},{"kind":"StringValue","value":"relro","block":false},{"kind":"StringValue","value":"rpath","block":false},{"kind":"StringValue","value":"runpath","block":false},{"kind":"StringValue","value":"symbols","block":false}]}}]}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectCheckSecQuery__
 *
 * To run a query within a React component, call `useProjectCheckSecQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectCheckSecQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectCheckSecQuery({
 *   variables: {
 *      id: // value for 'id'
 *      pid: // value for 'pid'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useProjectCheckSecQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectCheckSecQuery, ProjectCheckSecQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectCheckSecQuery, ProjectCheckSecQueryVariables>(ProjectCheckSecDocument, options);
      }
export function useProjectCheckSecLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectCheckSecQuery, ProjectCheckSecQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectCheckSecQuery, ProjectCheckSecQueryVariables>(ProjectCheckSecDocument, options);
        }
export type ProjectCheckSecQueryHookResult = ReturnType<typeof useProjectCheckSecQuery>;
export type ProjectCheckSecLazyQueryHookResult = ReturnType<typeof useProjectCheckSecLazyQuery>;
export type ProjectCheckSecQueryResult = ApolloReactCommon.QueryResult<ProjectCheckSecQuery, ProjectCheckSecQueryVariables>;
export const ProjectLibCveSecDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectLibCVESec"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pid"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"component"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"version"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withCVE"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"libCveSec"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pid"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"component"},"value":{"kind":"Variable","name":{"kind":"Name","value":"component"}}},{"kind":"Argument","name":{"kind":"Name","value":"version"},"value":{"kind":"Variable","name":{"kind":"Name","value":"version"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"CVESec"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"time","block":false},{"kind":"StringValue","value":"cvssRank","block":false},{"kind":"StringValue","value":"status","block":false},{"kind":"StringValue","value":"detail","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CvssRankStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CvssRankStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVE"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVE"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"cvssRank"}},{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"poc"}},{"kind":"Field","name":{"kind":"Name","value":"patch"}},{"kind":"Field","name":{"kind":"Name","value":"exp"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"cvss3Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"attackComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"privilegesRequired"}},{"kind":"Field","name":{"kind":"Name","value":"userInteraction"}},{"kind":"Field","name":{"kind":"Name","value":"scope"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cvss2Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"accessVector"}},{"kind":"Field","name":{"kind":"Name","value":"accessComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"authentication"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVESec"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVESec"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"path"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CvssRankStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withCVE"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CVE"}}]}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectLibCveSecQuery__
 *
 * To run a query within a React component, call `useProjectLibCveSecQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectLibCveSecQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectLibCveSecQuery({
 *   variables: {
 *      id: // value for 'id'
 *      pid: // value for 'pid'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      component: // value for 'component'
 *      version: // value for 'version'
 *      filterFields: // value for 'filterFields'
 *      withCVE: // value for 'withCVE'
 *   },
 * });
 */
export function useProjectLibCveSecQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectLibCveSecQuery, ProjectLibCveSecQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectLibCveSecQuery, ProjectLibCveSecQueryVariables>(ProjectLibCveSecDocument, options);
      }
export function useProjectLibCveSecLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectLibCveSecQuery, ProjectLibCveSecQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectLibCveSecQuery, ProjectLibCveSecQueryVariables>(ProjectLibCveSecDocument, options);
        }
export type ProjectLibCveSecQueryHookResult = ReturnType<typeof useProjectLibCveSecQuery>;
export type ProjectLibCveSecLazyQueryHookResult = ReturnType<typeof useProjectLibCveSecLazyQuery>;
export type ProjectLibCveSecQueryResult = ApolloReactCommon.QueryResult<ProjectLibCveSecQuery, ProjectLibCveSecQueryVariables>;
export const ProjectKernelCveSecDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectKernelCVESec"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"pid"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Int"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"path"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withCVE"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"kernelCveSec"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"pid"},"value":{"kind":"Variable","name":{"kind":"Name","value":"pid"}}},{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"path"},"value":{"kind":"Variable","name":{"kind":"Name","value":"path"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"CVESec"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"time","block":false},{"kind":"StringValue","value":"cvssRank","block":false},{"kind":"StringValue","value":"status","block":false},{"kind":"StringValue","value":"detail","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CvssRankStatistics"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CvssRankStatistics"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVE"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVE"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"cvssRank"}},{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"status"}},{"kind":"Field","name":{"kind":"Name","value":"poc"}},{"kind":"Field","name":{"kind":"Name","value":"patch"}},{"kind":"Field","name":{"kind":"Name","value":"exp"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"cvss3Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"attackVector"}},{"kind":"Field","name":{"kind":"Name","value":"attackComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"privilegesRequired"}},{"kind":"Field","name":{"kind":"Name","value":"userInteraction"}},{"kind":"Field","name":{"kind":"Name","value":"scope"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cvss2Info"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"cvss"}},{"kind":"Field","name":{"kind":"Name","value":"accessVector"}},{"kind":"Field","name":{"kind":"Name","value":"accessComplexity"}},{"kind":"Field","name":{"kind":"Name","value":"authentication"}},{"kind":"Field","name":{"kind":"Name","value":"confidentialityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"integrityImpact"}},{"kind":"Field","name":{"kind":"Name","value":"availabilityImpact"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CVESec"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"CVESec"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"version"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"path"}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CvssRankStatistics"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withCVE"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CVE"}}]}},{"kind":"Field","name":{"kind":"Name","value":"errDescription"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectKernelCveSecQuery__
 *
 * To run a query within a React component, call `useProjectKernelCveSecQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectKernelCveSecQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectKernelCveSecQuery({
 *   variables: {
 *      id: // value for 'id'
 *      pid: // value for 'pid'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      path: // value for 'path'
 *      filterFields: // value for 'filterFields'
 *      withCVE: // value for 'withCVE'
 *   },
 * });
 */
export function useProjectKernelCveSecQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectKernelCveSecQuery, ProjectKernelCveSecQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectKernelCveSecQuery, ProjectKernelCveSecQueryVariables>(ProjectKernelCveSecDocument, options);
      }
export function useProjectKernelCveSecLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectKernelCveSecQuery, ProjectKernelCveSecQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectKernelCveSecQuery, ProjectKernelCveSecQueryVariables>(ProjectKernelCveSecDocument, options);
        }
export type ProjectKernelCveSecQueryHookResult = ReturnType<typeof useProjectKernelCveSecQuery>;
export type ProjectKernelCveSecLazyQueryHookResult = ReturnType<typeof useProjectKernelCveSecLazyQuery>;
export type ProjectKernelCveSecQueryResult = ApolloReactCommon.QueryResult<ProjectKernelCveSecQuery, ProjectKernelCveSecQueryVariables>;
export const ProjectLicenseDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectLicense"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"component"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withFile"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}},"defaultValue":{"kind":"BooleanValue","value":false}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"license"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"component"},"value":{"kind":"Variable","name":{"kind":"Name","value":"component"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"License"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"risk","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"fieldValuesWithCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"license","block":false}]}}]}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"LicenseTag"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"LicenseTag"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"License"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"License"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"component"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"source"}},{"kind":"Field","name":{"kind":"Name","value":"content"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"required"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"forbidden"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"permitted"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withContent"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"LicenseTag"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","alias":{"kind":"Name","value":"risk"},"name":{"kind":"Name","value":"license"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","name":{"kind":"Name","value":"file"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withFile"}}}]}]}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectLicenseQuery__
 *
 * To run a query within a React component, call `useProjectLicenseQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectLicenseQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectLicenseQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      component: // value for 'component'
 *      filterFields: // value for 'filterFields'
 *      withContent: // value for 'withContent'
 *      withFile: // value for 'withFile'
 *   },
 * });
 */
export function useProjectLicenseQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectLicenseQuery, ProjectLicenseQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectLicenseQuery, ProjectLicenseQueryVariables>(ProjectLicenseDocument, options);
      }
export function useProjectLicenseLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectLicenseQuery, ProjectLicenseQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectLicenseQuery, ProjectLicenseQueryVariables>(ProjectLicenseDocument, options);
        }
export type ProjectLicenseQueryHookResult = ReturnType<typeof useProjectLicenseQuery>;
export type ProjectLicenseLazyQueryHookResult = ReturnType<typeof useProjectLicenseLazyQuery>;
export type ProjectLicenseQueryResult = ApolloReactCommon.QueryResult<ProjectLicenseQuery, ProjectLicenseQueryVariables>;
export const SysReportPotentialRiskDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SysReportPotentialRisk"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"androidRisk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"selinux"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"revise"}},{"kind":"Field","name":{"kind":"Name","value":"action"}},{"kind":"Field","name":{"kind":"Name","value":"role"}},{"kind":"Field","name":{"kind":"Name","value":"context"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"detail"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"procRisk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"procSec"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"processName"}},{"kind":"Field","name":{"kind":"Name","value":"cmd"}},{"kind":"Field","name":{"kind":"Name","value":"root"}},{"kind":"Field","name":{"kind":"Name","value":"checkSec"}},{"kind":"Field","name":{"kind":"Name","value":"cveSec"}},{"kind":"Field","name":{"kind":"Name","value":"effectiveUID"}},{"kind":"Field","name":{"kind":"Name","value":"risk"}}]}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"root","block":false},{"kind":"StringValue","value":"checkSec","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}},{"kind":"Field","name":{"kind":"Name","value":"exposedService"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"pid"}},{"kind":"Field","name":{"kind":"Name","value":"processName"}},{"kind":"Field","name":{"kind":"Name","value":"localAddress"}},{"kind":"Field","name":{"kind":"Name","value":"localPort"}},{"kind":"Field","name":{"kind":"Name","value":"remoteAddress"}},{"kind":"Field","name":{"kind":"Name","value":"remotePort"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"effectiveUID"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useSysReportPotentialRiskQuery__
 *
 * To run a query within a React component, call `useSysReportPotentialRiskQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysReportPotentialRiskQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysReportPotentialRiskQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      orderBy: // value for 'orderBy'
 *      field: // value for 'field'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useSysReportPotentialRiskQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SysReportPotentialRiskQuery, SysReportPotentialRiskQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SysReportPotentialRiskQuery, SysReportPotentialRiskQueryVariables>(SysReportPotentialRiskDocument, options);
      }
export function useSysReportPotentialRiskLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SysReportPotentialRiskQuery, SysReportPotentialRiskQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SysReportPotentialRiskQuery, SysReportPotentialRiskQueryVariables>(SysReportPotentialRiskDocument, options);
        }
export type SysReportPotentialRiskQueryHookResult = ReturnType<typeof useSysReportPotentialRiskQuery>;
export type SysReportPotentialRiskLazyQueryHookResult = ReturnType<typeof useSysReportPotentialRiskLazyQuery>;
export type SysReportPotentialRiskQueryResult = ApolloReactCommon.QueryResult<SysReportPotentialRiskQuery, SysReportPotentialRiskQueryVariables>;
export const ProjectCommandDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectCommand"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"commandId"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withResult"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"command"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"commandId"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"command"}},{"kind":"Field","name":{"kind":"Name","value":"result"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withResult"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"returnStatus"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectCommandQuery__
 *
 * To run a query within a React component, call `useProjectCommandQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectCommandQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectCommandQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      field: // value for 'field'
 *      commandId: // value for 'commandId'
 *      withResult: // value for 'withResult'
 *   },
 * });
 */
export function useProjectCommandQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectCommandQuery, ProjectCommandQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectCommandQuery, ProjectCommandQueryVariables>(ProjectCommandDocument, options);
      }
export function useProjectCommandLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectCommandQuery, ProjectCommandQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectCommandQuery, ProjectCommandQueryVariables>(ProjectCommandDocument, options);
        }
export type ProjectCommandQueryHookResult = ReturnType<typeof useProjectCommandQuery>;
export type ProjectCommandLazyQueryHookResult = ReturnType<typeof useProjectCommandLazyQuery>;
export type ProjectCommandQueryResult = ApolloReactCommon.QueryResult<ProjectCommandQuery, ProjectCommandQueryVariables>;
export const ProjectPeripheralDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ProjectPeripheral"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"usb"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"select"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"errDescription"}},{"kind":"Field","name":{"kind":"Name","value":"busID"}},{"kind":"Field","name":{"kind":"Name","value":"deviceID"}},{"kind":"Field","name":{"kind":"Name","value":"idVendor"}},{"kind":"Field","name":{"kind":"Name","value":"idProduct"}},{"kind":"Field","name":{"kind":"Name","value":"description"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useProjectPeripheralQuery__
 *
 * To run a query within a React component, call `useProjectPeripheralQuery` and pass it any options that fit your needs.
 * When your component renders, `useProjectPeripheralQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProjectPeripheralQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      field: // value for 'field'
 *   },
 * });
 */
export function useProjectPeripheralQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ProjectPeripheralQuery, ProjectPeripheralQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ProjectPeripheralQuery, ProjectPeripheralQueryVariables>(ProjectPeripheralDocument, options);
      }
export function useProjectPeripheralLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProjectPeripheralQuery, ProjectPeripheralQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ProjectPeripheralQuery, ProjectPeripheralQueryVariables>(ProjectPeripheralDocument, options);
        }
export type ProjectPeripheralQueryHookResult = ReturnType<typeof useProjectPeripheralQuery>;
export type ProjectPeripheralLazyQueryHookResult = ReturnType<typeof useProjectPeripheralLazyQuery>;
export type ProjectPeripheralQueryResult = ApolloReactCommon.QueryResult<ProjectPeripheralQuery, ProjectPeripheralQueryVariables>;
export const ReportOverviewDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"ReportOverview"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"baseline"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"cve"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"license"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"custom"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"detail"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"system"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"kernel"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"detail"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"release"}},{"kind":"Field","name":{"kind":"Name","value":"version"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"overview"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"baselineSecureScore"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"baseline"}}}]}]},{"kind":"Field","name":{"kind":"Name","value":"baseline"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"baseline"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"cve"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"cve"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"license"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"license"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}},{"kind":"Field","name":{"kind":"Name","value":"custom"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"custom"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]}}]}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useReportOverviewQuery__
 *
 * To run a query within a React component, call `useReportOverviewQuery` and pass it any options that fit your needs.
 * When your component renders, `useReportOverviewQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useReportOverviewQuery({
 *   variables: {
 *      id: // value for 'id'
 *      baseline: // value for 'baseline'
 *      cve: // value for 'cve'
 *      license: // value for 'license'
 *      custom: // value for 'custom'
 *      detail: // value for 'detail'
 *   },
 * });
 */
export function useReportOverviewQuery(baseOptions: ApolloReactHooks.QueryHookOptions<ReportOverviewQuery, ReportOverviewQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<ReportOverviewQuery, ReportOverviewQueryVariables>(ReportOverviewDocument, options);
      }
export function useReportOverviewLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ReportOverviewQuery, ReportOverviewQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<ReportOverviewQuery, ReportOverviewQueryVariables>(ReportOverviewDocument, options);
        }
export type ReportOverviewQueryHookResult = ReturnType<typeof useReportOverviewQuery>;
export type ReportOverviewLazyQueryHookResult = ReturnType<typeof useReportOverviewLazyQuery>;
export type ReportOverviewQueryResult = ApolloReactCommon.QueryResult<ReportOverviewQuery, ReportOverviewQueryVariables>;
export const SysReportRuleDetailDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SysReportRuleDetail"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ruleId"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ruleByID"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ruleId"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"detail"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"DetailConnection"}}]}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"DetailConnection"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"DetailConnection"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"column"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"title"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"append"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"key"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"nodes"}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]} as unknown as DocumentNode;

/**
 * __useSysReportRuleDetailQuery__
 *
 * To run a query within a React component, call `useSysReportRuleDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysReportRuleDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysReportRuleDetailQuery({
 *   variables: {
 *      id: // value for 'id'
 *      ruleId: // value for 'ruleId'
 *      offset: // value for 'offset'
 *   },
 * });
 */
export function useSysReportRuleDetailQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SysReportRuleDetailQuery, SysReportRuleDetailQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SysReportRuleDetailQuery, SysReportRuleDetailQueryVariables>(SysReportRuleDetailDocument, options);
      }
export function useSysReportRuleDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SysReportRuleDetailQuery, SysReportRuleDetailQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SysReportRuleDetailQuery, SysReportRuleDetailQueryVariables>(SysReportRuleDetailDocument, options);
        }
export type SysReportRuleDetailQueryHookResult = ReturnType<typeof useSysReportRuleDetailQuery>;
export type SysReportRuleDetailLazyQueryHookResult = ReturnType<typeof useSysReportRuleDetailLazyQuery>;
export type SysReportRuleDetailQueryResult = ApolloReactCommon.QueryResult<SysReportRuleDetailQuery, SysReportRuleDetailQueryVariables>;
export const SysReportGenericDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SysReportGeneric"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"classType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"language"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Language"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"auditType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AuditType"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"auditReport"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"classType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"classType"}}},{"kind":"Argument","name":{"kind":"Name","value":"auditType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"auditType"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Check"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"CheckRule"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Rule"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"riskContent"}},{"kind":"Field","name":{"kind":"Name","value":"riskReason"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"remediation"}},{"kind":"Field","name":{"kind":"Name","value":"detail"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Check"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Check"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rule"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"CheckRule"}}]}},{"kind":"Field","name":{"kind":"Name","value":"risk"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"risk"}},{"kind":"Field","name":{"kind":"Name","value":"count"}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useSysReportGenericQuery__
 *
 * To run a query within a React component, call `useSysReportGenericQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysReportGenericQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysReportGenericQuery({
 *   variables: {
 *      id: // value for 'id'
 *      classType: // value for 'classType'
 *      language: // value for 'language'
 *      auditType: // value for 'auditType'
 *   },
 * });
 */
export function useSysReportGenericQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SysReportGenericQuery, SysReportGenericQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SysReportGenericQuery, SysReportGenericQueryVariables>(SysReportGenericDocument, options);
      }
export function useSysReportGenericLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SysReportGenericQuery, SysReportGenericQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SysReportGenericQuery, SysReportGenericQueryVariables>(SysReportGenericDocument, options);
        }
export type SysReportGenericQueryHookResult = ReturnType<typeof useSysReportGenericQuery>;
export type SysReportGenericLazyQueryHookResult = ReturnType<typeof useSysReportGenericLazyQuery>;
export type SysReportGenericQueryResult = ApolloReactCommon.QueryResult<SysReportGenericQuery, SysReportGenericQueryVariables>;
export const SysReportBaselineDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SysReportBaseline"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"risk"}},"type":{"kind":"ListType","type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"CheckRisk"}}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"language"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Language"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"auditType"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"AuditType"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"language"},"value":{"kind":"Variable","name":{"kind":"Name","value":"language"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"audit"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"risk"},"value":{"kind":"Variable","name":{"kind":"Name","value":"risk"}}},{"kind":"Argument","name":{"kind":"Name","value":"auditType"},"value":{"kind":"Variable","name":{"kind":"Name","value":"auditType"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"classKey"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"catalogKey"}},{"kind":"Field","name":{"kind":"Name","value":"catalog"}},{"kind":"Field","name":{"kind":"Name","value":"ruleName"}},{"kind":"Field","name":{"kind":"Name","value":"description"}},{"kind":"Field","name":{"kind":"Name","value":"riskLevel"}},{"kind":"Field","name":{"kind":"Name","value":"wp29"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"rule"}},{"kind":"Field","name":{"kind":"Name","value":"class"}},{"kind":"Field","name":{"kind":"Name","value":"detail"}},{"kind":"Field","name":{"kind":"Name","value":"example"}}]}}]}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"wp29","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useSysReportBaselineQuery__
 *
 * To run a query within a React component, call `useSysReportBaselineQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysReportBaselineQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysReportBaselineQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      risk: // value for 'risk'
 *      language: // value for 'language'
 *      auditType: // value for 'auditType'
 *      filterFields: // value for 'filterFields'
 *   },
 * });
 */
export function useSysReportBaselineQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SysReportBaselineQuery, SysReportBaselineQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SysReportBaselineQuery, SysReportBaselineQueryVariables>(SysReportBaselineDocument, options);
      }
export function useSysReportBaselineLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SysReportBaselineQuery, SysReportBaselineQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SysReportBaselineQuery, SysReportBaselineQueryVariables>(SysReportBaselineDocument, options);
        }
export type SysReportBaselineQueryHookResult = ReturnType<typeof useSysReportBaselineQuery>;
export type SysReportBaselineLazyQueryHookResult = ReturnType<typeof useSysReportBaselineLazyQuery>;
export type SysReportBaselineQueryResult = ApolloReactCommon.QueryResult<SysReportBaselineQuery, SysReportBaselineQueryVariables>;
export const SensitiveInfoDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SensitiveInfo"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"offset"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OffsetConnectionInput"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"search"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"type"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveType"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"domain"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"ip"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"String"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Boolean"}}},"defaultValue":{"kind":"BooleanValue","value":false}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}},"type":{"kind":"NamedType","name":{"kind":"Name","value":"OrderByInput"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"sensitiveInfo"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"offset"},"value":{"kind":"Variable","name":{"kind":"Name","value":"offset"}}},{"kind":"Argument","name":{"kind":"Name","value":"search"},"value":{"kind":"Variable","name":{"kind":"Name","value":"search"}}},{"kind":"Argument","name":{"kind":"Name","value":"type"},"value":{"kind":"Variable","name":{"kind":"Name","value":"type"}}},{"kind":"Argument","name":{"kind":"Name","value":"filterFields"},"value":{"kind":"Variable","name":{"kind":"Name","value":"filterFields"}}},{"kind":"Argument","name":{"kind":"Name","value":"domain"},"value":{"kind":"Variable","name":{"kind":"Name","value":"domain"}}},{"kind":"Argument","name":{"kind":"Name","value":"ip"},"value":{"kind":"Variable","name":{"kind":"Name","value":"ip"}}},{"kind":"Argument","name":{"kind":"Name","value":"orderBy"},"value":{"kind":"Variable","name":{"kind":"Name","value":"orderBy"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"nodes"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveDomain"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveIP"}},{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveContent"}}]}},{"kind":"Field","name":{"kind":"Name","value":"totalCount"}},{"kind":"Field","name":{"kind":"Name","value":"fieldValues"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"type","block":false},{"kind":"StringValue","value":"scheme","block":false}]}}]},{"kind":"Field","name":{"kind":"Name","value":"fieldValuesWithCount"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"fields"},"value":{"kind":"ListValue","values":[{"kind":"StringValue","value":"domain","block":false}]}}],"directives":[{"kind":"Directive","name":{"kind":"Name","value":"skip"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}]}]}}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveFile"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveFile"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveIP"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveIP"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"ip"}},{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"files"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveFile"}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveDomain"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveDomain"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"type"}},{"kind":"Field","name":{"kind":"Name","value":"domain"}},{"kind":"Field","name":{"kind":"Name","value":"count"}},{"kind":"Field","name":{"kind":"Name","value":"detail"},"directives":[{"kind":"Directive","name":{"kind":"Name","value":"include"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"if"},"value":{"kind":"Variable","name":{"kind":"Name","value":"withDetail"}}}]}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"content"}},{"kind":"Field","name":{"kind":"Name","value":"files"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"SensitiveFile"}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"SensitiveContent"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SensitiveContent"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"file"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"type"}}]}},{"kind":"Field","name":{"kind":"Name","value":"content"}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useSensitiveInfoQuery__
 *
 * To run a query within a React component, call `useSensitiveInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useSensitiveInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSensitiveInfoQuery({
 *   variables: {
 *      id: // value for 'id'
 *      offset: // value for 'offset'
 *      search: // value for 'search'
 *      type: // value for 'type'
 *      domain: // value for 'domain'
 *      ip: // value for 'ip'
 *      withDetail: // value for 'withDetail'
 *      filterFields: // value for 'filterFields'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useSensitiveInfoQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SensitiveInfoQuery, SensitiveInfoQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SensitiveInfoQuery, SensitiveInfoQueryVariables>(SensitiveInfoDocument, options);
      }
export function useSensitiveInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SensitiveInfoQuery, SensitiveInfoQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SensitiveInfoQuery, SensitiveInfoQueryVariables>(SensitiveInfoDocument, options);
        }
export type SensitiveInfoQueryHookResult = ReturnType<typeof useSensitiveInfoQuery>;
export type SensitiveInfoLazyQueryHookResult = ReturnType<typeof useSensitiveInfoLazyQuery>;
export type SensitiveInfoQueryResult = ApolloReactCommon.QueryResult<SensitiveInfoQuery, SensitiveInfoQueryVariables>;
export const SysPositionDocument = {"kind":"Document","definitions":[{"kind":"OperationDefinition","operation":"query","name":{"kind":"Name","value":"SysPosition"},"variableDefinitions":[{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"id"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"ID"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"page"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"SysReportPage"}}}},{"kind":"VariableDefinition","variable":{"kind":"Variable","name":{"kind":"Name","value":"field"}},"type":{"kind":"NonNullType","type":{"kind":"NamedType","name":{"kind":"Name","value":"Map"}}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"FragmentSpread","name":{"kind":"Name","value":"Viewer"}},{"kind":"Field","alias":{"kind":"Name","value":"analysis"},"name":{"kind":"Name","value":"node"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"id"},"value":{"kind":"Variable","name":{"kind":"Name","value":"id"}}}],"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Analysis"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"report"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"InlineFragment","typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"SysReport"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"position"},"arguments":[{"kind":"Argument","name":{"kind":"Name","value":"page"},"value":{"kind":"Variable","name":{"kind":"Name","value":"page"}}},{"kind":"Argument","name":{"kind":"Name","value":"field"},"value":{"kind":"Variable","name":{"kind":"Name","value":"field"}}}]}]}}]}}]}}]}}]}},{"kind":"FragmentDefinition","name":{"kind":"Name","value":"Viewer"},"typeCondition":{"kind":"NamedType","name":{"kind":"Name","value":"Query"}},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"viewer"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"username"}},{"kind":"Field","name":{"kind":"Name","value":"nickname"}},{"kind":"Field","name":{"kind":"Name","value":"userRole"},"selectionSet":{"kind":"SelectionSet","selections":[{"kind":"Field","name":{"kind":"Name","value":"id"}},{"kind":"Field","name":{"kind":"Name","value":"name"}},{"kind":"Field","name":{"kind":"Name","value":"permissions"}}]}}]}}]}}]} as unknown as DocumentNode;

/**
 * __useSysPositionQuery__
 *
 * To run a query within a React component, call `useSysPositionQuery` and pass it any options that fit your needs.
 * When your component renders, `useSysPositionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSysPositionQuery({
 *   variables: {
 *      id: // value for 'id'
 *      page: // value for 'page'
 *      field: // value for 'field'
 *   },
 * });
 */
export function useSysPositionQuery(baseOptions: ApolloReactHooks.QueryHookOptions<SysPositionQuery, SysPositionQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return ApolloReactHooks.useQuery<SysPositionQuery, SysPositionQueryVariables>(SysPositionDocument, options);
      }
export function useSysPositionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SysPositionQuery, SysPositionQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return ApolloReactHooks.useLazyQuery<SysPositionQuery, SysPositionQueryVariables>(SysPositionDocument, options);
        }
export type SysPositionQueryHookResult = ReturnType<typeof useSysPositionQuery>;
export type SysPositionLazyQueryHookResult = ReturnType<typeof useSysPositionLazyQuery>;
export type SysPositionQueryResult = ApolloReactCommon.QueryResult<SysPositionQuery, SysPositionQueryVariables>;